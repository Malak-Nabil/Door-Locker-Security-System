
MC1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000028ac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000009e  00800060  000028ac  00002940  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000014  008000fe  008000fe  000029de  2**0
                  ALLOC
  3 .stab         00002700  00000000  00000000  000029e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000012e5  00000000  00000000  000050e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000063c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00006505  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006675  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000082be  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  000091a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00009f58  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a0b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a345  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ab13  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 83 0a 	jmp	0x1506	; 0x1506 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 50 0a 	jmp	0x14a0	; 0x14a0 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec ea       	ldi	r30, 0xAC	; 172
      68:	f8 e2       	ldi	r31, 0x28	; 40
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 3f       	cpi	r26, 0xFE	; 254
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ae ef       	ldi	r26, 0xFE	; 254
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 31       	cpi	r26, 0x12	; 18
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 83 13 	call	0x2706	; 0x2706 <main>
      8a:	0c 94 54 14 	jmp	0x28a8	; 0x28a8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 d8 13 	jmp	0x27b0	; 0x27b0 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a8 ee       	ldi	r26, 0xE8	; 232
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 f4 13 	jmp	0x27e8	; 0x27e8 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 e4 13 	jmp	0x27c8	; 0x27c8 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 00 14 	jmp	0x2800	; 0x2800 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 e4 13 	jmp	0x27c8	; 0x27c8 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 00 14 	jmp	0x2800	; 0x2800 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 d8 13 	jmp	0x27b0	; 0x27b0 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	88 ee       	ldi	r24, 0xE8	; 232
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 f4 13 	jmp	0x27e8	; 0x27e8 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 e4 13 	jmp	0x27c8	; 0x27c8 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 00 14 	jmp	0x2800	; 0x2800 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 e4 13 	jmp	0x27c8	; 0x27c8 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 00 14 	jmp	0x2800	; 0x2800 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 e4 13 	jmp	0x27c8	; 0x27c8 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 00 14 	jmp	0x2800	; 0x2800 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 e8 13 	jmp	0x27d0	; 0x27d0 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 04 14 	jmp	0x2808	; 0x2808 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <LCD_init>:
#include"gpio.h"
#include <util/delay.h>
#include <stdlib.h>


void LCD_init(void){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	//Configure RS and E pin as output pins
	GPIO_setupPinDirection(RS_PORT_ID,RS_PIN_ID, PIN_OUTPUT);
     b4e:	80 e0       	ldi	r24, 0x00	; 0
     b50:	61 e0       	ldi	r22, 0x01	; 1
     b52:	41 e0       	ldi	r20, 0x01	; 1
     b54:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(E_PORT_ID ,E_PIN_ID , PIN_OUTPUT);
     b58:	80 e0       	ldi	r24, 0x00	; 0
     b5a:	62 e0       	ldi	r22, 0x02	; 2
     b5c:	41 e0       	ldi	r20, 0x01	; 1
     b5e:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <GPIO_setupPinDirection>

#if(DATA_BITS_MODE == 8)
	GPIO_setupPortDirection(DATA_PORT_ID, PIN_OUTPUT );
     b62:	82 e0       	ldi	r24, 0x02	; 2
     b64:	61 e0       	ldi	r22, 0x01	; 1
     b66:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <GPIO_setupPortDirection>
    send_command(TWO_LINES_EIGHT_BITS_MODE);
     b6a:	88 e3       	ldi	r24, 0x38	; 56
     b6c:	0e 94 c1 05 	call	0xb82	; 0xb82 <send_command>
	senddata(TWO_LINES_FOUR_BITS_MODE_INIT1 );
	senddata(TWO_LINES_FOUR_BITS_MODE_INIT2 );

	senddata(TWO_LINES_FOUR_BITS_MODE );
#endif
	send_command(CURSOR_OFF);
     b70:	8c e0       	ldi	r24, 0x0C	; 12
     b72:	0e 94 c1 05 	call	0xb82	; 0xb82 <send_command>
	send_command(CLEAR_COMMAND);
     b76:	81 e0       	ldi	r24, 0x01	; 1
     b78:	0e 94 c1 05 	call	0xb82	; 0xb82 <send_command>
}
     b7c:	cf 91       	pop	r28
     b7e:	df 91       	pop	r29
     b80:	08 95       	ret

00000b82 <send_command>:

void send_command(uint8 command){
     b82:	df 93       	push	r29
     b84:	cf 93       	push	r28
     b86:	cd b7       	in	r28, 0x3d	; 61
     b88:	de b7       	in	r29, 0x3e	; 62
     b8a:	e9 97       	sbiw	r28, 0x39	; 57
     b8c:	0f b6       	in	r0, 0x3f	; 63
     b8e:	f8 94       	cli
     b90:	de bf       	out	0x3e, r29	; 62
     b92:	0f be       	out	0x3f, r0	; 63
     b94:	cd bf       	out	0x3d, r28	; 61
     b96:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(RS_PORT_ID,RS_PIN_ID,LOGIC_LOW);
     b98:	80 e0       	ldi	r24, 0x00	; 0
     b9a:	61 e0       	ldi	r22, 0x01	; 1
     b9c:	40 e0       	ldi	r20, 0x00	; 0
     b9e:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <GPIO_writePin>
     ba2:	80 e0       	ldi	r24, 0x00	; 0
     ba4:	90 e0       	ldi	r25, 0x00	; 0
     ba6:	a0 e8       	ldi	r26, 0x80	; 128
     ba8:	bf e3       	ldi	r27, 0x3F	; 63
     baa:	8d ab       	std	Y+53, r24	; 0x35
     bac:	9e ab       	std	Y+54, r25	; 0x36
     bae:	af ab       	std	Y+55, r26	; 0x37
     bb0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     bb2:	6d a9       	ldd	r22, Y+53	; 0x35
     bb4:	7e a9       	ldd	r23, Y+54	; 0x36
     bb6:	8f a9       	ldd	r24, Y+55	; 0x37
     bb8:	98 ad       	ldd	r25, Y+56	; 0x38
     bba:	20 e0       	ldi	r18, 0x00	; 0
     bbc:	30 e0       	ldi	r19, 0x00	; 0
     bbe:	4a ef       	ldi	r20, 0xFA	; 250
     bc0:	54 e4       	ldi	r21, 0x44	; 68
     bc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     bc6:	dc 01       	movw	r26, r24
     bc8:	cb 01       	movw	r24, r22
     bca:	89 ab       	std	Y+49, r24	; 0x31
     bcc:	9a ab       	std	Y+50, r25	; 0x32
     bce:	ab ab       	std	Y+51, r26	; 0x33
     bd0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     bd2:	69 a9       	ldd	r22, Y+49	; 0x31
     bd4:	7a a9       	ldd	r23, Y+50	; 0x32
     bd6:	8b a9       	ldd	r24, Y+51	; 0x33
     bd8:	9c a9       	ldd	r25, Y+52	; 0x34
     bda:	20 e0       	ldi	r18, 0x00	; 0
     bdc:	30 e0       	ldi	r19, 0x00	; 0
     bde:	40 e8       	ldi	r20, 0x80	; 128
     be0:	5f e3       	ldi	r21, 0x3F	; 63
     be2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     be6:	88 23       	and	r24, r24
     be8:	2c f4       	brge	.+10     	; 0xbf4 <send_command+0x72>
		__ticks = 1;
     bea:	81 e0       	ldi	r24, 0x01	; 1
     bec:	90 e0       	ldi	r25, 0x00	; 0
     bee:	98 ab       	std	Y+48, r25	; 0x30
     bf0:	8f a7       	std	Y+47, r24	; 0x2f
     bf2:	3f c0       	rjmp	.+126    	; 0xc72 <send_command+0xf0>
	else if (__tmp > 65535)
     bf4:	69 a9       	ldd	r22, Y+49	; 0x31
     bf6:	7a a9       	ldd	r23, Y+50	; 0x32
     bf8:	8b a9       	ldd	r24, Y+51	; 0x33
     bfa:	9c a9       	ldd	r25, Y+52	; 0x34
     bfc:	20 e0       	ldi	r18, 0x00	; 0
     bfe:	3f ef       	ldi	r19, 0xFF	; 255
     c00:	4f e7       	ldi	r20, 0x7F	; 127
     c02:	57 e4       	ldi	r21, 0x47	; 71
     c04:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     c08:	18 16       	cp	r1, r24
     c0a:	4c f5       	brge	.+82     	; 0xc5e <send_command+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c0c:	6d a9       	ldd	r22, Y+53	; 0x35
     c0e:	7e a9       	ldd	r23, Y+54	; 0x36
     c10:	8f a9       	ldd	r24, Y+55	; 0x37
     c12:	98 ad       	ldd	r25, Y+56	; 0x38
     c14:	20 e0       	ldi	r18, 0x00	; 0
     c16:	30 e0       	ldi	r19, 0x00	; 0
     c18:	40 e2       	ldi	r20, 0x20	; 32
     c1a:	51 e4       	ldi	r21, 0x41	; 65
     c1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c20:	dc 01       	movw	r26, r24
     c22:	cb 01       	movw	r24, r22
     c24:	bc 01       	movw	r22, r24
     c26:	cd 01       	movw	r24, r26
     c28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c2c:	dc 01       	movw	r26, r24
     c2e:	cb 01       	movw	r24, r22
     c30:	98 ab       	std	Y+48, r25	; 0x30
     c32:	8f a7       	std	Y+47, r24	; 0x2f
     c34:	0f c0       	rjmp	.+30     	; 0xc54 <send_command+0xd2>
     c36:	88 ec       	ldi	r24, 0xC8	; 200
     c38:	90 e0       	ldi	r25, 0x00	; 0
     c3a:	9e a7       	std	Y+46, r25	; 0x2e
     c3c:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c3e:	8d a5       	ldd	r24, Y+45	; 0x2d
     c40:	9e a5       	ldd	r25, Y+46	; 0x2e
     c42:	01 97       	sbiw	r24, 0x01	; 1
     c44:	f1 f7       	brne	.-4      	; 0xc42 <send_command+0xc0>
     c46:	9e a7       	std	Y+46, r25	; 0x2e
     c48:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c4a:	8f a5       	ldd	r24, Y+47	; 0x2f
     c4c:	98 a9       	ldd	r25, Y+48	; 0x30
     c4e:	01 97       	sbiw	r24, 0x01	; 1
     c50:	98 ab       	std	Y+48, r25	; 0x30
     c52:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c54:	8f a5       	ldd	r24, Y+47	; 0x2f
     c56:	98 a9       	ldd	r25, Y+48	; 0x30
     c58:	00 97       	sbiw	r24, 0x00	; 0
     c5a:	69 f7       	brne	.-38     	; 0xc36 <send_command+0xb4>
     c5c:	14 c0       	rjmp	.+40     	; 0xc86 <send_command+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c5e:	69 a9       	ldd	r22, Y+49	; 0x31
     c60:	7a a9       	ldd	r23, Y+50	; 0x32
     c62:	8b a9       	ldd	r24, Y+51	; 0x33
     c64:	9c a9       	ldd	r25, Y+52	; 0x34
     c66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c6a:	dc 01       	movw	r26, r24
     c6c:	cb 01       	movw	r24, r22
     c6e:	98 ab       	std	Y+48, r25	; 0x30
     c70:	8f a7       	std	Y+47, r24	; 0x2f
     c72:	8f a5       	ldd	r24, Y+47	; 0x2f
     c74:	98 a9       	ldd	r25, Y+48	; 0x30
     c76:	9c a7       	std	Y+44, r25	; 0x2c
     c78:	8b a7       	std	Y+43, r24	; 0x2b
     c7a:	8b a5       	ldd	r24, Y+43	; 0x2b
     c7c:	9c a5       	ldd	r25, Y+44	; 0x2c
     c7e:	01 97       	sbiw	r24, 0x01	; 1
     c80:	f1 f7       	brne	.-4      	; 0xc7e <send_command+0xfc>
     c82:	9c a7       	std	Y+44, r25	; 0x2c
     c84:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	GPIO_writePin(E_PORT_ID,E_PIN_ID,LOGIC_HIGH);
     c86:	80 e0       	ldi	r24, 0x00	; 0
     c88:	62 e0       	ldi	r22, 0x02	; 2
     c8a:	41 e0       	ldi	r20, 0x01	; 1
     c8c:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <GPIO_writePin>
     c90:	80 e0       	ldi	r24, 0x00	; 0
     c92:	90 e0       	ldi	r25, 0x00	; 0
     c94:	a0 e8       	ldi	r26, 0x80	; 128
     c96:	bf e3       	ldi	r27, 0x3F	; 63
     c98:	8f a3       	std	Y+39, r24	; 0x27
     c9a:	98 a7       	std	Y+40, r25	; 0x28
     c9c:	a9 a7       	std	Y+41, r26	; 0x29
     c9e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ca0:	6f a1       	ldd	r22, Y+39	; 0x27
     ca2:	78 a5       	ldd	r23, Y+40	; 0x28
     ca4:	89 a5       	ldd	r24, Y+41	; 0x29
     ca6:	9a a5       	ldd	r25, Y+42	; 0x2a
     ca8:	20 e0       	ldi	r18, 0x00	; 0
     caa:	30 e0       	ldi	r19, 0x00	; 0
     cac:	4a ef       	ldi	r20, 0xFA	; 250
     cae:	54 e4       	ldi	r21, 0x44	; 68
     cb0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cb4:	dc 01       	movw	r26, r24
     cb6:	cb 01       	movw	r24, r22
     cb8:	8b a3       	std	Y+35, r24	; 0x23
     cba:	9c a3       	std	Y+36, r25	; 0x24
     cbc:	ad a3       	std	Y+37, r26	; 0x25
     cbe:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     cc0:	6b a1       	ldd	r22, Y+35	; 0x23
     cc2:	7c a1       	ldd	r23, Y+36	; 0x24
     cc4:	8d a1       	ldd	r24, Y+37	; 0x25
     cc6:	9e a1       	ldd	r25, Y+38	; 0x26
     cc8:	20 e0       	ldi	r18, 0x00	; 0
     cca:	30 e0       	ldi	r19, 0x00	; 0
     ccc:	40 e8       	ldi	r20, 0x80	; 128
     cce:	5f e3       	ldi	r21, 0x3F	; 63
     cd0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     cd4:	88 23       	and	r24, r24
     cd6:	2c f4       	brge	.+10     	; 0xce2 <send_command+0x160>
		__ticks = 1;
     cd8:	81 e0       	ldi	r24, 0x01	; 1
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	9a a3       	std	Y+34, r25	; 0x22
     cde:	89 a3       	std	Y+33, r24	; 0x21
     ce0:	3f c0       	rjmp	.+126    	; 0xd60 <send_command+0x1de>
	else if (__tmp > 65535)
     ce2:	6b a1       	ldd	r22, Y+35	; 0x23
     ce4:	7c a1       	ldd	r23, Y+36	; 0x24
     ce6:	8d a1       	ldd	r24, Y+37	; 0x25
     ce8:	9e a1       	ldd	r25, Y+38	; 0x26
     cea:	20 e0       	ldi	r18, 0x00	; 0
     cec:	3f ef       	ldi	r19, 0xFF	; 255
     cee:	4f e7       	ldi	r20, 0x7F	; 127
     cf0:	57 e4       	ldi	r21, 0x47	; 71
     cf2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     cf6:	18 16       	cp	r1, r24
     cf8:	4c f5       	brge	.+82     	; 0xd4c <send_command+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     cfa:	6f a1       	ldd	r22, Y+39	; 0x27
     cfc:	78 a5       	ldd	r23, Y+40	; 0x28
     cfe:	89 a5       	ldd	r24, Y+41	; 0x29
     d00:	9a a5       	ldd	r25, Y+42	; 0x2a
     d02:	20 e0       	ldi	r18, 0x00	; 0
     d04:	30 e0       	ldi	r19, 0x00	; 0
     d06:	40 e2       	ldi	r20, 0x20	; 32
     d08:	51 e4       	ldi	r21, 0x41	; 65
     d0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d0e:	dc 01       	movw	r26, r24
     d10:	cb 01       	movw	r24, r22
     d12:	bc 01       	movw	r22, r24
     d14:	cd 01       	movw	r24, r26
     d16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d1a:	dc 01       	movw	r26, r24
     d1c:	cb 01       	movw	r24, r22
     d1e:	9a a3       	std	Y+34, r25	; 0x22
     d20:	89 a3       	std	Y+33, r24	; 0x21
     d22:	0f c0       	rjmp	.+30     	; 0xd42 <send_command+0x1c0>
     d24:	88 ec       	ldi	r24, 0xC8	; 200
     d26:	90 e0       	ldi	r25, 0x00	; 0
     d28:	98 a3       	std	Y+32, r25	; 0x20
     d2a:	8f 8f       	std	Y+31, r24	; 0x1f
     d2c:	8f 8d       	ldd	r24, Y+31	; 0x1f
     d2e:	98 a1       	ldd	r25, Y+32	; 0x20
     d30:	01 97       	sbiw	r24, 0x01	; 1
     d32:	f1 f7       	brne	.-4      	; 0xd30 <send_command+0x1ae>
     d34:	98 a3       	std	Y+32, r25	; 0x20
     d36:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d38:	89 a1       	ldd	r24, Y+33	; 0x21
     d3a:	9a a1       	ldd	r25, Y+34	; 0x22
     d3c:	01 97       	sbiw	r24, 0x01	; 1
     d3e:	9a a3       	std	Y+34, r25	; 0x22
     d40:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d42:	89 a1       	ldd	r24, Y+33	; 0x21
     d44:	9a a1       	ldd	r25, Y+34	; 0x22
     d46:	00 97       	sbiw	r24, 0x00	; 0
     d48:	69 f7       	brne	.-38     	; 0xd24 <send_command+0x1a2>
     d4a:	14 c0       	rjmp	.+40     	; 0xd74 <send_command+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d4c:	6b a1       	ldd	r22, Y+35	; 0x23
     d4e:	7c a1       	ldd	r23, Y+36	; 0x24
     d50:	8d a1       	ldd	r24, Y+37	; 0x25
     d52:	9e a1       	ldd	r25, Y+38	; 0x26
     d54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d58:	dc 01       	movw	r26, r24
     d5a:	cb 01       	movw	r24, r22
     d5c:	9a a3       	std	Y+34, r25	; 0x22
     d5e:	89 a3       	std	Y+33, r24	; 0x21
     d60:	89 a1       	ldd	r24, Y+33	; 0x21
     d62:	9a a1       	ldd	r25, Y+34	; 0x22
     d64:	9e 8f       	std	Y+30, r25	; 0x1e
     d66:	8d 8f       	std	Y+29, r24	; 0x1d
     d68:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d6a:	9e 8d       	ldd	r25, Y+30	; 0x1e
     d6c:	01 97       	sbiw	r24, 0x01	; 1
     d6e:	f1 f7       	brne	.-4      	; 0xd6c <send_command+0x1ea>
     d70:	9e 8f       	std	Y+30, r25	; 0x1e
     d72:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

#if(DATA_BITS_MODE == 8)
	GPIO_writePort(DATA_PORT_ID ,command);
     d74:	82 e0       	ldi	r24, 0x02	; 2
     d76:	69 ad       	ldd	r22, Y+57	; 0x39
     d78:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <GPIO_writePort>
     d7c:	80 e0       	ldi	r24, 0x00	; 0
     d7e:	90 e0       	ldi	r25, 0x00	; 0
     d80:	a0 e8       	ldi	r26, 0x80	; 128
     d82:	bf e3       	ldi	r27, 0x3F	; 63
     d84:	89 8f       	std	Y+25, r24	; 0x19
     d86:	9a 8f       	std	Y+26, r25	; 0x1a
     d88:	ab 8f       	std	Y+27, r26	; 0x1b
     d8a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d8c:	69 8d       	ldd	r22, Y+25	; 0x19
     d8e:	7a 8d       	ldd	r23, Y+26	; 0x1a
     d90:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d92:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d94:	20 e0       	ldi	r18, 0x00	; 0
     d96:	30 e0       	ldi	r19, 0x00	; 0
     d98:	4a ef       	ldi	r20, 0xFA	; 250
     d9a:	54 e4       	ldi	r21, 0x44	; 68
     d9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     da0:	dc 01       	movw	r26, r24
     da2:	cb 01       	movw	r24, r22
     da4:	8d 8b       	std	Y+21, r24	; 0x15
     da6:	9e 8b       	std	Y+22, r25	; 0x16
     da8:	af 8b       	std	Y+23, r26	; 0x17
     daa:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     dac:	6d 89       	ldd	r22, Y+21	; 0x15
     dae:	7e 89       	ldd	r23, Y+22	; 0x16
     db0:	8f 89       	ldd	r24, Y+23	; 0x17
     db2:	98 8d       	ldd	r25, Y+24	; 0x18
     db4:	20 e0       	ldi	r18, 0x00	; 0
     db6:	30 e0       	ldi	r19, 0x00	; 0
     db8:	40 e8       	ldi	r20, 0x80	; 128
     dba:	5f e3       	ldi	r21, 0x3F	; 63
     dbc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     dc0:	88 23       	and	r24, r24
     dc2:	2c f4       	brge	.+10     	; 0xdce <send_command+0x24c>
		__ticks = 1;
     dc4:	81 e0       	ldi	r24, 0x01	; 1
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	9c 8b       	std	Y+20, r25	; 0x14
     dca:	8b 8b       	std	Y+19, r24	; 0x13
     dcc:	3f c0       	rjmp	.+126    	; 0xe4c <send_command+0x2ca>
	else if (__tmp > 65535)
     dce:	6d 89       	ldd	r22, Y+21	; 0x15
     dd0:	7e 89       	ldd	r23, Y+22	; 0x16
     dd2:	8f 89       	ldd	r24, Y+23	; 0x17
     dd4:	98 8d       	ldd	r25, Y+24	; 0x18
     dd6:	20 e0       	ldi	r18, 0x00	; 0
     dd8:	3f ef       	ldi	r19, 0xFF	; 255
     dda:	4f e7       	ldi	r20, 0x7F	; 127
     ddc:	57 e4       	ldi	r21, 0x47	; 71
     dde:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     de2:	18 16       	cp	r1, r24
     de4:	4c f5       	brge	.+82     	; 0xe38 <send_command+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     de6:	69 8d       	ldd	r22, Y+25	; 0x19
     de8:	7a 8d       	ldd	r23, Y+26	; 0x1a
     dea:	8b 8d       	ldd	r24, Y+27	; 0x1b
     dec:	9c 8d       	ldd	r25, Y+28	; 0x1c
     dee:	20 e0       	ldi	r18, 0x00	; 0
     df0:	30 e0       	ldi	r19, 0x00	; 0
     df2:	40 e2       	ldi	r20, 0x20	; 32
     df4:	51 e4       	ldi	r21, 0x41	; 65
     df6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dfa:	dc 01       	movw	r26, r24
     dfc:	cb 01       	movw	r24, r22
     dfe:	bc 01       	movw	r22, r24
     e00:	cd 01       	movw	r24, r26
     e02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e06:	dc 01       	movw	r26, r24
     e08:	cb 01       	movw	r24, r22
     e0a:	9c 8b       	std	Y+20, r25	; 0x14
     e0c:	8b 8b       	std	Y+19, r24	; 0x13
     e0e:	0f c0       	rjmp	.+30     	; 0xe2e <send_command+0x2ac>
     e10:	88 ec       	ldi	r24, 0xC8	; 200
     e12:	90 e0       	ldi	r25, 0x00	; 0
     e14:	9a 8b       	std	Y+18, r25	; 0x12
     e16:	89 8b       	std	Y+17, r24	; 0x11
     e18:	89 89       	ldd	r24, Y+17	; 0x11
     e1a:	9a 89       	ldd	r25, Y+18	; 0x12
     e1c:	01 97       	sbiw	r24, 0x01	; 1
     e1e:	f1 f7       	brne	.-4      	; 0xe1c <send_command+0x29a>
     e20:	9a 8b       	std	Y+18, r25	; 0x12
     e22:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e24:	8b 89       	ldd	r24, Y+19	; 0x13
     e26:	9c 89       	ldd	r25, Y+20	; 0x14
     e28:	01 97       	sbiw	r24, 0x01	; 1
     e2a:	9c 8b       	std	Y+20, r25	; 0x14
     e2c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e2e:	8b 89       	ldd	r24, Y+19	; 0x13
     e30:	9c 89       	ldd	r25, Y+20	; 0x14
     e32:	00 97       	sbiw	r24, 0x00	; 0
     e34:	69 f7       	brne	.-38     	; 0xe10 <send_command+0x28e>
     e36:	14 c0       	rjmp	.+40     	; 0xe60 <send_command+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e38:	6d 89       	ldd	r22, Y+21	; 0x15
     e3a:	7e 89       	ldd	r23, Y+22	; 0x16
     e3c:	8f 89       	ldd	r24, Y+23	; 0x17
     e3e:	98 8d       	ldd	r25, Y+24	; 0x18
     e40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e44:	dc 01       	movw	r26, r24
     e46:	cb 01       	movw	r24, r22
     e48:	9c 8b       	std	Y+20, r25	; 0x14
     e4a:	8b 8b       	std	Y+19, r24	; 0x13
     e4c:	8b 89       	ldd	r24, Y+19	; 0x13
     e4e:	9c 89       	ldd	r25, Y+20	; 0x14
     e50:	98 8b       	std	Y+16, r25	; 0x10
     e52:	8f 87       	std	Y+15, r24	; 0x0f
     e54:	8f 85       	ldd	r24, Y+15	; 0x0f
     e56:	98 89       	ldd	r25, Y+16	; 0x10
     e58:	01 97       	sbiw	r24, 0x01	; 1
     e5a:	f1 f7       	brne	.-4      	; 0xe58 <send_command+0x2d6>
     e5c:	98 8b       	std	Y+16, r25	; 0x10
     e5e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	GPIO_writePin(E_PORT_ID,E_PIN_ID,LOGIC_LOW);
     e60:	80 e0       	ldi	r24, 0x00	; 0
     e62:	62 e0       	ldi	r22, 0x02	; 2
     e64:	40 e0       	ldi	r20, 0x00	; 0
     e66:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <GPIO_writePin>
     e6a:	80 e0       	ldi	r24, 0x00	; 0
     e6c:	90 e0       	ldi	r25, 0x00	; 0
     e6e:	a0 e8       	ldi	r26, 0x80	; 128
     e70:	bf e3       	ldi	r27, 0x3F	; 63
     e72:	8b 87       	std	Y+11, r24	; 0x0b
     e74:	9c 87       	std	Y+12, r25	; 0x0c
     e76:	ad 87       	std	Y+13, r26	; 0x0d
     e78:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e7a:	6b 85       	ldd	r22, Y+11	; 0x0b
     e7c:	7c 85       	ldd	r23, Y+12	; 0x0c
     e7e:	8d 85       	ldd	r24, Y+13	; 0x0d
     e80:	9e 85       	ldd	r25, Y+14	; 0x0e
     e82:	20 e0       	ldi	r18, 0x00	; 0
     e84:	30 e0       	ldi	r19, 0x00	; 0
     e86:	4a ef       	ldi	r20, 0xFA	; 250
     e88:	54 e4       	ldi	r21, 0x44	; 68
     e8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e8e:	dc 01       	movw	r26, r24
     e90:	cb 01       	movw	r24, r22
     e92:	8f 83       	std	Y+7, r24	; 0x07
     e94:	98 87       	std	Y+8, r25	; 0x08
     e96:	a9 87       	std	Y+9, r26	; 0x09
     e98:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e9a:	6f 81       	ldd	r22, Y+7	; 0x07
     e9c:	78 85       	ldd	r23, Y+8	; 0x08
     e9e:	89 85       	ldd	r24, Y+9	; 0x09
     ea0:	9a 85       	ldd	r25, Y+10	; 0x0a
     ea2:	20 e0       	ldi	r18, 0x00	; 0
     ea4:	30 e0       	ldi	r19, 0x00	; 0
     ea6:	40 e8       	ldi	r20, 0x80	; 128
     ea8:	5f e3       	ldi	r21, 0x3F	; 63
     eaa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     eae:	88 23       	and	r24, r24
     eb0:	2c f4       	brge	.+10     	; 0xebc <send_command+0x33a>
		__ticks = 1;
     eb2:	81 e0       	ldi	r24, 0x01	; 1
     eb4:	90 e0       	ldi	r25, 0x00	; 0
     eb6:	9e 83       	std	Y+6, r25	; 0x06
     eb8:	8d 83       	std	Y+5, r24	; 0x05
     eba:	3f c0       	rjmp	.+126    	; 0xf3a <send_command+0x3b8>
	else if (__tmp > 65535)
     ebc:	6f 81       	ldd	r22, Y+7	; 0x07
     ebe:	78 85       	ldd	r23, Y+8	; 0x08
     ec0:	89 85       	ldd	r24, Y+9	; 0x09
     ec2:	9a 85       	ldd	r25, Y+10	; 0x0a
     ec4:	20 e0       	ldi	r18, 0x00	; 0
     ec6:	3f ef       	ldi	r19, 0xFF	; 255
     ec8:	4f e7       	ldi	r20, 0x7F	; 127
     eca:	57 e4       	ldi	r21, 0x47	; 71
     ecc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     ed0:	18 16       	cp	r1, r24
     ed2:	4c f5       	brge	.+82     	; 0xf26 <send_command+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ed4:	6b 85       	ldd	r22, Y+11	; 0x0b
     ed6:	7c 85       	ldd	r23, Y+12	; 0x0c
     ed8:	8d 85       	ldd	r24, Y+13	; 0x0d
     eda:	9e 85       	ldd	r25, Y+14	; 0x0e
     edc:	20 e0       	ldi	r18, 0x00	; 0
     ede:	30 e0       	ldi	r19, 0x00	; 0
     ee0:	40 e2       	ldi	r20, 0x20	; 32
     ee2:	51 e4       	ldi	r21, 0x41	; 65
     ee4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ee8:	dc 01       	movw	r26, r24
     eea:	cb 01       	movw	r24, r22
     eec:	bc 01       	movw	r22, r24
     eee:	cd 01       	movw	r24, r26
     ef0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ef4:	dc 01       	movw	r26, r24
     ef6:	cb 01       	movw	r24, r22
     ef8:	9e 83       	std	Y+6, r25	; 0x06
     efa:	8d 83       	std	Y+5, r24	; 0x05
     efc:	0f c0       	rjmp	.+30     	; 0xf1c <send_command+0x39a>
     efe:	88 ec       	ldi	r24, 0xC8	; 200
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	9c 83       	std	Y+4, r25	; 0x04
     f04:	8b 83       	std	Y+3, r24	; 0x03
     f06:	8b 81       	ldd	r24, Y+3	; 0x03
     f08:	9c 81       	ldd	r25, Y+4	; 0x04
     f0a:	01 97       	sbiw	r24, 0x01	; 1
     f0c:	f1 f7       	brne	.-4      	; 0xf0a <send_command+0x388>
     f0e:	9c 83       	std	Y+4, r25	; 0x04
     f10:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f12:	8d 81       	ldd	r24, Y+5	; 0x05
     f14:	9e 81       	ldd	r25, Y+6	; 0x06
     f16:	01 97       	sbiw	r24, 0x01	; 1
     f18:	9e 83       	std	Y+6, r25	; 0x06
     f1a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f1c:	8d 81       	ldd	r24, Y+5	; 0x05
     f1e:	9e 81       	ldd	r25, Y+6	; 0x06
     f20:	00 97       	sbiw	r24, 0x00	; 0
     f22:	69 f7       	brne	.-38     	; 0xefe <send_command+0x37c>
     f24:	14 c0       	rjmp	.+40     	; 0xf4e <send_command+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f26:	6f 81       	ldd	r22, Y+7	; 0x07
     f28:	78 85       	ldd	r23, Y+8	; 0x08
     f2a:	89 85       	ldd	r24, Y+9	; 0x09
     f2c:	9a 85       	ldd	r25, Y+10	; 0x0a
     f2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f32:	dc 01       	movw	r26, r24
     f34:	cb 01       	movw	r24, r22
     f36:	9e 83       	std	Y+6, r25	; 0x06
     f38:	8d 83       	std	Y+5, r24	; 0x05
     f3a:	8d 81       	ldd	r24, Y+5	; 0x05
     f3c:	9e 81       	ldd	r25, Y+6	; 0x06
     f3e:	9a 83       	std	Y+2, r25	; 0x02
     f40:	89 83       	std	Y+1, r24	; 0x01
     f42:	89 81       	ldd	r24, Y+1	; 0x01
     f44:	9a 81       	ldd	r25, Y+2	; 0x02
     f46:	01 97       	sbiw	r24, 0x01	; 1
     f48:	f1 f7       	brne	.-4      	; 0xf46 <send_command+0x3c4>
     f4a:	9a 83       	std	Y+2, r25	; 0x02
     f4c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	GPIO_writePin(E_PORT_ID,E_PIN_ID,LOGIC_LOW);
	_delay_ms(1);

#endif
}
     f4e:	e9 96       	adiw	r28, 0x39	; 57
     f50:	0f b6       	in	r0, 0x3f	; 63
     f52:	f8 94       	cli
     f54:	de bf       	out	0x3e, r29	; 62
     f56:	0f be       	out	0x3f, r0	; 63
     f58:	cd bf       	out	0x3d, r28	; 61
     f5a:	cf 91       	pop	r28
     f5c:	df 91       	pop	r29
     f5e:	08 95       	ret

00000f60 <display_character>:

void display_character(uint8 data)
{
     f60:	df 93       	push	r29
     f62:	cf 93       	push	r28
     f64:	cd b7       	in	r28, 0x3d	; 61
     f66:	de b7       	in	r29, 0x3e	; 62
     f68:	e9 97       	sbiw	r28, 0x39	; 57
     f6a:	0f b6       	in	r0, 0x3f	; 63
     f6c:	f8 94       	cli
     f6e:	de bf       	out	0x3e, r29	; 62
     f70:	0f be       	out	0x3f, r0	; 63
     f72:	cd bf       	out	0x3d, r28	; 61
     f74:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(RS_PORT_ID,RS_PIN_ID,LOGIC_HIGH);
     f76:	80 e0       	ldi	r24, 0x00	; 0
     f78:	61 e0       	ldi	r22, 0x01	; 1
     f7a:	41 e0       	ldi	r20, 0x01	; 1
     f7c:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <GPIO_writePin>
     f80:	80 e0       	ldi	r24, 0x00	; 0
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	a0 e8       	ldi	r26, 0x80	; 128
     f86:	bf e3       	ldi	r27, 0x3F	; 63
     f88:	8d ab       	std	Y+53, r24	; 0x35
     f8a:	9e ab       	std	Y+54, r25	; 0x36
     f8c:	af ab       	std	Y+55, r26	; 0x37
     f8e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f90:	6d a9       	ldd	r22, Y+53	; 0x35
     f92:	7e a9       	ldd	r23, Y+54	; 0x36
     f94:	8f a9       	ldd	r24, Y+55	; 0x37
     f96:	98 ad       	ldd	r25, Y+56	; 0x38
     f98:	20 e0       	ldi	r18, 0x00	; 0
     f9a:	30 e0       	ldi	r19, 0x00	; 0
     f9c:	4a ef       	ldi	r20, 0xFA	; 250
     f9e:	54 e4       	ldi	r21, 0x44	; 68
     fa0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fa4:	dc 01       	movw	r26, r24
     fa6:	cb 01       	movw	r24, r22
     fa8:	89 ab       	std	Y+49, r24	; 0x31
     faa:	9a ab       	std	Y+50, r25	; 0x32
     fac:	ab ab       	std	Y+51, r26	; 0x33
     fae:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     fb0:	69 a9       	ldd	r22, Y+49	; 0x31
     fb2:	7a a9       	ldd	r23, Y+50	; 0x32
     fb4:	8b a9       	ldd	r24, Y+51	; 0x33
     fb6:	9c a9       	ldd	r25, Y+52	; 0x34
     fb8:	20 e0       	ldi	r18, 0x00	; 0
     fba:	30 e0       	ldi	r19, 0x00	; 0
     fbc:	40 e8       	ldi	r20, 0x80	; 128
     fbe:	5f e3       	ldi	r21, 0x3F	; 63
     fc0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     fc4:	88 23       	and	r24, r24
     fc6:	2c f4       	brge	.+10     	; 0xfd2 <display_character+0x72>
		__ticks = 1;
     fc8:	81 e0       	ldi	r24, 0x01	; 1
     fca:	90 e0       	ldi	r25, 0x00	; 0
     fcc:	98 ab       	std	Y+48, r25	; 0x30
     fce:	8f a7       	std	Y+47, r24	; 0x2f
     fd0:	3f c0       	rjmp	.+126    	; 0x1050 <display_character+0xf0>
	else if (__tmp > 65535)
     fd2:	69 a9       	ldd	r22, Y+49	; 0x31
     fd4:	7a a9       	ldd	r23, Y+50	; 0x32
     fd6:	8b a9       	ldd	r24, Y+51	; 0x33
     fd8:	9c a9       	ldd	r25, Y+52	; 0x34
     fda:	20 e0       	ldi	r18, 0x00	; 0
     fdc:	3f ef       	ldi	r19, 0xFF	; 255
     fde:	4f e7       	ldi	r20, 0x7F	; 127
     fe0:	57 e4       	ldi	r21, 0x47	; 71
     fe2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     fe6:	18 16       	cp	r1, r24
     fe8:	4c f5       	brge	.+82     	; 0x103c <display_character+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fea:	6d a9       	ldd	r22, Y+53	; 0x35
     fec:	7e a9       	ldd	r23, Y+54	; 0x36
     fee:	8f a9       	ldd	r24, Y+55	; 0x37
     ff0:	98 ad       	ldd	r25, Y+56	; 0x38
     ff2:	20 e0       	ldi	r18, 0x00	; 0
     ff4:	30 e0       	ldi	r19, 0x00	; 0
     ff6:	40 e2       	ldi	r20, 0x20	; 32
     ff8:	51 e4       	ldi	r21, 0x41	; 65
     ffa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ffe:	dc 01       	movw	r26, r24
    1000:	cb 01       	movw	r24, r22
    1002:	bc 01       	movw	r22, r24
    1004:	cd 01       	movw	r24, r26
    1006:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    100a:	dc 01       	movw	r26, r24
    100c:	cb 01       	movw	r24, r22
    100e:	98 ab       	std	Y+48, r25	; 0x30
    1010:	8f a7       	std	Y+47, r24	; 0x2f
    1012:	0f c0       	rjmp	.+30     	; 0x1032 <display_character+0xd2>
    1014:	88 ec       	ldi	r24, 0xC8	; 200
    1016:	90 e0       	ldi	r25, 0x00	; 0
    1018:	9e a7       	std	Y+46, r25	; 0x2e
    101a:	8d a7       	std	Y+45, r24	; 0x2d
    101c:	8d a5       	ldd	r24, Y+45	; 0x2d
    101e:	9e a5       	ldd	r25, Y+46	; 0x2e
    1020:	01 97       	sbiw	r24, 0x01	; 1
    1022:	f1 f7       	brne	.-4      	; 0x1020 <display_character+0xc0>
    1024:	9e a7       	std	Y+46, r25	; 0x2e
    1026:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1028:	8f a5       	ldd	r24, Y+47	; 0x2f
    102a:	98 a9       	ldd	r25, Y+48	; 0x30
    102c:	01 97       	sbiw	r24, 0x01	; 1
    102e:	98 ab       	std	Y+48, r25	; 0x30
    1030:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1032:	8f a5       	ldd	r24, Y+47	; 0x2f
    1034:	98 a9       	ldd	r25, Y+48	; 0x30
    1036:	00 97       	sbiw	r24, 0x00	; 0
    1038:	69 f7       	brne	.-38     	; 0x1014 <display_character+0xb4>
    103a:	14 c0       	rjmp	.+40     	; 0x1064 <display_character+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    103c:	69 a9       	ldd	r22, Y+49	; 0x31
    103e:	7a a9       	ldd	r23, Y+50	; 0x32
    1040:	8b a9       	ldd	r24, Y+51	; 0x33
    1042:	9c a9       	ldd	r25, Y+52	; 0x34
    1044:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1048:	dc 01       	movw	r26, r24
    104a:	cb 01       	movw	r24, r22
    104c:	98 ab       	std	Y+48, r25	; 0x30
    104e:	8f a7       	std	Y+47, r24	; 0x2f
    1050:	8f a5       	ldd	r24, Y+47	; 0x2f
    1052:	98 a9       	ldd	r25, Y+48	; 0x30
    1054:	9c a7       	std	Y+44, r25	; 0x2c
    1056:	8b a7       	std	Y+43, r24	; 0x2b
    1058:	8b a5       	ldd	r24, Y+43	; 0x2b
    105a:	9c a5       	ldd	r25, Y+44	; 0x2c
    105c:	01 97       	sbiw	r24, 0x01	; 1
    105e:	f1 f7       	brne	.-4      	; 0x105c <display_character+0xfc>
    1060:	9c a7       	std	Y+44, r25	; 0x2c
    1062:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	GPIO_writePin(E_PORT_ID,E_PIN_ID,LOGIC_HIGH);
    1064:	80 e0       	ldi	r24, 0x00	; 0
    1066:	62 e0       	ldi	r22, 0x02	; 2
    1068:	41 e0       	ldi	r20, 0x01	; 1
    106a:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <GPIO_writePin>
    106e:	80 e0       	ldi	r24, 0x00	; 0
    1070:	90 e0       	ldi	r25, 0x00	; 0
    1072:	a0 e8       	ldi	r26, 0x80	; 128
    1074:	bf e3       	ldi	r27, 0x3F	; 63
    1076:	8f a3       	std	Y+39, r24	; 0x27
    1078:	98 a7       	std	Y+40, r25	; 0x28
    107a:	a9 a7       	std	Y+41, r26	; 0x29
    107c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    107e:	6f a1       	ldd	r22, Y+39	; 0x27
    1080:	78 a5       	ldd	r23, Y+40	; 0x28
    1082:	89 a5       	ldd	r24, Y+41	; 0x29
    1084:	9a a5       	ldd	r25, Y+42	; 0x2a
    1086:	20 e0       	ldi	r18, 0x00	; 0
    1088:	30 e0       	ldi	r19, 0x00	; 0
    108a:	4a ef       	ldi	r20, 0xFA	; 250
    108c:	54 e4       	ldi	r21, 0x44	; 68
    108e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1092:	dc 01       	movw	r26, r24
    1094:	cb 01       	movw	r24, r22
    1096:	8b a3       	std	Y+35, r24	; 0x23
    1098:	9c a3       	std	Y+36, r25	; 0x24
    109a:	ad a3       	std	Y+37, r26	; 0x25
    109c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    109e:	6b a1       	ldd	r22, Y+35	; 0x23
    10a0:	7c a1       	ldd	r23, Y+36	; 0x24
    10a2:	8d a1       	ldd	r24, Y+37	; 0x25
    10a4:	9e a1       	ldd	r25, Y+38	; 0x26
    10a6:	20 e0       	ldi	r18, 0x00	; 0
    10a8:	30 e0       	ldi	r19, 0x00	; 0
    10aa:	40 e8       	ldi	r20, 0x80	; 128
    10ac:	5f e3       	ldi	r21, 0x3F	; 63
    10ae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    10b2:	88 23       	and	r24, r24
    10b4:	2c f4       	brge	.+10     	; 0x10c0 <display_character+0x160>
		__ticks = 1;
    10b6:	81 e0       	ldi	r24, 0x01	; 1
    10b8:	90 e0       	ldi	r25, 0x00	; 0
    10ba:	9a a3       	std	Y+34, r25	; 0x22
    10bc:	89 a3       	std	Y+33, r24	; 0x21
    10be:	3f c0       	rjmp	.+126    	; 0x113e <display_character+0x1de>
	else if (__tmp > 65535)
    10c0:	6b a1       	ldd	r22, Y+35	; 0x23
    10c2:	7c a1       	ldd	r23, Y+36	; 0x24
    10c4:	8d a1       	ldd	r24, Y+37	; 0x25
    10c6:	9e a1       	ldd	r25, Y+38	; 0x26
    10c8:	20 e0       	ldi	r18, 0x00	; 0
    10ca:	3f ef       	ldi	r19, 0xFF	; 255
    10cc:	4f e7       	ldi	r20, 0x7F	; 127
    10ce:	57 e4       	ldi	r21, 0x47	; 71
    10d0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    10d4:	18 16       	cp	r1, r24
    10d6:	4c f5       	brge	.+82     	; 0x112a <display_character+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10d8:	6f a1       	ldd	r22, Y+39	; 0x27
    10da:	78 a5       	ldd	r23, Y+40	; 0x28
    10dc:	89 a5       	ldd	r24, Y+41	; 0x29
    10de:	9a a5       	ldd	r25, Y+42	; 0x2a
    10e0:	20 e0       	ldi	r18, 0x00	; 0
    10e2:	30 e0       	ldi	r19, 0x00	; 0
    10e4:	40 e2       	ldi	r20, 0x20	; 32
    10e6:	51 e4       	ldi	r21, 0x41	; 65
    10e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10ec:	dc 01       	movw	r26, r24
    10ee:	cb 01       	movw	r24, r22
    10f0:	bc 01       	movw	r22, r24
    10f2:	cd 01       	movw	r24, r26
    10f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10f8:	dc 01       	movw	r26, r24
    10fa:	cb 01       	movw	r24, r22
    10fc:	9a a3       	std	Y+34, r25	; 0x22
    10fe:	89 a3       	std	Y+33, r24	; 0x21
    1100:	0f c0       	rjmp	.+30     	; 0x1120 <display_character+0x1c0>
    1102:	88 ec       	ldi	r24, 0xC8	; 200
    1104:	90 e0       	ldi	r25, 0x00	; 0
    1106:	98 a3       	std	Y+32, r25	; 0x20
    1108:	8f 8f       	std	Y+31, r24	; 0x1f
    110a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    110c:	98 a1       	ldd	r25, Y+32	; 0x20
    110e:	01 97       	sbiw	r24, 0x01	; 1
    1110:	f1 f7       	brne	.-4      	; 0x110e <display_character+0x1ae>
    1112:	98 a3       	std	Y+32, r25	; 0x20
    1114:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1116:	89 a1       	ldd	r24, Y+33	; 0x21
    1118:	9a a1       	ldd	r25, Y+34	; 0x22
    111a:	01 97       	sbiw	r24, 0x01	; 1
    111c:	9a a3       	std	Y+34, r25	; 0x22
    111e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1120:	89 a1       	ldd	r24, Y+33	; 0x21
    1122:	9a a1       	ldd	r25, Y+34	; 0x22
    1124:	00 97       	sbiw	r24, 0x00	; 0
    1126:	69 f7       	brne	.-38     	; 0x1102 <display_character+0x1a2>
    1128:	14 c0       	rjmp	.+40     	; 0x1152 <display_character+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    112a:	6b a1       	ldd	r22, Y+35	; 0x23
    112c:	7c a1       	ldd	r23, Y+36	; 0x24
    112e:	8d a1       	ldd	r24, Y+37	; 0x25
    1130:	9e a1       	ldd	r25, Y+38	; 0x26
    1132:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1136:	dc 01       	movw	r26, r24
    1138:	cb 01       	movw	r24, r22
    113a:	9a a3       	std	Y+34, r25	; 0x22
    113c:	89 a3       	std	Y+33, r24	; 0x21
    113e:	89 a1       	ldd	r24, Y+33	; 0x21
    1140:	9a a1       	ldd	r25, Y+34	; 0x22
    1142:	9e 8f       	std	Y+30, r25	; 0x1e
    1144:	8d 8f       	std	Y+29, r24	; 0x1d
    1146:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1148:	9e 8d       	ldd	r25, Y+30	; 0x1e
    114a:	01 97       	sbiw	r24, 0x01	; 1
    114c:	f1 f7       	brne	.-4      	; 0x114a <display_character+0x1ea>
    114e:	9e 8f       	std	Y+30, r25	; 0x1e
    1150:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

#if(DATA_BITS_MODE == 8)
	GPIO_writePort(DATA_PORT_ID ,data);
    1152:	82 e0       	ldi	r24, 0x02	; 2
    1154:	69 ad       	ldd	r22, Y+57	; 0x39
    1156:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <GPIO_writePort>
    115a:	80 e0       	ldi	r24, 0x00	; 0
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	a0 e8       	ldi	r26, 0x80	; 128
    1160:	bf e3       	ldi	r27, 0x3F	; 63
    1162:	89 8f       	std	Y+25, r24	; 0x19
    1164:	9a 8f       	std	Y+26, r25	; 0x1a
    1166:	ab 8f       	std	Y+27, r26	; 0x1b
    1168:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    116a:	69 8d       	ldd	r22, Y+25	; 0x19
    116c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    116e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1170:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1172:	20 e0       	ldi	r18, 0x00	; 0
    1174:	30 e0       	ldi	r19, 0x00	; 0
    1176:	4a ef       	ldi	r20, 0xFA	; 250
    1178:	54 e4       	ldi	r21, 0x44	; 68
    117a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    117e:	dc 01       	movw	r26, r24
    1180:	cb 01       	movw	r24, r22
    1182:	8d 8b       	std	Y+21, r24	; 0x15
    1184:	9e 8b       	std	Y+22, r25	; 0x16
    1186:	af 8b       	std	Y+23, r26	; 0x17
    1188:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    118a:	6d 89       	ldd	r22, Y+21	; 0x15
    118c:	7e 89       	ldd	r23, Y+22	; 0x16
    118e:	8f 89       	ldd	r24, Y+23	; 0x17
    1190:	98 8d       	ldd	r25, Y+24	; 0x18
    1192:	20 e0       	ldi	r18, 0x00	; 0
    1194:	30 e0       	ldi	r19, 0x00	; 0
    1196:	40 e8       	ldi	r20, 0x80	; 128
    1198:	5f e3       	ldi	r21, 0x3F	; 63
    119a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    119e:	88 23       	and	r24, r24
    11a0:	2c f4       	brge	.+10     	; 0x11ac <display_character+0x24c>
		__ticks = 1;
    11a2:	81 e0       	ldi	r24, 0x01	; 1
    11a4:	90 e0       	ldi	r25, 0x00	; 0
    11a6:	9c 8b       	std	Y+20, r25	; 0x14
    11a8:	8b 8b       	std	Y+19, r24	; 0x13
    11aa:	3f c0       	rjmp	.+126    	; 0x122a <display_character+0x2ca>
	else if (__tmp > 65535)
    11ac:	6d 89       	ldd	r22, Y+21	; 0x15
    11ae:	7e 89       	ldd	r23, Y+22	; 0x16
    11b0:	8f 89       	ldd	r24, Y+23	; 0x17
    11b2:	98 8d       	ldd	r25, Y+24	; 0x18
    11b4:	20 e0       	ldi	r18, 0x00	; 0
    11b6:	3f ef       	ldi	r19, 0xFF	; 255
    11b8:	4f e7       	ldi	r20, 0x7F	; 127
    11ba:	57 e4       	ldi	r21, 0x47	; 71
    11bc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    11c0:	18 16       	cp	r1, r24
    11c2:	4c f5       	brge	.+82     	; 0x1216 <display_character+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11c4:	69 8d       	ldd	r22, Y+25	; 0x19
    11c6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    11c8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    11ca:	9c 8d       	ldd	r25, Y+28	; 0x1c
    11cc:	20 e0       	ldi	r18, 0x00	; 0
    11ce:	30 e0       	ldi	r19, 0x00	; 0
    11d0:	40 e2       	ldi	r20, 0x20	; 32
    11d2:	51 e4       	ldi	r21, 0x41	; 65
    11d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11d8:	dc 01       	movw	r26, r24
    11da:	cb 01       	movw	r24, r22
    11dc:	bc 01       	movw	r22, r24
    11de:	cd 01       	movw	r24, r26
    11e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11e4:	dc 01       	movw	r26, r24
    11e6:	cb 01       	movw	r24, r22
    11e8:	9c 8b       	std	Y+20, r25	; 0x14
    11ea:	8b 8b       	std	Y+19, r24	; 0x13
    11ec:	0f c0       	rjmp	.+30     	; 0x120c <display_character+0x2ac>
    11ee:	88 ec       	ldi	r24, 0xC8	; 200
    11f0:	90 e0       	ldi	r25, 0x00	; 0
    11f2:	9a 8b       	std	Y+18, r25	; 0x12
    11f4:	89 8b       	std	Y+17, r24	; 0x11
    11f6:	89 89       	ldd	r24, Y+17	; 0x11
    11f8:	9a 89       	ldd	r25, Y+18	; 0x12
    11fa:	01 97       	sbiw	r24, 0x01	; 1
    11fc:	f1 f7       	brne	.-4      	; 0x11fa <display_character+0x29a>
    11fe:	9a 8b       	std	Y+18, r25	; 0x12
    1200:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1202:	8b 89       	ldd	r24, Y+19	; 0x13
    1204:	9c 89       	ldd	r25, Y+20	; 0x14
    1206:	01 97       	sbiw	r24, 0x01	; 1
    1208:	9c 8b       	std	Y+20, r25	; 0x14
    120a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    120c:	8b 89       	ldd	r24, Y+19	; 0x13
    120e:	9c 89       	ldd	r25, Y+20	; 0x14
    1210:	00 97       	sbiw	r24, 0x00	; 0
    1212:	69 f7       	brne	.-38     	; 0x11ee <display_character+0x28e>
    1214:	14 c0       	rjmp	.+40     	; 0x123e <display_character+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1216:	6d 89       	ldd	r22, Y+21	; 0x15
    1218:	7e 89       	ldd	r23, Y+22	; 0x16
    121a:	8f 89       	ldd	r24, Y+23	; 0x17
    121c:	98 8d       	ldd	r25, Y+24	; 0x18
    121e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1222:	dc 01       	movw	r26, r24
    1224:	cb 01       	movw	r24, r22
    1226:	9c 8b       	std	Y+20, r25	; 0x14
    1228:	8b 8b       	std	Y+19, r24	; 0x13
    122a:	8b 89       	ldd	r24, Y+19	; 0x13
    122c:	9c 89       	ldd	r25, Y+20	; 0x14
    122e:	98 8b       	std	Y+16, r25	; 0x10
    1230:	8f 87       	std	Y+15, r24	; 0x0f
    1232:	8f 85       	ldd	r24, Y+15	; 0x0f
    1234:	98 89       	ldd	r25, Y+16	; 0x10
    1236:	01 97       	sbiw	r24, 0x01	; 1
    1238:	f1 f7       	brne	.-4      	; 0x1236 <display_character+0x2d6>
    123a:	98 8b       	std	Y+16, r25	; 0x10
    123c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	GPIO_writePin(E_PORT_ID,E_PIN_ID,LOGIC_LOW);
    123e:	80 e0       	ldi	r24, 0x00	; 0
    1240:	62 e0       	ldi	r22, 0x02	; 2
    1242:	40 e0       	ldi	r20, 0x00	; 0
    1244:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <GPIO_writePin>
    1248:	80 e0       	ldi	r24, 0x00	; 0
    124a:	90 e0       	ldi	r25, 0x00	; 0
    124c:	a0 e8       	ldi	r26, 0x80	; 128
    124e:	bf e3       	ldi	r27, 0x3F	; 63
    1250:	8b 87       	std	Y+11, r24	; 0x0b
    1252:	9c 87       	std	Y+12, r25	; 0x0c
    1254:	ad 87       	std	Y+13, r26	; 0x0d
    1256:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1258:	6b 85       	ldd	r22, Y+11	; 0x0b
    125a:	7c 85       	ldd	r23, Y+12	; 0x0c
    125c:	8d 85       	ldd	r24, Y+13	; 0x0d
    125e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1260:	20 e0       	ldi	r18, 0x00	; 0
    1262:	30 e0       	ldi	r19, 0x00	; 0
    1264:	4a ef       	ldi	r20, 0xFA	; 250
    1266:	54 e4       	ldi	r21, 0x44	; 68
    1268:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    126c:	dc 01       	movw	r26, r24
    126e:	cb 01       	movw	r24, r22
    1270:	8f 83       	std	Y+7, r24	; 0x07
    1272:	98 87       	std	Y+8, r25	; 0x08
    1274:	a9 87       	std	Y+9, r26	; 0x09
    1276:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1278:	6f 81       	ldd	r22, Y+7	; 0x07
    127a:	78 85       	ldd	r23, Y+8	; 0x08
    127c:	89 85       	ldd	r24, Y+9	; 0x09
    127e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1280:	20 e0       	ldi	r18, 0x00	; 0
    1282:	30 e0       	ldi	r19, 0x00	; 0
    1284:	40 e8       	ldi	r20, 0x80	; 128
    1286:	5f e3       	ldi	r21, 0x3F	; 63
    1288:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    128c:	88 23       	and	r24, r24
    128e:	2c f4       	brge	.+10     	; 0x129a <display_character+0x33a>
		__ticks = 1;
    1290:	81 e0       	ldi	r24, 0x01	; 1
    1292:	90 e0       	ldi	r25, 0x00	; 0
    1294:	9e 83       	std	Y+6, r25	; 0x06
    1296:	8d 83       	std	Y+5, r24	; 0x05
    1298:	3f c0       	rjmp	.+126    	; 0x1318 <display_character+0x3b8>
	else if (__tmp > 65535)
    129a:	6f 81       	ldd	r22, Y+7	; 0x07
    129c:	78 85       	ldd	r23, Y+8	; 0x08
    129e:	89 85       	ldd	r24, Y+9	; 0x09
    12a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    12a2:	20 e0       	ldi	r18, 0x00	; 0
    12a4:	3f ef       	ldi	r19, 0xFF	; 255
    12a6:	4f e7       	ldi	r20, 0x7F	; 127
    12a8:	57 e4       	ldi	r21, 0x47	; 71
    12aa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    12ae:	18 16       	cp	r1, r24
    12b0:	4c f5       	brge	.+82     	; 0x1304 <display_character+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12b2:	6b 85       	ldd	r22, Y+11	; 0x0b
    12b4:	7c 85       	ldd	r23, Y+12	; 0x0c
    12b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    12b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    12ba:	20 e0       	ldi	r18, 0x00	; 0
    12bc:	30 e0       	ldi	r19, 0x00	; 0
    12be:	40 e2       	ldi	r20, 0x20	; 32
    12c0:	51 e4       	ldi	r21, 0x41	; 65
    12c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12c6:	dc 01       	movw	r26, r24
    12c8:	cb 01       	movw	r24, r22
    12ca:	bc 01       	movw	r22, r24
    12cc:	cd 01       	movw	r24, r26
    12ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12d2:	dc 01       	movw	r26, r24
    12d4:	cb 01       	movw	r24, r22
    12d6:	9e 83       	std	Y+6, r25	; 0x06
    12d8:	8d 83       	std	Y+5, r24	; 0x05
    12da:	0f c0       	rjmp	.+30     	; 0x12fa <display_character+0x39a>
    12dc:	88 ec       	ldi	r24, 0xC8	; 200
    12de:	90 e0       	ldi	r25, 0x00	; 0
    12e0:	9c 83       	std	Y+4, r25	; 0x04
    12e2:	8b 83       	std	Y+3, r24	; 0x03
    12e4:	8b 81       	ldd	r24, Y+3	; 0x03
    12e6:	9c 81       	ldd	r25, Y+4	; 0x04
    12e8:	01 97       	sbiw	r24, 0x01	; 1
    12ea:	f1 f7       	brne	.-4      	; 0x12e8 <display_character+0x388>
    12ec:	9c 83       	std	Y+4, r25	; 0x04
    12ee:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12f0:	8d 81       	ldd	r24, Y+5	; 0x05
    12f2:	9e 81       	ldd	r25, Y+6	; 0x06
    12f4:	01 97       	sbiw	r24, 0x01	; 1
    12f6:	9e 83       	std	Y+6, r25	; 0x06
    12f8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12fa:	8d 81       	ldd	r24, Y+5	; 0x05
    12fc:	9e 81       	ldd	r25, Y+6	; 0x06
    12fe:	00 97       	sbiw	r24, 0x00	; 0
    1300:	69 f7       	brne	.-38     	; 0x12dc <display_character+0x37c>
    1302:	14 c0       	rjmp	.+40     	; 0x132c <display_character+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1304:	6f 81       	ldd	r22, Y+7	; 0x07
    1306:	78 85       	ldd	r23, Y+8	; 0x08
    1308:	89 85       	ldd	r24, Y+9	; 0x09
    130a:	9a 85       	ldd	r25, Y+10	; 0x0a
    130c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1310:	dc 01       	movw	r26, r24
    1312:	cb 01       	movw	r24, r22
    1314:	9e 83       	std	Y+6, r25	; 0x06
    1316:	8d 83       	std	Y+5, r24	; 0x05
    1318:	8d 81       	ldd	r24, Y+5	; 0x05
    131a:	9e 81       	ldd	r25, Y+6	; 0x06
    131c:	9a 83       	std	Y+2, r25	; 0x02
    131e:	89 83       	std	Y+1, r24	; 0x01
    1320:	89 81       	ldd	r24, Y+1	; 0x01
    1322:	9a 81       	ldd	r25, Y+2	; 0x02
    1324:	01 97       	sbiw	r24, 0x01	; 1
    1326:	f1 f7       	brne	.-4      	; 0x1324 <display_character+0x3c4>
    1328:	9a 83       	std	Y+2, r25	; 0x02
    132a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	GPIO_writePin(E_PORT_ID,E_PIN_ID,LOGIC_LOW);
	_delay_ms(1);

#endif
}
    132c:	e9 96       	adiw	r28, 0x39	; 57
    132e:	0f b6       	in	r0, 0x3f	; 63
    1330:	f8 94       	cli
    1332:	de bf       	out	0x3e, r29	; 62
    1334:	0f be       	out	0x3f, r0	; 63
    1336:	cd bf       	out	0x3d, r28	; 61
    1338:	cf 91       	pop	r28
    133a:	df 91       	pop	r29
    133c:	08 95       	ret

0000133e <display_string>:

void display_string(const char *str)
{
    133e:	df 93       	push	r29
    1340:	cf 93       	push	r28
    1342:	00 d0       	rcall	.+0      	; 0x1344 <display_string+0x6>
    1344:	0f 92       	push	r0
    1346:	cd b7       	in	r28, 0x3d	; 61
    1348:	de b7       	in	r29, 0x3e	; 62
    134a:	9b 83       	std	Y+3, r25	; 0x03
    134c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i=0;
    134e:	19 82       	std	Y+1, r1	; 0x01
    1350:	0e c0       	rjmp	.+28     	; 0x136e <display_string+0x30>
	while(str[i]!='\0'){
		display_character(str[i]);
    1352:	89 81       	ldd	r24, Y+1	; 0x01
    1354:	28 2f       	mov	r18, r24
    1356:	30 e0       	ldi	r19, 0x00	; 0
    1358:	8a 81       	ldd	r24, Y+2	; 0x02
    135a:	9b 81       	ldd	r25, Y+3	; 0x03
    135c:	fc 01       	movw	r30, r24
    135e:	e2 0f       	add	r30, r18
    1360:	f3 1f       	adc	r31, r19
    1362:	80 81       	ld	r24, Z
    1364:	0e 94 b0 07 	call	0xf60	; 0xf60 <display_character>
		i++;
    1368:	89 81       	ldd	r24, Y+1	; 0x01
    136a:	8f 5f       	subi	r24, 0xFF	; 255
    136c:	89 83       	std	Y+1, r24	; 0x01
}

void display_string(const char *str)
{
	uint8 i=0;
	while(str[i]!='\0'){
    136e:	89 81       	ldd	r24, Y+1	; 0x01
    1370:	28 2f       	mov	r18, r24
    1372:	30 e0       	ldi	r19, 0x00	; 0
    1374:	8a 81       	ldd	r24, Y+2	; 0x02
    1376:	9b 81       	ldd	r25, Y+3	; 0x03
    1378:	fc 01       	movw	r30, r24
    137a:	e2 0f       	add	r30, r18
    137c:	f3 1f       	adc	r31, r19
    137e:	80 81       	ld	r24, Z
    1380:	88 23       	and	r24, r24
    1382:	39 f7       	brne	.-50     	; 0x1352 <display_string+0x14>
		display_character(str[i]);
		i++;
	}
}
    1384:	0f 90       	pop	r0
    1386:	0f 90       	pop	r0
    1388:	0f 90       	pop	r0
    138a:	cf 91       	pop	r28
    138c:	df 91       	pop	r29
    138e:	08 95       	ret

00001390 <move_cursor>:

void move_cursor(uint8 row,uint8 col)
{
    1390:	df 93       	push	r29
    1392:	cf 93       	push	r28
    1394:	00 d0       	rcall	.+0      	; 0x1396 <move_cursor+0x6>
    1396:	00 d0       	rcall	.+0      	; 0x1398 <move_cursor+0x8>
    1398:	0f 92       	push	r0
    139a:	cd b7       	in	r28, 0x3d	; 61
    139c:	de b7       	in	r29, 0x3e	; 62
    139e:	8a 83       	std	Y+2, r24	; 0x02
    13a0:	6b 83       	std	Y+3, r22	; 0x03
	uint8 memory_address;

	switch(row)
    13a2:	8a 81       	ldd	r24, Y+2	; 0x02
    13a4:	28 2f       	mov	r18, r24
    13a6:	30 e0       	ldi	r19, 0x00	; 0
    13a8:	3d 83       	std	Y+5, r19	; 0x05
    13aa:	2c 83       	std	Y+4, r18	; 0x04
    13ac:	8c 81       	ldd	r24, Y+4	; 0x04
    13ae:	9d 81       	ldd	r25, Y+5	; 0x05
    13b0:	81 30       	cpi	r24, 0x01	; 1
    13b2:	91 05       	cpc	r25, r1
    13b4:	c1 f0       	breq	.+48     	; 0x13e6 <move_cursor+0x56>
    13b6:	2c 81       	ldd	r18, Y+4	; 0x04
    13b8:	3d 81       	ldd	r19, Y+5	; 0x05
    13ba:	22 30       	cpi	r18, 0x02	; 2
    13bc:	31 05       	cpc	r19, r1
    13be:	2c f4       	brge	.+10     	; 0x13ca <move_cursor+0x3a>
    13c0:	8c 81       	ldd	r24, Y+4	; 0x04
    13c2:	9d 81       	ldd	r25, Y+5	; 0x05
    13c4:	00 97       	sbiw	r24, 0x00	; 0
    13c6:	61 f0       	breq	.+24     	; 0x13e0 <move_cursor+0x50>
    13c8:	19 c0       	rjmp	.+50     	; 0x13fc <move_cursor+0x6c>
    13ca:	2c 81       	ldd	r18, Y+4	; 0x04
    13cc:	3d 81       	ldd	r19, Y+5	; 0x05
    13ce:	22 30       	cpi	r18, 0x02	; 2
    13d0:	31 05       	cpc	r19, r1
    13d2:	69 f0       	breq	.+26     	; 0x13ee <move_cursor+0x5e>
    13d4:	8c 81       	ldd	r24, Y+4	; 0x04
    13d6:	9d 81       	ldd	r25, Y+5	; 0x05
    13d8:	83 30       	cpi	r24, 0x03	; 3
    13da:	91 05       	cpc	r25, r1
    13dc:	61 f0       	breq	.+24     	; 0x13f6 <move_cursor+0x66>
    13de:	0e c0       	rjmp	.+28     	; 0x13fc <move_cursor+0x6c>
	{
			case 0:
				memory_address=col;
    13e0:	8b 81       	ldd	r24, Y+3	; 0x03
    13e2:	89 83       	std	Y+1, r24	; 0x01
    13e4:	0b c0       	rjmp	.+22     	; 0x13fc <move_cursor+0x6c>
					break;
			case 1:
				memory_address=col+0x40;
    13e6:	8b 81       	ldd	r24, Y+3	; 0x03
    13e8:	80 5c       	subi	r24, 0xC0	; 192
    13ea:	89 83       	std	Y+1, r24	; 0x01
    13ec:	07 c0       	rjmp	.+14     	; 0x13fc <move_cursor+0x6c>
					break;
			case 2:
				memory_address=col+0x10;
    13ee:	8b 81       	ldd	r24, Y+3	; 0x03
    13f0:	80 5f       	subi	r24, 0xF0	; 240
    13f2:	89 83       	std	Y+1, r24	; 0x01
    13f4:	03 c0       	rjmp	.+6      	; 0x13fc <move_cursor+0x6c>
					break;
			case 3:
				memory_address=col+0x50;
    13f6:	8b 81       	ldd	r24, Y+3	; 0x03
    13f8:	80 5b       	subi	r24, 0xB0	; 176
    13fa:	89 83       	std	Y+1, r24	; 0x01
					break;
	}
	send_command(memory_address | SET_CURSOR_LOCATION);
    13fc:	89 81       	ldd	r24, Y+1	; 0x01
    13fe:	80 68       	ori	r24, 0x80	; 128
    1400:	0e 94 c1 05 	call	0xb82	; 0xb82 <send_command>
}
    1404:	0f 90       	pop	r0
    1406:	0f 90       	pop	r0
    1408:	0f 90       	pop	r0
    140a:	0f 90       	pop	r0
    140c:	0f 90       	pop	r0
    140e:	cf 91       	pop	r28
    1410:	df 91       	pop	r29
    1412:	08 95       	ret

00001414 <display_stringRowColumn>:

void display_stringRowColumn(uint8 row,uint8 col,const uint8 *Str)
{
    1414:	df 93       	push	r29
    1416:	cf 93       	push	r28
    1418:	00 d0       	rcall	.+0      	; 0x141a <display_stringRowColumn+0x6>
    141a:	00 d0       	rcall	.+0      	; 0x141c <display_stringRowColumn+0x8>
    141c:	cd b7       	in	r28, 0x3d	; 61
    141e:	de b7       	in	r29, 0x3e	; 62
    1420:	89 83       	std	Y+1, r24	; 0x01
    1422:	6a 83       	std	Y+2, r22	; 0x02
    1424:	5c 83       	std	Y+4, r21	; 0x04
    1426:	4b 83       	std	Y+3, r20	; 0x03
	move_cursor(row,col); /* go to to the required LCD position */
    1428:	89 81       	ldd	r24, Y+1	; 0x01
    142a:	6a 81       	ldd	r22, Y+2	; 0x02
    142c:	0e 94 c8 09 	call	0x1390	; 0x1390 <move_cursor>
	display_string(Str); /* display the string */
    1430:	8b 81       	ldd	r24, Y+3	; 0x03
    1432:	9c 81       	ldd	r25, Y+4	; 0x04
    1434:	0e 94 9f 09 	call	0x133e	; 0x133e <display_string>
}
    1438:	0f 90       	pop	r0
    143a:	0f 90       	pop	r0
    143c:	0f 90       	pop	r0
    143e:	0f 90       	pop	r0
    1440:	cf 91       	pop	r28
    1442:	df 91       	pop	r29
    1444:	08 95       	ret

00001446 <integer_To_String>:

void  integer_To_String(uint8 data)
{
    1446:	df 93       	push	r29
    1448:	cf 93       	push	r28
    144a:	cd b7       	in	r28, 0x3d	; 61
    144c:	de b7       	in	r29, 0x3e	; 62
    144e:	61 97       	sbiw	r28, 0x11	; 17
    1450:	0f b6       	in	r0, 0x3f	; 63
    1452:	f8 94       	cli
    1454:	de bf       	out	0x3e, r29	; 62
    1456:	0f be       	out	0x3f, r0	; 63
    1458:	cd bf       	out	0x3d, r28	; 61
    145a:	89 8b       	std	Y+17, r24	; 0x11
	char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    145c:	89 89       	ldd	r24, Y+17	; 0x11
    145e:	88 2f       	mov	r24, r24
    1460:	90 e0       	ldi	r25, 0x00	; 0
    1462:	9e 01       	movw	r18, r28
    1464:	2f 5f       	subi	r18, 0xFF	; 255
    1466:	3f 4f       	sbci	r19, 0xFF	; 255
    1468:	b9 01       	movw	r22, r18
    146a:	4a e0       	ldi	r20, 0x0A	; 10
    146c:	50 e0       	ldi	r21, 0x00	; 0
    146e:	0e 94 0f 14 	call	0x281e	; 0x281e <itoa>
   display_string(buff);	 /* Display the string */
    1472:	ce 01       	movw	r24, r28
    1474:	01 96       	adiw	r24, 0x01	; 1
    1476:	0e 94 9f 09 	call	0x133e	; 0x133e <display_string>
}
    147a:	61 96       	adiw	r28, 0x11	; 17
    147c:	0f b6       	in	r0, 0x3f	; 63
    147e:	f8 94       	cli
    1480:	de bf       	out	0x3e, r29	; 62
    1482:	0f be       	out	0x3f, r0	; 63
    1484:	cd bf       	out	0x3d, r28	; 61
    1486:	cf 91       	pop	r28
    1488:	df 91       	pop	r29
    148a:	08 95       	ret

0000148c <clear_screen>:

void clear_screen(void)
{
    148c:	df 93       	push	r29
    148e:	cf 93       	push	r28
    1490:	cd b7       	in	r28, 0x3d	; 61
    1492:	de b7       	in	r29, 0x3e	; 62
	send_command(CLEAR_COMMAND);
    1494:	81 e0       	ldi	r24, 0x01	; 1
    1496:	0e 94 c1 05 	call	0xb82	; 0xb82 <send_command>
}
    149a:	cf 91       	pop	r28
    149c:	df 91       	pop	r29
    149e:	08 95       	ret

000014a0 <__vector_9>:
#include <avr/interrupt.h>


static volatile void (*g_callBackPtr)(void) = NULL_PTR;
ISR(TIMER1_OVF_vect)
{
    14a0:	1f 92       	push	r1
    14a2:	0f 92       	push	r0
    14a4:	0f b6       	in	r0, 0x3f	; 63
    14a6:	0f 92       	push	r0
    14a8:	11 24       	eor	r1, r1
    14aa:	2f 93       	push	r18
    14ac:	3f 93       	push	r19
    14ae:	4f 93       	push	r20
    14b0:	5f 93       	push	r21
    14b2:	6f 93       	push	r22
    14b4:	7f 93       	push	r23
    14b6:	8f 93       	push	r24
    14b8:	9f 93       	push	r25
    14ba:	af 93       	push	r26
    14bc:	bf 93       	push	r27
    14be:	ef 93       	push	r30
    14c0:	ff 93       	push	r31
    14c2:	df 93       	push	r29
    14c4:	cf 93       	push	r28
    14c6:	cd b7       	in	r28, 0x3d	; 61
    14c8:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    14ca:	80 91 fe 00 	lds	r24, 0x00FE
    14ce:	90 91 ff 00 	lds	r25, 0x00FF
    14d2:	00 97       	sbiw	r24, 0x00	; 0
    14d4:	29 f0       	breq	.+10     	; 0x14e0 <__vector_9+0x40>
	{
		(*g_callBackPtr)();
    14d6:	e0 91 fe 00 	lds	r30, 0x00FE
    14da:	f0 91 ff 00 	lds	r31, 0x00FF
    14de:	09 95       	icall
	}
}
    14e0:	cf 91       	pop	r28
    14e2:	df 91       	pop	r29
    14e4:	ff 91       	pop	r31
    14e6:	ef 91       	pop	r30
    14e8:	bf 91       	pop	r27
    14ea:	af 91       	pop	r26
    14ec:	9f 91       	pop	r25
    14ee:	8f 91       	pop	r24
    14f0:	7f 91       	pop	r23
    14f2:	6f 91       	pop	r22
    14f4:	5f 91       	pop	r21
    14f6:	4f 91       	pop	r20
    14f8:	3f 91       	pop	r19
    14fa:	2f 91       	pop	r18
    14fc:	0f 90       	pop	r0
    14fe:	0f be       	out	0x3f, r0	; 63
    1500:	0f 90       	pop	r0
    1502:	1f 90       	pop	r1
    1504:	18 95       	reti

00001506 <__vector_7>:

ISR(TIMER1_COMPA_vect)
{
    1506:	1f 92       	push	r1
    1508:	0f 92       	push	r0
    150a:	0f b6       	in	r0, 0x3f	; 63
    150c:	0f 92       	push	r0
    150e:	11 24       	eor	r1, r1
    1510:	2f 93       	push	r18
    1512:	3f 93       	push	r19
    1514:	4f 93       	push	r20
    1516:	5f 93       	push	r21
    1518:	6f 93       	push	r22
    151a:	7f 93       	push	r23
    151c:	8f 93       	push	r24
    151e:	9f 93       	push	r25
    1520:	af 93       	push	r26
    1522:	bf 93       	push	r27
    1524:	ef 93       	push	r30
    1526:	ff 93       	push	r31
    1528:	df 93       	push	r29
    152a:	cf 93       	push	r28
    152c:	cd b7       	in	r28, 0x3d	; 61
    152e:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    1530:	80 91 fe 00 	lds	r24, 0x00FE
    1534:	90 91 ff 00 	lds	r25, 0x00FF
    1538:	00 97       	sbiw	r24, 0x00	; 0
    153a:	29 f0       	breq	.+10     	; 0x1546 <__vector_7+0x40>
	{
		(*g_callBackPtr)();
    153c:	e0 91 fe 00 	lds	r30, 0x00FE
    1540:	f0 91 ff 00 	lds	r31, 0x00FF
    1544:	09 95       	icall
	}
}
    1546:	cf 91       	pop	r28
    1548:	df 91       	pop	r29
    154a:	ff 91       	pop	r31
    154c:	ef 91       	pop	r30
    154e:	bf 91       	pop	r27
    1550:	af 91       	pop	r26
    1552:	9f 91       	pop	r25
    1554:	8f 91       	pop	r24
    1556:	7f 91       	pop	r23
    1558:	6f 91       	pop	r22
    155a:	5f 91       	pop	r21
    155c:	4f 91       	pop	r20
    155e:	3f 91       	pop	r19
    1560:	2f 91       	pop	r18
    1562:	0f 90       	pop	r0
    1564:	0f be       	out	0x3f, r0	; 63
    1566:	0f 90       	pop	r0
    1568:	1f 90       	pop	r1
    156a:	18 95       	reti

0000156c <Timer1_init>:

void Timer1_init(const Timer1_ConfigType * Config_Ptr)
{
    156c:	df 93       	push	r29
    156e:	cf 93       	push	r28
    1570:	00 d0       	rcall	.+0      	; 0x1572 <Timer1_init+0x6>
    1572:	00 d0       	rcall	.+0      	; 0x1574 <Timer1_init+0x8>
    1574:	cd b7       	in	r28, 0x3d	; 61
    1576:	de b7       	in	r29, 0x3e	; 62
    1578:	9a 83       	std	Y+2, r25	; 0x02
    157a:	89 83       	std	Y+1, r24	; 0x01

	// Initialize the Timer counter to zero
		TCNT1 = Config_Ptr-> initial_value;
    157c:	ac e4       	ldi	r26, 0x4C	; 76
    157e:	b0 e0       	ldi	r27, 0x00	; 0
    1580:	e9 81       	ldd	r30, Y+1	; 0x01
    1582:	fa 81       	ldd	r31, Y+2	; 0x02
    1584:	80 81       	ld	r24, Z
    1586:	91 81       	ldd	r25, Z+1	; 0x01
    1588:	11 96       	adiw	r26, 0x01	; 1
    158a:	9c 93       	st	X, r25
    158c:	8e 93       	st	-X, r24

	    // Configure Timer Control Register A (TCCR1A) to zeros (no effect on timer operation)
		TCCR1A = 0;
    158e:	ef e4       	ldi	r30, 0x4F	; 79
    1590:	f0 e0       	ldi	r31, 0x00	; 0
    1592:	10 82       	st	Z, r1

		 // Prescaler and mode
		TCCR1B = (TCCR1B & 0XE0) | ( Config_Ptr-> prescaler) | (( Config_Ptr-> mode)<<3);
    1594:	ae e4       	ldi	r26, 0x4E	; 78
    1596:	b0 e0       	ldi	r27, 0x00	; 0
    1598:	ee e4       	ldi	r30, 0x4E	; 78
    159a:	f0 e0       	ldi	r31, 0x00	; 0
    159c:	80 81       	ld	r24, Z
    159e:	98 2f       	mov	r25, r24
    15a0:	90 7e       	andi	r25, 0xE0	; 224
    15a2:	e9 81       	ldd	r30, Y+1	; 0x01
    15a4:	fa 81       	ldd	r31, Y+2	; 0x02
    15a6:	84 81       	ldd	r24, Z+4	; 0x04
    15a8:	29 2f       	mov	r18, r25
    15aa:	28 2b       	or	r18, r24
    15ac:	e9 81       	ldd	r30, Y+1	; 0x01
    15ae:	fa 81       	ldd	r31, Y+2	; 0x02
    15b0:	85 81       	ldd	r24, Z+5	; 0x05
    15b2:	88 2f       	mov	r24, r24
    15b4:	90 e0       	ldi	r25, 0x00	; 0
    15b6:	88 0f       	add	r24, r24
    15b8:	99 1f       	adc	r25, r25
    15ba:	88 0f       	add	r24, r24
    15bc:	99 1f       	adc	r25, r25
    15be:	88 0f       	add	r24, r24
    15c0:	99 1f       	adc	r25, r25
    15c2:	82 2b       	or	r24, r18
    15c4:	8c 93       	st	X, r24

		switch(Config_Ptr-> mode)
    15c6:	e9 81       	ldd	r30, Y+1	; 0x01
    15c8:	fa 81       	ldd	r31, Y+2	; 0x02
    15ca:	85 81       	ldd	r24, Z+5	; 0x05
    15cc:	28 2f       	mov	r18, r24
    15ce:	30 e0       	ldi	r19, 0x00	; 0
    15d0:	3c 83       	std	Y+4, r19	; 0x04
    15d2:	2b 83       	std	Y+3, r18	; 0x03
    15d4:	8b 81       	ldd	r24, Y+3	; 0x03
    15d6:	9c 81       	ldd	r25, Y+4	; 0x04
    15d8:	00 97       	sbiw	r24, 0x00	; 0
    15da:	31 f0       	breq	.+12     	; 0x15e8 <Timer1_init+0x7c>
    15dc:	2b 81       	ldd	r18, Y+3	; 0x03
    15de:	3c 81       	ldd	r19, Y+4	; 0x04
    15e0:	24 30       	cpi	r18, 0x04	; 4
    15e2:	31 05       	cpc	r19, r1
    15e4:	49 f0       	breq	.+18     	; 0x15f8 <Timer1_init+0x8c>
    15e6:	18 c0       	rjmp	.+48     	; 0x1618 <Timer1_init+0xac>
		{
		case NORMAL:
			TIMSK |= (1 << TOIE1);
    15e8:	a9 e5       	ldi	r26, 0x59	; 89
    15ea:	b0 e0       	ldi	r27, 0x00	; 0
    15ec:	e9 e5       	ldi	r30, 0x59	; 89
    15ee:	f0 e0       	ldi	r31, 0x00	; 0
    15f0:	80 81       	ld	r24, Z
    15f2:	84 60       	ori	r24, 0x04	; 4
    15f4:	8c 93       	st	X, r24
    15f6:	10 c0       	rjmp	.+32     	; 0x1618 <Timer1_init+0xac>
			break;

		case COMPARE:

			TIMSK |= (1 << OCIE1A);
    15f8:	a9 e5       	ldi	r26, 0x59	; 89
    15fa:	b0 e0       	ldi	r27, 0x00	; 0
    15fc:	e9 e5       	ldi	r30, 0x59	; 89
    15fe:	f0 e0       	ldi	r31, 0x00	; 0
    1600:	80 81       	ld	r24, Z
    1602:	80 61       	ori	r24, 0x10	; 16
    1604:	8c 93       	st	X, r24
			// Set the Output Compare Register A (OCR1A)
			// This value determines the timer's counting range, which is set to 1 second
			OCR1A =Config_Ptr-> compare_value ;
    1606:	aa e4       	ldi	r26, 0x4A	; 74
    1608:	b0 e0       	ldi	r27, 0x00	; 0
    160a:	e9 81       	ldd	r30, Y+1	; 0x01
    160c:	fa 81       	ldd	r31, Y+2	; 0x02
    160e:	82 81       	ldd	r24, Z+2	; 0x02
    1610:	93 81       	ldd	r25, Z+3	; 0x03
    1612:	11 96       	adiw	r26, 0x01	; 1
    1614:	9c 93       	st	X, r25
    1616:	8e 93       	st	-X, r24
			break;
		}


	    // Enable global interrupts by setting the I-bit in the Status Register (SREG)
		sei();
    1618:	78 94       	sei


}
    161a:	0f 90       	pop	r0
    161c:	0f 90       	pop	r0
    161e:	0f 90       	pop	r0
    1620:	0f 90       	pop	r0
    1622:	cf 91       	pop	r28
    1624:	df 91       	pop	r29
    1626:	08 95       	ret

00001628 <Timer1_deInit>:
void Timer1_deInit()
{
    1628:	df 93       	push	r29
    162a:	cf 93       	push	r28
    162c:	cd b7       	in	r28, 0x3d	; 61
    162e:	de b7       	in	r29, 0x3e	; 62
	TCCR1A = 0;
    1630:	ef e4       	ldi	r30, 0x4F	; 79
    1632:	f0 e0       	ldi	r31, 0x00	; 0
    1634:	10 82       	st	Z, r1
	TCCR1B = 0;
    1636:	ee e4       	ldi	r30, 0x4E	; 78
    1638:	f0 e0       	ldi	r31, 0x00	; 0
    163a:	10 82       	st	Z, r1
	TCNT1 = 0;
    163c:	ec e4       	ldi	r30, 0x4C	; 76
    163e:	f0 e0       	ldi	r31, 0x00	; 0
    1640:	11 82       	std	Z+1, r1	; 0x01
    1642:	10 82       	st	Z, r1

	TIMSK &= ~(1<<TOIE1);
    1644:	a9 e5       	ldi	r26, 0x59	; 89
    1646:	b0 e0       	ldi	r27, 0x00	; 0
    1648:	e9 e5       	ldi	r30, 0x59	; 89
    164a:	f0 e0       	ldi	r31, 0x00	; 0
    164c:	80 81       	ld	r24, Z
    164e:	8b 7f       	andi	r24, 0xFB	; 251
    1650:	8c 93       	st	X, r24
	TIMSK &= ~(1<<OCIE1A);
    1652:	a9 e5       	ldi	r26, 0x59	; 89
    1654:	b0 e0       	ldi	r27, 0x00	; 0
    1656:	e9 e5       	ldi	r30, 0x59	; 89
    1658:	f0 e0       	ldi	r31, 0x00	; 0
    165a:	80 81       	ld	r24, Z
    165c:	8f 7e       	andi	r24, 0xEF	; 239
    165e:	8c 93       	st	X, r24
}
    1660:	cf 91       	pop	r28
    1662:	df 91       	pop	r29
    1664:	08 95       	ret

00001666 <Timer1_setCallBack>:
void Timer1_setCallBack(void(*a_ptr)(void))
{
    1666:	df 93       	push	r29
    1668:	cf 93       	push	r28
    166a:	00 d0       	rcall	.+0      	; 0x166c <Timer1_setCallBack+0x6>
    166c:	cd b7       	in	r28, 0x3d	; 61
    166e:	de b7       	in	r29, 0x3e	; 62
    1670:	9a 83       	std	Y+2, r25	; 0x02
    1672:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
    1674:	89 81       	ldd	r24, Y+1	; 0x01
    1676:	9a 81       	ldd	r25, Y+2	; 0x02
    1678:	90 93 ff 00 	sts	0x00FF, r25
    167c:	80 93 fe 00 	sts	0x00FE, r24
}
    1680:	0f 90       	pop	r0
    1682:	0f 90       	pop	r0
    1684:	cf 91       	pop	r28
    1686:	df 91       	pop	r29
    1688:	08 95       	ret

0000168a <UART_init>:
#include"UART.h"
#include <avr/io.h>
#include"gpio.h"
#include"common_macros.h"
void UART_init(const UART_ConfigType *Config_Ptr)
{
    168a:	df 93       	push	r29
    168c:	cf 93       	push	r28
    168e:	00 d0       	rcall	.+0      	; 0x1690 <UART_init+0x6>
    1690:	00 d0       	rcall	.+0      	; 0x1692 <UART_init+0x8>
    1692:	cd b7       	in	r28, 0x3d	; 61
    1694:	de b7       	in	r29, 0x3e	; 62
    1696:	9c 83       	std	Y+4, r25	; 0x04
    1698:	8b 83       	std	Y+3, r24	; 0x03

	uint16 UBRR_VALUE = 0;
    169a:	1a 82       	std	Y+2, r1	; 0x02
    169c:	19 82       	std	Y+1, r1	; 0x01

	UCSRA=(1<<U2X); //double transmission speed
    169e:	eb e2       	ldi	r30, 0x2B	; 43
    16a0:	f0 e0       	ldi	r31, 0x00	; 0
    16a2:	82 e0       	ldi	r24, 0x02	; 2
    16a4:	80 83       	st	Z, r24
	/*enable receiver and transmitter*/
	UCSRB=(1<<RXEN) | (1<<TXEN);
    16a6:	ea e2       	ldi	r30, 0x2A	; 42
    16a8:	f0 e0       	ldi	r31, 0x00	; 0
    16aa:	88 e1       	ldi	r24, 0x18	; 24
    16ac:	80 83       	st	Z, r24

	UCSRC=(UCSRC & 0XC1) | ((Config_Ptr->parity)<<4) | ((Config_Ptr->stop_bit)<<3) | ((Config_Ptr->bit_data)<<1) | (1<<URSEL);
    16ae:	a0 e4       	ldi	r26, 0x40	; 64
    16b0:	b0 e0       	ldi	r27, 0x00	; 0
    16b2:	e0 e4       	ldi	r30, 0x40	; 64
    16b4:	f0 e0       	ldi	r31, 0x00	; 0
    16b6:	80 81       	ld	r24, Z
    16b8:	28 2f       	mov	r18, r24
    16ba:	21 7c       	andi	r18, 0xC1	; 193
    16bc:	eb 81       	ldd	r30, Y+3	; 0x03
    16be:	fc 81       	ldd	r31, Y+4	; 0x04
    16c0:	81 81       	ldd	r24, Z+1	; 0x01
    16c2:	88 2f       	mov	r24, r24
    16c4:	90 e0       	ldi	r25, 0x00	; 0
    16c6:	82 95       	swap	r24
    16c8:	92 95       	swap	r25
    16ca:	90 7f       	andi	r25, 0xF0	; 240
    16cc:	98 27       	eor	r25, r24
    16ce:	80 7f       	andi	r24, 0xF0	; 240
    16d0:	98 27       	eor	r25, r24
    16d2:	28 2b       	or	r18, r24
    16d4:	eb 81       	ldd	r30, Y+3	; 0x03
    16d6:	fc 81       	ldd	r31, Y+4	; 0x04
    16d8:	82 81       	ldd	r24, Z+2	; 0x02
    16da:	88 2f       	mov	r24, r24
    16dc:	90 e0       	ldi	r25, 0x00	; 0
    16de:	88 0f       	add	r24, r24
    16e0:	99 1f       	adc	r25, r25
    16e2:	88 0f       	add	r24, r24
    16e4:	99 1f       	adc	r25, r25
    16e6:	88 0f       	add	r24, r24
    16e8:	99 1f       	adc	r25, r25
    16ea:	28 2b       	or	r18, r24
    16ec:	eb 81       	ldd	r30, Y+3	; 0x03
    16ee:	fc 81       	ldd	r31, Y+4	; 0x04
    16f0:	80 81       	ld	r24, Z
    16f2:	88 2f       	mov	r24, r24
    16f4:	90 e0       	ldi	r25, 0x00	; 0
    16f6:	88 0f       	add	r24, r24
    16f8:	99 1f       	adc	r25, r25
    16fa:	82 2b       	or	r24, r18
    16fc:	80 68       	ori	r24, 0x80	; 128
    16fe:	8c 93       	st	X, r24

	UCSRB =(UCSRB & 0XFB) | ((Config_Ptr->bit_data));
    1700:	aa e2       	ldi	r26, 0x2A	; 42
    1702:	b0 e0       	ldi	r27, 0x00	; 0
    1704:	ea e2       	ldi	r30, 0x2A	; 42
    1706:	f0 e0       	ldi	r31, 0x00	; 0
    1708:	80 81       	ld	r24, Z
    170a:	98 2f       	mov	r25, r24
    170c:	9b 7f       	andi	r25, 0xFB	; 251
    170e:	eb 81       	ldd	r30, Y+3	; 0x03
    1710:	fc 81       	ldd	r31, Y+4	; 0x04
    1712:	80 81       	ld	r24, Z
    1714:	89 2b       	or	r24, r25
    1716:	8c 93       	st	X, r24

	UBRR_VALUE= (uint16)(((F_CPU / ( (Config_Ptr->baud_rate)* 8UL))) - 1);
    1718:	eb 81       	ldd	r30, Y+3	; 0x03
    171a:	fc 81       	ldd	r31, Y+4	; 0x04
    171c:	83 81       	ldd	r24, Z+3	; 0x03
    171e:	94 81       	ldd	r25, Z+4	; 0x04
    1720:	a5 81       	ldd	r26, Z+5	; 0x05
    1722:	b6 81       	ldd	r27, Z+6	; 0x06
    1724:	88 0f       	add	r24, r24
    1726:	99 1f       	adc	r25, r25
    1728:	aa 1f       	adc	r26, r26
    172a:	bb 1f       	adc	r27, r27
    172c:	88 0f       	add	r24, r24
    172e:	99 1f       	adc	r25, r25
    1730:	aa 1f       	adc	r26, r26
    1732:	bb 1f       	adc	r27, r27
    1734:	88 0f       	add	r24, r24
    1736:	99 1f       	adc	r25, r25
    1738:	aa 1f       	adc	r26, r26
    173a:	bb 1f       	adc	r27, r27
    173c:	9c 01       	movw	r18, r24
    173e:	ad 01       	movw	r20, r26
    1740:	80 e0       	ldi	r24, 0x00	; 0
    1742:	92 e1       	ldi	r25, 0x12	; 18
    1744:	aa e7       	ldi	r26, 0x7A	; 122
    1746:	b0 e0       	ldi	r27, 0x00	; 0
    1748:	bc 01       	movw	r22, r24
    174a:	cd 01       	movw	r24, r26
    174c:	0e 94 b6 13 	call	0x276c	; 0x276c <__udivmodsi4>
    1750:	da 01       	movw	r26, r20
    1752:	c9 01       	movw	r24, r18
    1754:	01 97       	sbiw	r24, 0x01	; 1
    1756:	9a 83       	std	Y+2, r25	; 0x02
    1758:	89 83       	std	Y+1, r24	; 0x01


	UBRRH=(UBRR_VALUE>>8);
    175a:	e0 e4       	ldi	r30, 0x40	; 64
    175c:	f0 e0       	ldi	r31, 0x00	; 0
    175e:	89 81       	ldd	r24, Y+1	; 0x01
    1760:	9a 81       	ldd	r25, Y+2	; 0x02
    1762:	89 2f       	mov	r24, r25
    1764:	99 27       	eor	r25, r25
    1766:	80 83       	st	Z, r24
	UBRRL=UBRR_VALUE;
    1768:	e9 e2       	ldi	r30, 0x29	; 41
    176a:	f0 e0       	ldi	r31, 0x00	; 0
    176c:	89 81       	ldd	r24, Y+1	; 0x01
    176e:	80 83       	st	Z, r24
}
    1770:	0f 90       	pop	r0
    1772:	0f 90       	pop	r0
    1774:	0f 90       	pop	r0
    1776:	0f 90       	pop	r0
    1778:	cf 91       	pop	r28
    177a:	df 91       	pop	r29
    177c:	08 95       	ret

0000177e <UART_SendByte>:

void UART_SendByte(uint8 data)
{
    177e:	df 93       	push	r29
    1780:	cf 93       	push	r28
    1782:	0f 92       	push	r0
    1784:	cd b7       	in	r28, 0x3d	; 61
    1786:	de b7       	in	r29, 0x3e	; 62
    1788:	89 83       	std	Y+1, r24	; 0x01
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    178a:	eb e2       	ldi	r30, 0x2B	; 43
    178c:	f0 e0       	ldi	r31, 0x00	; 0
    178e:	80 81       	ld	r24, Z
    1790:	88 2f       	mov	r24, r24
    1792:	90 e0       	ldi	r25, 0x00	; 0
    1794:	80 72       	andi	r24, 0x20	; 32
    1796:	90 70       	andi	r25, 0x00	; 0
    1798:	00 97       	sbiw	r24, 0x00	; 0
    179a:	b9 f3       	breq	.-18     	; 0x178a <UART_SendByte+0xc>

   UDR=data;
    179c:	ec e2       	ldi	r30, 0x2C	; 44
    179e:	f0 e0       	ldi	r31, 0x00	; 0
    17a0:	89 81       	ldd	r24, Y+1	; 0x01
    17a2:	80 83       	st	Z, r24

}
    17a4:	0f 90       	pop	r0
    17a6:	cf 91       	pop	r28
    17a8:	df 91       	pop	r29
    17aa:	08 95       	ret

000017ac <UART_RecieveByte>:

uint8 UART_RecieveByte()
{
    17ac:	df 93       	push	r29
    17ae:	cf 93       	push	r28
    17b0:	cd b7       	in	r28, 0x3d	; 61
    17b2:	de b7       	in	r29, 0x3e	; 62
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    17b4:	eb e2       	ldi	r30, 0x2B	; 43
    17b6:	f0 e0       	ldi	r31, 0x00	; 0
    17b8:	80 81       	ld	r24, Z
    17ba:	88 23       	and	r24, r24
    17bc:	dc f7       	brge	.-10     	; 0x17b4 <UART_RecieveByte+0x8>


   return UDR;
    17be:	ec e2       	ldi	r30, 0x2C	; 44
    17c0:	f0 e0       	ldi	r31, 0x00	; 0
    17c2:	80 81       	ld	r24, Z

}
    17c4:	cf 91       	pop	r28
    17c6:	df 91       	pop	r29
    17c8:	08 95       	ret

000017ca <UART_SendString>:
void UART_SendString(uint8 *str)
{
    17ca:	df 93       	push	r29
    17cc:	cf 93       	push	r28
    17ce:	00 d0       	rcall	.+0      	; 0x17d0 <UART_SendString+0x6>
    17d0:	0f 92       	push	r0
    17d2:	cd b7       	in	r28, 0x3d	; 61
    17d4:	de b7       	in	r29, 0x3e	; 62
    17d6:	9b 83       	std	Y+3, r25	; 0x03
    17d8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i=0;
    17da:	19 82       	std	Y+1, r1	; 0x01
    17dc:	0e c0       	rjmp	.+28     	; 0x17fa <UART_SendString+0x30>
	while(str[i]!='\0')
	{
		 UART_SendByte(str[i]);
    17de:	89 81       	ldd	r24, Y+1	; 0x01
    17e0:	28 2f       	mov	r18, r24
    17e2:	30 e0       	ldi	r19, 0x00	; 0
    17e4:	8a 81       	ldd	r24, Y+2	; 0x02
    17e6:	9b 81       	ldd	r25, Y+3	; 0x03
    17e8:	fc 01       	movw	r30, r24
    17ea:	e2 0f       	add	r30, r18
    17ec:	f3 1f       	adc	r31, r19
    17ee:	80 81       	ld	r24, Z
    17f0:	0e 94 bf 0b 	call	0x177e	; 0x177e <UART_SendByte>
		 i++;
    17f4:	89 81       	ldd	r24, Y+1	; 0x01
    17f6:	8f 5f       	subi	r24, 0xFF	; 255
    17f8:	89 83       	std	Y+1, r24	; 0x01

}
void UART_SendString(uint8 *str)
{
	uint8 i=0;
	while(str[i]!='\0')
    17fa:	89 81       	ldd	r24, Y+1	; 0x01
    17fc:	28 2f       	mov	r18, r24
    17fe:	30 e0       	ldi	r19, 0x00	; 0
    1800:	8a 81       	ldd	r24, Y+2	; 0x02
    1802:	9b 81       	ldd	r25, Y+3	; 0x03
    1804:	fc 01       	movw	r30, r24
    1806:	e2 0f       	add	r30, r18
    1808:	f3 1f       	adc	r31, r19
    180a:	80 81       	ld	r24, Z
    180c:	88 23       	and	r24, r24
    180e:	39 f7       	brne	.-50     	; 0x17de <UART_SendString+0x14>
	{
		 UART_SendByte(str[i]);
		 i++;
	}
}
    1810:	0f 90       	pop	r0
    1812:	0f 90       	pop	r0
    1814:	0f 90       	pop	r0
    1816:	cf 91       	pop	r28
    1818:	df 91       	pop	r29
    181a:	08 95       	ret

0000181c <UART_RecieveString>:
void UART_RecieveString(uint8 *str)
{
    181c:	0f 93       	push	r16
    181e:	1f 93       	push	r17
    1820:	df 93       	push	r29
    1822:	cf 93       	push	r28
    1824:	00 d0       	rcall	.+0      	; 0x1826 <UART_RecieveString+0xa>
    1826:	0f 92       	push	r0
    1828:	cd b7       	in	r28, 0x3d	; 61
    182a:	de b7       	in	r29, 0x3e	; 62
    182c:	9b 83       	std	Y+3, r25	; 0x03
    182e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i=0;
    1830:	19 82       	std	Y+1, r1	; 0x01
	str[i] = UART_RecieveByte();
    1832:	89 81       	ldd	r24, Y+1	; 0x01
    1834:	28 2f       	mov	r18, r24
    1836:	30 e0       	ldi	r19, 0x00	; 0
    1838:	8a 81       	ldd	r24, Y+2	; 0x02
    183a:	9b 81       	ldd	r25, Y+3	; 0x03
    183c:	8c 01       	movw	r16, r24
    183e:	02 0f       	add	r16, r18
    1840:	13 1f       	adc	r17, r19
    1842:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <UART_RecieveByte>
    1846:	f8 01       	movw	r30, r16
    1848:	80 83       	st	Z, r24
    184a:	0f c0       	rjmp	.+30     	; 0x186a <UART_RecieveString+0x4e>
	while(str[i]!='#')
	{
		 i++;
    184c:	89 81       	ldd	r24, Y+1	; 0x01
    184e:	8f 5f       	subi	r24, 0xFF	; 255
    1850:	89 83       	std	Y+1, r24	; 0x01
		 str[i]=UART_RecieveByte();
    1852:	89 81       	ldd	r24, Y+1	; 0x01
    1854:	28 2f       	mov	r18, r24
    1856:	30 e0       	ldi	r19, 0x00	; 0
    1858:	8a 81       	ldd	r24, Y+2	; 0x02
    185a:	9b 81       	ldd	r25, Y+3	; 0x03
    185c:	8c 01       	movw	r16, r24
    185e:	02 0f       	add	r16, r18
    1860:	13 1f       	adc	r17, r19
    1862:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <UART_RecieveByte>
    1866:	f8 01       	movw	r30, r16
    1868:	80 83       	st	Z, r24
}
void UART_RecieveString(uint8 *str)
{
	uint8 i=0;
	str[i] = UART_RecieveByte();
	while(str[i]!='#')
    186a:	89 81       	ldd	r24, Y+1	; 0x01
    186c:	28 2f       	mov	r18, r24
    186e:	30 e0       	ldi	r19, 0x00	; 0
    1870:	8a 81       	ldd	r24, Y+2	; 0x02
    1872:	9b 81       	ldd	r25, Y+3	; 0x03
    1874:	fc 01       	movw	r30, r24
    1876:	e2 0f       	add	r30, r18
    1878:	f3 1f       	adc	r31, r19
    187a:	80 81       	ld	r24, Z
    187c:	83 32       	cpi	r24, 0x23	; 35
    187e:	31 f7       	brne	.-52     	; 0x184c <UART_RecieveString+0x30>
	{
		 i++;
		 str[i]=UART_RecieveByte();

	}
	str[i]='\0';
    1880:	89 81       	ldd	r24, Y+1	; 0x01
    1882:	28 2f       	mov	r18, r24
    1884:	30 e0       	ldi	r19, 0x00	; 0
    1886:	8a 81       	ldd	r24, Y+2	; 0x02
    1888:	9b 81       	ldd	r25, Y+3	; 0x03
    188a:	fc 01       	movw	r30, r24
    188c:	e2 0f       	add	r30, r18
    188e:	f3 1f       	adc	r31, r19
    1890:	10 82       	st	Z, r1
}
    1892:	0f 90       	pop	r0
    1894:	0f 90       	pop	r0
    1896:	0f 90       	pop	r0
    1898:	cf 91       	pop	r28
    189a:	df 91       	pop	r29
    189c:	1f 91       	pop	r17
    189e:	0f 91       	pop	r16
    18a0:	08 95       	ret

000018a2 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    18a2:	df 93       	push	r29
    18a4:	cf 93       	push	r28
    18a6:	00 d0       	rcall	.+0      	; 0x18a8 <GPIO_setupPinDirection+0x6>
    18a8:	00 d0       	rcall	.+0      	; 0x18aa <GPIO_setupPinDirection+0x8>
    18aa:	0f 92       	push	r0
    18ac:	cd b7       	in	r28, 0x3d	; 61
    18ae:	de b7       	in	r29, 0x3e	; 62
    18b0:	89 83       	std	Y+1, r24	; 0x01
    18b2:	6a 83       	std	Y+2, r22	; 0x02
    18b4:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    18b6:	8a 81       	ldd	r24, Y+2	; 0x02
    18b8:	88 30       	cpi	r24, 0x08	; 8
    18ba:	08 f0       	brcs	.+2      	; 0x18be <GPIO_setupPinDirection+0x1c>
    18bc:	d5 c0       	rjmp	.+426    	; 0x1a68 <GPIO_setupPinDirection+0x1c6>
    18be:	89 81       	ldd	r24, Y+1	; 0x01
    18c0:	84 30       	cpi	r24, 0x04	; 4
    18c2:	08 f0       	brcs	.+2      	; 0x18c6 <GPIO_setupPinDirection+0x24>
    18c4:	d1 c0       	rjmp	.+418    	; 0x1a68 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    18c6:	89 81       	ldd	r24, Y+1	; 0x01
    18c8:	28 2f       	mov	r18, r24
    18ca:	30 e0       	ldi	r19, 0x00	; 0
    18cc:	3d 83       	std	Y+5, r19	; 0x05
    18ce:	2c 83       	std	Y+4, r18	; 0x04
    18d0:	8c 81       	ldd	r24, Y+4	; 0x04
    18d2:	9d 81       	ldd	r25, Y+5	; 0x05
    18d4:	81 30       	cpi	r24, 0x01	; 1
    18d6:	91 05       	cpc	r25, r1
    18d8:	09 f4       	brne	.+2      	; 0x18dc <GPIO_setupPinDirection+0x3a>
    18da:	43 c0       	rjmp	.+134    	; 0x1962 <GPIO_setupPinDirection+0xc0>
    18dc:	2c 81       	ldd	r18, Y+4	; 0x04
    18de:	3d 81       	ldd	r19, Y+5	; 0x05
    18e0:	22 30       	cpi	r18, 0x02	; 2
    18e2:	31 05       	cpc	r19, r1
    18e4:	2c f4       	brge	.+10     	; 0x18f0 <GPIO_setupPinDirection+0x4e>
    18e6:	8c 81       	ldd	r24, Y+4	; 0x04
    18e8:	9d 81       	ldd	r25, Y+5	; 0x05
    18ea:	00 97       	sbiw	r24, 0x00	; 0
    18ec:	71 f0       	breq	.+28     	; 0x190a <GPIO_setupPinDirection+0x68>
    18ee:	bc c0       	rjmp	.+376    	; 0x1a68 <GPIO_setupPinDirection+0x1c6>
    18f0:	2c 81       	ldd	r18, Y+4	; 0x04
    18f2:	3d 81       	ldd	r19, Y+5	; 0x05
    18f4:	22 30       	cpi	r18, 0x02	; 2
    18f6:	31 05       	cpc	r19, r1
    18f8:	09 f4       	brne	.+2      	; 0x18fc <GPIO_setupPinDirection+0x5a>
    18fa:	5f c0       	rjmp	.+190    	; 0x19ba <GPIO_setupPinDirection+0x118>
    18fc:	8c 81       	ldd	r24, Y+4	; 0x04
    18fe:	9d 81       	ldd	r25, Y+5	; 0x05
    1900:	83 30       	cpi	r24, 0x03	; 3
    1902:	91 05       	cpc	r25, r1
    1904:	09 f4       	brne	.+2      	; 0x1908 <GPIO_setupPinDirection+0x66>
    1906:	85 c0       	rjmp	.+266    	; 0x1a12 <GPIO_setupPinDirection+0x170>
    1908:	af c0       	rjmp	.+350    	; 0x1a68 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    190a:	8b 81       	ldd	r24, Y+3	; 0x03
    190c:	81 30       	cpi	r24, 0x01	; 1
    190e:	a1 f4       	brne	.+40     	; 0x1938 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1910:	aa e3       	ldi	r26, 0x3A	; 58
    1912:	b0 e0       	ldi	r27, 0x00	; 0
    1914:	ea e3       	ldi	r30, 0x3A	; 58
    1916:	f0 e0       	ldi	r31, 0x00	; 0
    1918:	80 81       	ld	r24, Z
    191a:	48 2f       	mov	r20, r24
    191c:	8a 81       	ldd	r24, Y+2	; 0x02
    191e:	28 2f       	mov	r18, r24
    1920:	30 e0       	ldi	r19, 0x00	; 0
    1922:	81 e0       	ldi	r24, 0x01	; 1
    1924:	90 e0       	ldi	r25, 0x00	; 0
    1926:	02 2e       	mov	r0, r18
    1928:	02 c0       	rjmp	.+4      	; 0x192e <GPIO_setupPinDirection+0x8c>
    192a:	88 0f       	add	r24, r24
    192c:	99 1f       	adc	r25, r25
    192e:	0a 94       	dec	r0
    1930:	e2 f7       	brpl	.-8      	; 0x192a <GPIO_setupPinDirection+0x88>
    1932:	84 2b       	or	r24, r20
    1934:	8c 93       	st	X, r24
    1936:	98 c0       	rjmp	.+304    	; 0x1a68 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1938:	aa e3       	ldi	r26, 0x3A	; 58
    193a:	b0 e0       	ldi	r27, 0x00	; 0
    193c:	ea e3       	ldi	r30, 0x3A	; 58
    193e:	f0 e0       	ldi	r31, 0x00	; 0
    1940:	80 81       	ld	r24, Z
    1942:	48 2f       	mov	r20, r24
    1944:	8a 81       	ldd	r24, Y+2	; 0x02
    1946:	28 2f       	mov	r18, r24
    1948:	30 e0       	ldi	r19, 0x00	; 0
    194a:	81 e0       	ldi	r24, 0x01	; 1
    194c:	90 e0       	ldi	r25, 0x00	; 0
    194e:	02 2e       	mov	r0, r18
    1950:	02 c0       	rjmp	.+4      	; 0x1956 <GPIO_setupPinDirection+0xb4>
    1952:	88 0f       	add	r24, r24
    1954:	99 1f       	adc	r25, r25
    1956:	0a 94       	dec	r0
    1958:	e2 f7       	brpl	.-8      	; 0x1952 <GPIO_setupPinDirection+0xb0>
    195a:	80 95       	com	r24
    195c:	84 23       	and	r24, r20
    195e:	8c 93       	st	X, r24
    1960:	83 c0       	rjmp	.+262    	; 0x1a68 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1962:	8b 81       	ldd	r24, Y+3	; 0x03
    1964:	81 30       	cpi	r24, 0x01	; 1
    1966:	a1 f4       	brne	.+40     	; 0x1990 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1968:	a7 e3       	ldi	r26, 0x37	; 55
    196a:	b0 e0       	ldi	r27, 0x00	; 0
    196c:	e7 e3       	ldi	r30, 0x37	; 55
    196e:	f0 e0       	ldi	r31, 0x00	; 0
    1970:	80 81       	ld	r24, Z
    1972:	48 2f       	mov	r20, r24
    1974:	8a 81       	ldd	r24, Y+2	; 0x02
    1976:	28 2f       	mov	r18, r24
    1978:	30 e0       	ldi	r19, 0x00	; 0
    197a:	81 e0       	ldi	r24, 0x01	; 1
    197c:	90 e0       	ldi	r25, 0x00	; 0
    197e:	02 2e       	mov	r0, r18
    1980:	02 c0       	rjmp	.+4      	; 0x1986 <GPIO_setupPinDirection+0xe4>
    1982:	88 0f       	add	r24, r24
    1984:	99 1f       	adc	r25, r25
    1986:	0a 94       	dec	r0
    1988:	e2 f7       	brpl	.-8      	; 0x1982 <GPIO_setupPinDirection+0xe0>
    198a:	84 2b       	or	r24, r20
    198c:	8c 93       	st	X, r24
    198e:	6c c0       	rjmp	.+216    	; 0x1a68 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1990:	a7 e3       	ldi	r26, 0x37	; 55
    1992:	b0 e0       	ldi	r27, 0x00	; 0
    1994:	e7 e3       	ldi	r30, 0x37	; 55
    1996:	f0 e0       	ldi	r31, 0x00	; 0
    1998:	80 81       	ld	r24, Z
    199a:	48 2f       	mov	r20, r24
    199c:	8a 81       	ldd	r24, Y+2	; 0x02
    199e:	28 2f       	mov	r18, r24
    19a0:	30 e0       	ldi	r19, 0x00	; 0
    19a2:	81 e0       	ldi	r24, 0x01	; 1
    19a4:	90 e0       	ldi	r25, 0x00	; 0
    19a6:	02 2e       	mov	r0, r18
    19a8:	02 c0       	rjmp	.+4      	; 0x19ae <GPIO_setupPinDirection+0x10c>
    19aa:	88 0f       	add	r24, r24
    19ac:	99 1f       	adc	r25, r25
    19ae:	0a 94       	dec	r0
    19b0:	e2 f7       	brpl	.-8      	; 0x19aa <GPIO_setupPinDirection+0x108>
    19b2:	80 95       	com	r24
    19b4:	84 23       	and	r24, r20
    19b6:	8c 93       	st	X, r24
    19b8:	57 c0       	rjmp	.+174    	; 0x1a68 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    19ba:	8b 81       	ldd	r24, Y+3	; 0x03
    19bc:	81 30       	cpi	r24, 0x01	; 1
    19be:	a1 f4       	brne	.+40     	; 0x19e8 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    19c0:	a4 e3       	ldi	r26, 0x34	; 52
    19c2:	b0 e0       	ldi	r27, 0x00	; 0
    19c4:	e4 e3       	ldi	r30, 0x34	; 52
    19c6:	f0 e0       	ldi	r31, 0x00	; 0
    19c8:	80 81       	ld	r24, Z
    19ca:	48 2f       	mov	r20, r24
    19cc:	8a 81       	ldd	r24, Y+2	; 0x02
    19ce:	28 2f       	mov	r18, r24
    19d0:	30 e0       	ldi	r19, 0x00	; 0
    19d2:	81 e0       	ldi	r24, 0x01	; 1
    19d4:	90 e0       	ldi	r25, 0x00	; 0
    19d6:	02 2e       	mov	r0, r18
    19d8:	02 c0       	rjmp	.+4      	; 0x19de <GPIO_setupPinDirection+0x13c>
    19da:	88 0f       	add	r24, r24
    19dc:	99 1f       	adc	r25, r25
    19de:	0a 94       	dec	r0
    19e0:	e2 f7       	brpl	.-8      	; 0x19da <GPIO_setupPinDirection+0x138>
    19e2:	84 2b       	or	r24, r20
    19e4:	8c 93       	st	X, r24
    19e6:	40 c0       	rjmp	.+128    	; 0x1a68 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    19e8:	a4 e3       	ldi	r26, 0x34	; 52
    19ea:	b0 e0       	ldi	r27, 0x00	; 0
    19ec:	e4 e3       	ldi	r30, 0x34	; 52
    19ee:	f0 e0       	ldi	r31, 0x00	; 0
    19f0:	80 81       	ld	r24, Z
    19f2:	48 2f       	mov	r20, r24
    19f4:	8a 81       	ldd	r24, Y+2	; 0x02
    19f6:	28 2f       	mov	r18, r24
    19f8:	30 e0       	ldi	r19, 0x00	; 0
    19fa:	81 e0       	ldi	r24, 0x01	; 1
    19fc:	90 e0       	ldi	r25, 0x00	; 0
    19fe:	02 2e       	mov	r0, r18
    1a00:	02 c0       	rjmp	.+4      	; 0x1a06 <GPIO_setupPinDirection+0x164>
    1a02:	88 0f       	add	r24, r24
    1a04:	99 1f       	adc	r25, r25
    1a06:	0a 94       	dec	r0
    1a08:	e2 f7       	brpl	.-8      	; 0x1a02 <GPIO_setupPinDirection+0x160>
    1a0a:	80 95       	com	r24
    1a0c:	84 23       	and	r24, r20
    1a0e:	8c 93       	st	X, r24
    1a10:	2b c0       	rjmp	.+86     	; 0x1a68 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1a12:	8b 81       	ldd	r24, Y+3	; 0x03
    1a14:	81 30       	cpi	r24, 0x01	; 1
    1a16:	a1 f4       	brne	.+40     	; 0x1a40 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1a18:	a1 e3       	ldi	r26, 0x31	; 49
    1a1a:	b0 e0       	ldi	r27, 0x00	; 0
    1a1c:	e1 e3       	ldi	r30, 0x31	; 49
    1a1e:	f0 e0       	ldi	r31, 0x00	; 0
    1a20:	80 81       	ld	r24, Z
    1a22:	48 2f       	mov	r20, r24
    1a24:	8a 81       	ldd	r24, Y+2	; 0x02
    1a26:	28 2f       	mov	r18, r24
    1a28:	30 e0       	ldi	r19, 0x00	; 0
    1a2a:	81 e0       	ldi	r24, 0x01	; 1
    1a2c:	90 e0       	ldi	r25, 0x00	; 0
    1a2e:	02 2e       	mov	r0, r18
    1a30:	02 c0       	rjmp	.+4      	; 0x1a36 <GPIO_setupPinDirection+0x194>
    1a32:	88 0f       	add	r24, r24
    1a34:	99 1f       	adc	r25, r25
    1a36:	0a 94       	dec	r0
    1a38:	e2 f7       	brpl	.-8      	; 0x1a32 <GPIO_setupPinDirection+0x190>
    1a3a:	84 2b       	or	r24, r20
    1a3c:	8c 93       	st	X, r24
    1a3e:	14 c0       	rjmp	.+40     	; 0x1a68 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1a40:	a1 e3       	ldi	r26, 0x31	; 49
    1a42:	b0 e0       	ldi	r27, 0x00	; 0
    1a44:	e1 e3       	ldi	r30, 0x31	; 49
    1a46:	f0 e0       	ldi	r31, 0x00	; 0
    1a48:	80 81       	ld	r24, Z
    1a4a:	48 2f       	mov	r20, r24
    1a4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a4e:	28 2f       	mov	r18, r24
    1a50:	30 e0       	ldi	r19, 0x00	; 0
    1a52:	81 e0       	ldi	r24, 0x01	; 1
    1a54:	90 e0       	ldi	r25, 0x00	; 0
    1a56:	02 2e       	mov	r0, r18
    1a58:	02 c0       	rjmp	.+4      	; 0x1a5e <GPIO_setupPinDirection+0x1bc>
    1a5a:	88 0f       	add	r24, r24
    1a5c:	99 1f       	adc	r25, r25
    1a5e:	0a 94       	dec	r0
    1a60:	e2 f7       	brpl	.-8      	; 0x1a5a <GPIO_setupPinDirection+0x1b8>
    1a62:	80 95       	com	r24
    1a64:	84 23       	and	r24, r20
    1a66:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1a68:	0f 90       	pop	r0
    1a6a:	0f 90       	pop	r0
    1a6c:	0f 90       	pop	r0
    1a6e:	0f 90       	pop	r0
    1a70:	0f 90       	pop	r0
    1a72:	cf 91       	pop	r28
    1a74:	df 91       	pop	r29
    1a76:	08 95       	ret

00001a78 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1a78:	df 93       	push	r29
    1a7a:	cf 93       	push	r28
    1a7c:	00 d0       	rcall	.+0      	; 0x1a7e <GPIO_writePin+0x6>
    1a7e:	00 d0       	rcall	.+0      	; 0x1a80 <GPIO_writePin+0x8>
    1a80:	0f 92       	push	r0
    1a82:	cd b7       	in	r28, 0x3d	; 61
    1a84:	de b7       	in	r29, 0x3e	; 62
    1a86:	89 83       	std	Y+1, r24	; 0x01
    1a88:	6a 83       	std	Y+2, r22	; 0x02
    1a8a:	4b 83       	std	Y+3, r20	; 0x03
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1a8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a8e:	88 30       	cpi	r24, 0x08	; 8
    1a90:	08 f0       	brcs	.+2      	; 0x1a94 <GPIO_writePin+0x1c>
    1a92:	d5 c0       	rjmp	.+426    	; 0x1c3e <GPIO_writePin+0x1c6>
    1a94:	89 81       	ldd	r24, Y+1	; 0x01
    1a96:	84 30       	cpi	r24, 0x04	; 4
    1a98:	08 f0       	brcs	.+2      	; 0x1a9c <GPIO_writePin+0x24>
    1a9a:	d1 c0       	rjmp	.+418    	; 0x1c3e <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1a9c:	89 81       	ldd	r24, Y+1	; 0x01
    1a9e:	28 2f       	mov	r18, r24
    1aa0:	30 e0       	ldi	r19, 0x00	; 0
    1aa2:	3d 83       	std	Y+5, r19	; 0x05
    1aa4:	2c 83       	std	Y+4, r18	; 0x04
    1aa6:	8c 81       	ldd	r24, Y+4	; 0x04
    1aa8:	9d 81       	ldd	r25, Y+5	; 0x05
    1aaa:	81 30       	cpi	r24, 0x01	; 1
    1aac:	91 05       	cpc	r25, r1
    1aae:	09 f4       	brne	.+2      	; 0x1ab2 <GPIO_writePin+0x3a>
    1ab0:	43 c0       	rjmp	.+134    	; 0x1b38 <GPIO_writePin+0xc0>
    1ab2:	2c 81       	ldd	r18, Y+4	; 0x04
    1ab4:	3d 81       	ldd	r19, Y+5	; 0x05
    1ab6:	22 30       	cpi	r18, 0x02	; 2
    1ab8:	31 05       	cpc	r19, r1
    1aba:	2c f4       	brge	.+10     	; 0x1ac6 <GPIO_writePin+0x4e>
    1abc:	8c 81       	ldd	r24, Y+4	; 0x04
    1abe:	9d 81       	ldd	r25, Y+5	; 0x05
    1ac0:	00 97       	sbiw	r24, 0x00	; 0
    1ac2:	71 f0       	breq	.+28     	; 0x1ae0 <GPIO_writePin+0x68>
    1ac4:	bc c0       	rjmp	.+376    	; 0x1c3e <GPIO_writePin+0x1c6>
    1ac6:	2c 81       	ldd	r18, Y+4	; 0x04
    1ac8:	3d 81       	ldd	r19, Y+5	; 0x05
    1aca:	22 30       	cpi	r18, 0x02	; 2
    1acc:	31 05       	cpc	r19, r1
    1ace:	09 f4       	brne	.+2      	; 0x1ad2 <GPIO_writePin+0x5a>
    1ad0:	5f c0       	rjmp	.+190    	; 0x1b90 <GPIO_writePin+0x118>
    1ad2:	8c 81       	ldd	r24, Y+4	; 0x04
    1ad4:	9d 81       	ldd	r25, Y+5	; 0x05
    1ad6:	83 30       	cpi	r24, 0x03	; 3
    1ad8:	91 05       	cpc	r25, r1
    1ada:	09 f4       	brne	.+2      	; 0x1ade <GPIO_writePin+0x66>
    1adc:	85 c0       	rjmp	.+266    	; 0x1be8 <GPIO_writePin+0x170>
    1ade:	af c0       	rjmp	.+350    	; 0x1c3e <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1ae0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae2:	81 30       	cpi	r24, 0x01	; 1
    1ae4:	a1 f4       	brne	.+40     	; 0x1b0e <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1ae6:	ab e3       	ldi	r26, 0x3B	; 59
    1ae8:	b0 e0       	ldi	r27, 0x00	; 0
    1aea:	eb e3       	ldi	r30, 0x3B	; 59
    1aec:	f0 e0       	ldi	r31, 0x00	; 0
    1aee:	80 81       	ld	r24, Z
    1af0:	48 2f       	mov	r20, r24
    1af2:	8a 81       	ldd	r24, Y+2	; 0x02
    1af4:	28 2f       	mov	r18, r24
    1af6:	30 e0       	ldi	r19, 0x00	; 0
    1af8:	81 e0       	ldi	r24, 0x01	; 1
    1afa:	90 e0       	ldi	r25, 0x00	; 0
    1afc:	02 2e       	mov	r0, r18
    1afe:	02 c0       	rjmp	.+4      	; 0x1b04 <GPIO_writePin+0x8c>
    1b00:	88 0f       	add	r24, r24
    1b02:	99 1f       	adc	r25, r25
    1b04:	0a 94       	dec	r0
    1b06:	e2 f7       	brpl	.-8      	; 0x1b00 <GPIO_writePin+0x88>
    1b08:	84 2b       	or	r24, r20
    1b0a:	8c 93       	st	X, r24
    1b0c:	98 c0       	rjmp	.+304    	; 0x1c3e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1b0e:	ab e3       	ldi	r26, 0x3B	; 59
    1b10:	b0 e0       	ldi	r27, 0x00	; 0
    1b12:	eb e3       	ldi	r30, 0x3B	; 59
    1b14:	f0 e0       	ldi	r31, 0x00	; 0
    1b16:	80 81       	ld	r24, Z
    1b18:	48 2f       	mov	r20, r24
    1b1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b1c:	28 2f       	mov	r18, r24
    1b1e:	30 e0       	ldi	r19, 0x00	; 0
    1b20:	81 e0       	ldi	r24, 0x01	; 1
    1b22:	90 e0       	ldi	r25, 0x00	; 0
    1b24:	02 2e       	mov	r0, r18
    1b26:	02 c0       	rjmp	.+4      	; 0x1b2c <GPIO_writePin+0xb4>
    1b28:	88 0f       	add	r24, r24
    1b2a:	99 1f       	adc	r25, r25
    1b2c:	0a 94       	dec	r0
    1b2e:	e2 f7       	brpl	.-8      	; 0x1b28 <GPIO_writePin+0xb0>
    1b30:	80 95       	com	r24
    1b32:	84 23       	and	r24, r20
    1b34:	8c 93       	st	X, r24
    1b36:	83 c0       	rjmp	.+262    	; 0x1c3e <GPIO_writePin+0x1c6>

			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1b38:	8b 81       	ldd	r24, Y+3	; 0x03
    1b3a:	81 30       	cpi	r24, 0x01	; 1
    1b3c:	a1 f4       	brne	.+40     	; 0x1b66 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1b3e:	a8 e3       	ldi	r26, 0x38	; 56
    1b40:	b0 e0       	ldi	r27, 0x00	; 0
    1b42:	e8 e3       	ldi	r30, 0x38	; 56
    1b44:	f0 e0       	ldi	r31, 0x00	; 0
    1b46:	80 81       	ld	r24, Z
    1b48:	48 2f       	mov	r20, r24
    1b4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b4c:	28 2f       	mov	r18, r24
    1b4e:	30 e0       	ldi	r19, 0x00	; 0
    1b50:	81 e0       	ldi	r24, 0x01	; 1
    1b52:	90 e0       	ldi	r25, 0x00	; 0
    1b54:	02 2e       	mov	r0, r18
    1b56:	02 c0       	rjmp	.+4      	; 0x1b5c <GPIO_writePin+0xe4>
    1b58:	88 0f       	add	r24, r24
    1b5a:	99 1f       	adc	r25, r25
    1b5c:	0a 94       	dec	r0
    1b5e:	e2 f7       	brpl	.-8      	; 0x1b58 <GPIO_writePin+0xe0>
    1b60:	84 2b       	or	r24, r20
    1b62:	8c 93       	st	X, r24
    1b64:	6c c0       	rjmp	.+216    	; 0x1c3e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1b66:	a8 e3       	ldi	r26, 0x38	; 56
    1b68:	b0 e0       	ldi	r27, 0x00	; 0
    1b6a:	e8 e3       	ldi	r30, 0x38	; 56
    1b6c:	f0 e0       	ldi	r31, 0x00	; 0
    1b6e:	80 81       	ld	r24, Z
    1b70:	48 2f       	mov	r20, r24
    1b72:	8a 81       	ldd	r24, Y+2	; 0x02
    1b74:	28 2f       	mov	r18, r24
    1b76:	30 e0       	ldi	r19, 0x00	; 0
    1b78:	81 e0       	ldi	r24, 0x01	; 1
    1b7a:	90 e0       	ldi	r25, 0x00	; 0
    1b7c:	02 2e       	mov	r0, r18
    1b7e:	02 c0       	rjmp	.+4      	; 0x1b84 <GPIO_writePin+0x10c>
    1b80:	88 0f       	add	r24, r24
    1b82:	99 1f       	adc	r25, r25
    1b84:	0a 94       	dec	r0
    1b86:	e2 f7       	brpl	.-8      	; 0x1b80 <GPIO_writePin+0x108>
    1b88:	80 95       	com	r24
    1b8a:	84 23       	and	r24, r20
    1b8c:	8c 93       	st	X, r24
    1b8e:	57 c0       	rjmp	.+174    	; 0x1c3e <GPIO_writePin+0x1c6>

			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1b90:	8b 81       	ldd	r24, Y+3	; 0x03
    1b92:	81 30       	cpi	r24, 0x01	; 1
    1b94:	a1 f4       	brne	.+40     	; 0x1bbe <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1b96:	a5 e3       	ldi	r26, 0x35	; 53
    1b98:	b0 e0       	ldi	r27, 0x00	; 0
    1b9a:	e5 e3       	ldi	r30, 0x35	; 53
    1b9c:	f0 e0       	ldi	r31, 0x00	; 0
    1b9e:	80 81       	ld	r24, Z
    1ba0:	48 2f       	mov	r20, r24
    1ba2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ba4:	28 2f       	mov	r18, r24
    1ba6:	30 e0       	ldi	r19, 0x00	; 0
    1ba8:	81 e0       	ldi	r24, 0x01	; 1
    1baa:	90 e0       	ldi	r25, 0x00	; 0
    1bac:	02 2e       	mov	r0, r18
    1bae:	02 c0       	rjmp	.+4      	; 0x1bb4 <GPIO_writePin+0x13c>
    1bb0:	88 0f       	add	r24, r24
    1bb2:	99 1f       	adc	r25, r25
    1bb4:	0a 94       	dec	r0
    1bb6:	e2 f7       	brpl	.-8      	; 0x1bb0 <GPIO_writePin+0x138>
    1bb8:	84 2b       	or	r24, r20
    1bba:	8c 93       	st	X, r24
    1bbc:	40 c0       	rjmp	.+128    	; 0x1c3e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1bbe:	a5 e3       	ldi	r26, 0x35	; 53
    1bc0:	b0 e0       	ldi	r27, 0x00	; 0
    1bc2:	e5 e3       	ldi	r30, 0x35	; 53
    1bc4:	f0 e0       	ldi	r31, 0x00	; 0
    1bc6:	80 81       	ld	r24, Z
    1bc8:	48 2f       	mov	r20, r24
    1bca:	8a 81       	ldd	r24, Y+2	; 0x02
    1bcc:	28 2f       	mov	r18, r24
    1bce:	30 e0       	ldi	r19, 0x00	; 0
    1bd0:	81 e0       	ldi	r24, 0x01	; 1
    1bd2:	90 e0       	ldi	r25, 0x00	; 0
    1bd4:	02 2e       	mov	r0, r18
    1bd6:	02 c0       	rjmp	.+4      	; 0x1bdc <GPIO_writePin+0x164>
    1bd8:	88 0f       	add	r24, r24
    1bda:	99 1f       	adc	r25, r25
    1bdc:	0a 94       	dec	r0
    1bde:	e2 f7       	brpl	.-8      	; 0x1bd8 <GPIO_writePin+0x160>
    1be0:	80 95       	com	r24
    1be2:	84 23       	and	r24, r20
    1be4:	8c 93       	st	X, r24
    1be6:	2b c0       	rjmp	.+86     	; 0x1c3e <GPIO_writePin+0x1c6>

			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1be8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bea:	81 30       	cpi	r24, 0x01	; 1
    1bec:	a1 f4       	brne	.+40     	; 0x1c16 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1bee:	a2 e3       	ldi	r26, 0x32	; 50
    1bf0:	b0 e0       	ldi	r27, 0x00	; 0
    1bf2:	e2 e3       	ldi	r30, 0x32	; 50
    1bf4:	f0 e0       	ldi	r31, 0x00	; 0
    1bf6:	80 81       	ld	r24, Z
    1bf8:	48 2f       	mov	r20, r24
    1bfa:	8a 81       	ldd	r24, Y+2	; 0x02
    1bfc:	28 2f       	mov	r18, r24
    1bfe:	30 e0       	ldi	r19, 0x00	; 0
    1c00:	81 e0       	ldi	r24, 0x01	; 1
    1c02:	90 e0       	ldi	r25, 0x00	; 0
    1c04:	02 2e       	mov	r0, r18
    1c06:	02 c0       	rjmp	.+4      	; 0x1c0c <GPIO_writePin+0x194>
    1c08:	88 0f       	add	r24, r24
    1c0a:	99 1f       	adc	r25, r25
    1c0c:	0a 94       	dec	r0
    1c0e:	e2 f7       	brpl	.-8      	; 0x1c08 <GPIO_writePin+0x190>
    1c10:	84 2b       	or	r24, r20
    1c12:	8c 93       	st	X, r24
    1c14:	14 c0       	rjmp	.+40     	; 0x1c3e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1c16:	a2 e3       	ldi	r26, 0x32	; 50
    1c18:	b0 e0       	ldi	r27, 0x00	; 0
    1c1a:	e2 e3       	ldi	r30, 0x32	; 50
    1c1c:	f0 e0       	ldi	r31, 0x00	; 0
    1c1e:	80 81       	ld	r24, Z
    1c20:	48 2f       	mov	r20, r24
    1c22:	8a 81       	ldd	r24, Y+2	; 0x02
    1c24:	28 2f       	mov	r18, r24
    1c26:	30 e0       	ldi	r19, 0x00	; 0
    1c28:	81 e0       	ldi	r24, 0x01	; 1
    1c2a:	90 e0       	ldi	r25, 0x00	; 0
    1c2c:	02 2e       	mov	r0, r18
    1c2e:	02 c0       	rjmp	.+4      	; 0x1c34 <GPIO_writePin+0x1bc>
    1c30:	88 0f       	add	r24, r24
    1c32:	99 1f       	adc	r25, r25
    1c34:	0a 94       	dec	r0
    1c36:	e2 f7       	brpl	.-8      	; 0x1c30 <GPIO_writePin+0x1b8>
    1c38:	80 95       	com	r24
    1c3a:	84 23       	and	r24, r20
    1c3c:	8c 93       	st	X, r24

			}
			break;
		}
	}
}
    1c3e:	0f 90       	pop	r0
    1c40:	0f 90       	pop	r0
    1c42:	0f 90       	pop	r0
    1c44:	0f 90       	pop	r0
    1c46:	0f 90       	pop	r0
    1c48:	cf 91       	pop	r28
    1c4a:	df 91       	pop	r29
    1c4c:	08 95       	ret

00001c4e <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1c4e:	df 93       	push	r29
    1c50:	cf 93       	push	r28
    1c52:	00 d0       	rcall	.+0      	; 0x1c54 <GPIO_readPin+0x6>
    1c54:	00 d0       	rcall	.+0      	; 0x1c56 <GPIO_readPin+0x8>
    1c56:	0f 92       	push	r0
    1c58:	cd b7       	in	r28, 0x3d	; 61
    1c5a:	de b7       	in	r29, 0x3e	; 62
    1c5c:	89 83       	std	Y+1, r24	; 0x01
    1c5e:	6a 83       	std	Y+2, r22	; 0x02

	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1c60:	8a 81       	ldd	r24, Y+2	; 0x02
    1c62:	88 30       	cpi	r24, 0x08	; 8
    1c64:	18 f4       	brcc	.+6      	; 0x1c6c <GPIO_readPin+0x1e>
    1c66:	89 81       	ldd	r24, Y+1	; 0x01
    1c68:	84 30       	cpi	r24, 0x04	; 4
    1c6a:	10 f0       	brcs	.+4      	; 0x1c70 <GPIO_readPin+0x22>
	{
		return LOGIC_LOW;
    1c6c:	1d 82       	std	Y+5, r1	; 0x05
    1c6e:	82 c0       	rjmp	.+260    	; 0x1d74 <GPIO_readPin+0x126>
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1c70:	89 81       	ldd	r24, Y+1	; 0x01
    1c72:	28 2f       	mov	r18, r24
    1c74:	30 e0       	ldi	r19, 0x00	; 0
    1c76:	3c 83       	std	Y+4, r19	; 0x04
    1c78:	2b 83       	std	Y+3, r18	; 0x03
    1c7a:	4b 81       	ldd	r20, Y+3	; 0x03
    1c7c:	5c 81       	ldd	r21, Y+4	; 0x04
    1c7e:	41 30       	cpi	r20, 0x01	; 1
    1c80:	51 05       	cpc	r21, r1
    1c82:	79 f1       	breq	.+94     	; 0x1ce2 <GPIO_readPin+0x94>
    1c84:	8b 81       	ldd	r24, Y+3	; 0x03
    1c86:	9c 81       	ldd	r25, Y+4	; 0x04
    1c88:	82 30       	cpi	r24, 0x02	; 2
    1c8a:	91 05       	cpc	r25, r1
    1c8c:	34 f4       	brge	.+12     	; 0x1c9a <GPIO_readPin+0x4c>
    1c8e:	2b 81       	ldd	r18, Y+3	; 0x03
    1c90:	3c 81       	ldd	r19, Y+4	; 0x04
    1c92:	21 15       	cp	r18, r1
    1c94:	31 05       	cpc	r19, r1
    1c96:	69 f0       	breq	.+26     	; 0x1cb2 <GPIO_readPin+0x64>
    1c98:	6c c0       	rjmp	.+216    	; 0x1d72 <GPIO_readPin+0x124>
    1c9a:	4b 81       	ldd	r20, Y+3	; 0x03
    1c9c:	5c 81       	ldd	r21, Y+4	; 0x04
    1c9e:	42 30       	cpi	r20, 0x02	; 2
    1ca0:	51 05       	cpc	r21, r1
    1ca2:	b9 f1       	breq	.+110    	; 0x1d12 <GPIO_readPin+0xc4>
    1ca4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ca6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ca8:	83 30       	cpi	r24, 0x03	; 3
    1caa:	91 05       	cpc	r25, r1
    1cac:	09 f4       	brne	.+2      	; 0x1cb0 <GPIO_readPin+0x62>
    1cae:	49 c0       	rjmp	.+146    	; 0x1d42 <GPIO_readPin+0xf4>
    1cb0:	60 c0       	rjmp	.+192    	; 0x1d72 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1cb2:	e9 e3       	ldi	r30, 0x39	; 57
    1cb4:	f0 e0       	ldi	r31, 0x00	; 0
    1cb6:	80 81       	ld	r24, Z
    1cb8:	28 2f       	mov	r18, r24
    1cba:	30 e0       	ldi	r19, 0x00	; 0
    1cbc:	8a 81       	ldd	r24, Y+2	; 0x02
    1cbe:	88 2f       	mov	r24, r24
    1cc0:	90 e0       	ldi	r25, 0x00	; 0
    1cc2:	a9 01       	movw	r20, r18
    1cc4:	02 c0       	rjmp	.+4      	; 0x1cca <GPIO_readPin+0x7c>
    1cc6:	55 95       	asr	r21
    1cc8:	47 95       	ror	r20
    1cca:	8a 95       	dec	r24
    1ccc:	e2 f7       	brpl	.-8      	; 0x1cc6 <GPIO_readPin+0x78>
    1cce:	ca 01       	movw	r24, r20
    1cd0:	81 70       	andi	r24, 0x01	; 1
    1cd2:	90 70       	andi	r25, 0x00	; 0
    1cd4:	88 23       	and	r24, r24
    1cd6:	19 f0       	breq	.+6      	; 0x1cde <GPIO_readPin+0x90>
			{
				return LOGIC_HIGH;
    1cd8:	51 e0       	ldi	r21, 0x01	; 1
    1cda:	5d 83       	std	Y+5, r21	; 0x05
    1cdc:	4b c0       	rjmp	.+150    	; 0x1d74 <GPIO_readPin+0x126>
			}
			else
			{
				return LOGIC_LOW;
    1cde:	1d 82       	std	Y+5, r1	; 0x05
    1ce0:	49 c0       	rjmp	.+146    	; 0x1d74 <GPIO_readPin+0x126>

			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1ce2:	e6 e3       	ldi	r30, 0x36	; 54
    1ce4:	f0 e0       	ldi	r31, 0x00	; 0
    1ce6:	80 81       	ld	r24, Z
    1ce8:	28 2f       	mov	r18, r24
    1cea:	30 e0       	ldi	r19, 0x00	; 0
    1cec:	8a 81       	ldd	r24, Y+2	; 0x02
    1cee:	88 2f       	mov	r24, r24
    1cf0:	90 e0       	ldi	r25, 0x00	; 0
    1cf2:	a9 01       	movw	r20, r18
    1cf4:	02 c0       	rjmp	.+4      	; 0x1cfa <GPIO_readPin+0xac>
    1cf6:	55 95       	asr	r21
    1cf8:	47 95       	ror	r20
    1cfa:	8a 95       	dec	r24
    1cfc:	e2 f7       	brpl	.-8      	; 0x1cf6 <GPIO_readPin+0xa8>
    1cfe:	ca 01       	movw	r24, r20
    1d00:	81 70       	andi	r24, 0x01	; 1
    1d02:	90 70       	andi	r25, 0x00	; 0
    1d04:	88 23       	and	r24, r24
    1d06:	19 f0       	breq	.+6      	; 0x1d0e <GPIO_readPin+0xc0>
			{
				return LOGIC_HIGH;
    1d08:	51 e0       	ldi	r21, 0x01	; 1
    1d0a:	5d 83       	std	Y+5, r21	; 0x05
    1d0c:	33 c0       	rjmp	.+102    	; 0x1d74 <GPIO_readPin+0x126>
			}
			else
			{
				return LOGIC_LOW;
    1d0e:	1d 82       	std	Y+5, r1	; 0x05
    1d10:	31 c0       	rjmp	.+98     	; 0x1d74 <GPIO_readPin+0x126>

			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1d12:	e3 e3       	ldi	r30, 0x33	; 51
    1d14:	f0 e0       	ldi	r31, 0x00	; 0
    1d16:	80 81       	ld	r24, Z
    1d18:	28 2f       	mov	r18, r24
    1d1a:	30 e0       	ldi	r19, 0x00	; 0
    1d1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d1e:	88 2f       	mov	r24, r24
    1d20:	90 e0       	ldi	r25, 0x00	; 0
    1d22:	a9 01       	movw	r20, r18
    1d24:	02 c0       	rjmp	.+4      	; 0x1d2a <GPIO_readPin+0xdc>
    1d26:	55 95       	asr	r21
    1d28:	47 95       	ror	r20
    1d2a:	8a 95       	dec	r24
    1d2c:	e2 f7       	brpl	.-8      	; 0x1d26 <GPIO_readPin+0xd8>
    1d2e:	ca 01       	movw	r24, r20
    1d30:	81 70       	andi	r24, 0x01	; 1
    1d32:	90 70       	andi	r25, 0x00	; 0
    1d34:	88 23       	and	r24, r24
    1d36:	19 f0       	breq	.+6      	; 0x1d3e <GPIO_readPin+0xf0>
			{
				return LOGIC_HIGH;
    1d38:	51 e0       	ldi	r21, 0x01	; 1
    1d3a:	5d 83       	std	Y+5, r21	; 0x05
    1d3c:	1b c0       	rjmp	.+54     	; 0x1d74 <GPIO_readPin+0x126>
			}
			else
			{
				return LOGIC_LOW;
    1d3e:	1d 82       	std	Y+5, r1	; 0x05
    1d40:	19 c0       	rjmp	.+50     	; 0x1d74 <GPIO_readPin+0x126>

			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1d42:	e0 e3       	ldi	r30, 0x30	; 48
    1d44:	f0 e0       	ldi	r31, 0x00	; 0
    1d46:	80 81       	ld	r24, Z
    1d48:	28 2f       	mov	r18, r24
    1d4a:	30 e0       	ldi	r19, 0x00	; 0
    1d4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d4e:	88 2f       	mov	r24, r24
    1d50:	90 e0       	ldi	r25, 0x00	; 0
    1d52:	a9 01       	movw	r20, r18
    1d54:	02 c0       	rjmp	.+4      	; 0x1d5a <GPIO_readPin+0x10c>
    1d56:	55 95       	asr	r21
    1d58:	47 95       	ror	r20
    1d5a:	8a 95       	dec	r24
    1d5c:	e2 f7       	brpl	.-8      	; 0x1d56 <GPIO_readPin+0x108>
    1d5e:	ca 01       	movw	r24, r20
    1d60:	81 70       	andi	r24, 0x01	; 1
    1d62:	90 70       	andi	r25, 0x00	; 0
    1d64:	88 23       	and	r24, r24
    1d66:	19 f0       	breq	.+6      	; 0x1d6e <GPIO_readPin+0x120>
			{
				return LOGIC_HIGH;
    1d68:	51 e0       	ldi	r21, 0x01	; 1
    1d6a:	5d 83       	std	Y+5, r21	; 0x05
    1d6c:	03 c0       	rjmp	.+6      	; 0x1d74 <GPIO_readPin+0x126>
			}
			else
			{
				return LOGIC_LOW;
    1d6e:	1d 82       	std	Y+5, r1	; 0x05
    1d70:	01 c0       	rjmp	.+2      	; 0x1d74 <GPIO_readPin+0x126>

			}
			break;
		}
	}
	return LOGIC_LOW;
    1d72:	1d 82       	std	Y+5, r1	; 0x05
    1d74:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1d76:	0f 90       	pop	r0
    1d78:	0f 90       	pop	r0
    1d7a:	0f 90       	pop	r0
    1d7c:	0f 90       	pop	r0
    1d7e:	0f 90       	pop	r0
    1d80:	cf 91       	pop	r28
    1d82:	df 91       	pop	r29
    1d84:	08 95       	ret

00001d86 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1d86:	df 93       	push	r29
    1d88:	cf 93       	push	r28
    1d8a:	00 d0       	rcall	.+0      	; 0x1d8c <GPIO_setupPortDirection+0x6>
    1d8c:	00 d0       	rcall	.+0      	; 0x1d8e <GPIO_setupPortDirection+0x8>
    1d8e:	cd b7       	in	r28, 0x3d	; 61
    1d90:	de b7       	in	r29, 0x3e	; 62
    1d92:	89 83       	std	Y+1, r24	; 0x01
    1d94:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1d96:	89 81       	ldd	r24, Y+1	; 0x01
    1d98:	84 30       	cpi	r24, 0x04	; 4
    1d9a:	90 f5       	brcc	.+100    	; 0x1e00 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1d9c:	89 81       	ldd	r24, Y+1	; 0x01
    1d9e:	28 2f       	mov	r18, r24
    1da0:	30 e0       	ldi	r19, 0x00	; 0
    1da2:	3c 83       	std	Y+4, r19	; 0x04
    1da4:	2b 83       	std	Y+3, r18	; 0x03
    1da6:	8b 81       	ldd	r24, Y+3	; 0x03
    1da8:	9c 81       	ldd	r25, Y+4	; 0x04
    1daa:	81 30       	cpi	r24, 0x01	; 1
    1dac:	91 05       	cpc	r25, r1
    1dae:	d1 f0       	breq	.+52     	; 0x1de4 <GPIO_setupPortDirection+0x5e>
    1db0:	2b 81       	ldd	r18, Y+3	; 0x03
    1db2:	3c 81       	ldd	r19, Y+4	; 0x04
    1db4:	22 30       	cpi	r18, 0x02	; 2
    1db6:	31 05       	cpc	r19, r1
    1db8:	2c f4       	brge	.+10     	; 0x1dc4 <GPIO_setupPortDirection+0x3e>
    1dba:	8b 81       	ldd	r24, Y+3	; 0x03
    1dbc:	9c 81       	ldd	r25, Y+4	; 0x04
    1dbe:	00 97       	sbiw	r24, 0x00	; 0
    1dc0:	61 f0       	breq	.+24     	; 0x1dda <GPIO_setupPortDirection+0x54>
    1dc2:	1e c0       	rjmp	.+60     	; 0x1e00 <GPIO_setupPortDirection+0x7a>
    1dc4:	2b 81       	ldd	r18, Y+3	; 0x03
    1dc6:	3c 81       	ldd	r19, Y+4	; 0x04
    1dc8:	22 30       	cpi	r18, 0x02	; 2
    1dca:	31 05       	cpc	r19, r1
    1dcc:	81 f0       	breq	.+32     	; 0x1dee <GPIO_setupPortDirection+0x68>
    1dce:	8b 81       	ldd	r24, Y+3	; 0x03
    1dd0:	9c 81       	ldd	r25, Y+4	; 0x04
    1dd2:	83 30       	cpi	r24, 0x03	; 3
    1dd4:	91 05       	cpc	r25, r1
    1dd6:	81 f0       	breq	.+32     	; 0x1df8 <GPIO_setupPortDirection+0x72>
    1dd8:	13 c0       	rjmp	.+38     	; 0x1e00 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1dda:	ea e3       	ldi	r30, 0x3A	; 58
    1ddc:	f0 e0       	ldi	r31, 0x00	; 0
    1dde:	8a 81       	ldd	r24, Y+2	; 0x02
    1de0:	80 83       	st	Z, r24
    1de2:	0e c0       	rjmp	.+28     	; 0x1e00 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1de4:	e7 e3       	ldi	r30, 0x37	; 55
    1de6:	f0 e0       	ldi	r31, 0x00	; 0
    1de8:	8a 81       	ldd	r24, Y+2	; 0x02
    1dea:	80 83       	st	Z, r24
    1dec:	09 c0       	rjmp	.+18     	; 0x1e00 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1dee:	e4 e3       	ldi	r30, 0x34	; 52
    1df0:	f0 e0       	ldi	r31, 0x00	; 0
    1df2:	8a 81       	ldd	r24, Y+2	; 0x02
    1df4:	80 83       	st	Z, r24
    1df6:	04 c0       	rjmp	.+8      	; 0x1e00 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1df8:	e1 e3       	ldi	r30, 0x31	; 49
    1dfa:	f0 e0       	ldi	r31, 0x00	; 0
    1dfc:	8a 81       	ldd	r24, Y+2	; 0x02
    1dfe:	80 83       	st	Z, r24
			break;
		}
	}
}
    1e00:	0f 90       	pop	r0
    1e02:	0f 90       	pop	r0
    1e04:	0f 90       	pop	r0
    1e06:	0f 90       	pop	r0
    1e08:	cf 91       	pop	r28
    1e0a:	df 91       	pop	r29
    1e0c:	08 95       	ret

00001e0e <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1e0e:	df 93       	push	r29
    1e10:	cf 93       	push	r28
    1e12:	00 d0       	rcall	.+0      	; 0x1e14 <GPIO_writePort+0x6>
    1e14:	00 d0       	rcall	.+0      	; 0x1e16 <GPIO_writePort+0x8>
    1e16:	cd b7       	in	r28, 0x3d	; 61
    1e18:	de b7       	in	r29, 0x3e	; 62
    1e1a:	89 83       	std	Y+1, r24	; 0x01
    1e1c:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num >= NUM_OF_PORTS)
    1e1e:	89 81       	ldd	r24, Y+1	; 0x01
    1e20:	84 30       	cpi	r24, 0x04	; 4
    1e22:	90 f5       	brcc	.+100    	; 0x1e88 <GPIO_writePort+0x7a>
			/* Do Nothing */
		}
		else
		{
		/* Setup the port direction as required */
		switch(port_num)
    1e24:	89 81       	ldd	r24, Y+1	; 0x01
    1e26:	28 2f       	mov	r18, r24
    1e28:	30 e0       	ldi	r19, 0x00	; 0
    1e2a:	3c 83       	std	Y+4, r19	; 0x04
    1e2c:	2b 83       	std	Y+3, r18	; 0x03
    1e2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e30:	9c 81       	ldd	r25, Y+4	; 0x04
    1e32:	81 30       	cpi	r24, 0x01	; 1
    1e34:	91 05       	cpc	r25, r1
    1e36:	d1 f0       	breq	.+52     	; 0x1e6c <GPIO_writePort+0x5e>
    1e38:	2b 81       	ldd	r18, Y+3	; 0x03
    1e3a:	3c 81       	ldd	r19, Y+4	; 0x04
    1e3c:	22 30       	cpi	r18, 0x02	; 2
    1e3e:	31 05       	cpc	r19, r1
    1e40:	2c f4       	brge	.+10     	; 0x1e4c <GPIO_writePort+0x3e>
    1e42:	8b 81       	ldd	r24, Y+3	; 0x03
    1e44:	9c 81       	ldd	r25, Y+4	; 0x04
    1e46:	00 97       	sbiw	r24, 0x00	; 0
    1e48:	61 f0       	breq	.+24     	; 0x1e62 <GPIO_writePort+0x54>
    1e4a:	1e c0       	rjmp	.+60     	; 0x1e88 <GPIO_writePort+0x7a>
    1e4c:	2b 81       	ldd	r18, Y+3	; 0x03
    1e4e:	3c 81       	ldd	r19, Y+4	; 0x04
    1e50:	22 30       	cpi	r18, 0x02	; 2
    1e52:	31 05       	cpc	r19, r1
    1e54:	81 f0       	breq	.+32     	; 0x1e76 <GPIO_writePort+0x68>
    1e56:	8b 81       	ldd	r24, Y+3	; 0x03
    1e58:	9c 81       	ldd	r25, Y+4	; 0x04
    1e5a:	83 30       	cpi	r24, 0x03	; 3
    1e5c:	91 05       	cpc	r25, r1
    1e5e:	81 f0       	breq	.+32     	; 0x1e80 <GPIO_writePort+0x72>
    1e60:	13 c0       	rjmp	.+38     	; 0x1e88 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1e62:	eb e3       	ldi	r30, 0x3B	; 59
    1e64:	f0 e0       	ldi	r31, 0x00	; 0
    1e66:	8a 81       	ldd	r24, Y+2	; 0x02
    1e68:	80 83       	st	Z, r24
    1e6a:	0e c0       	rjmp	.+28     	; 0x1e88 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1e6c:	e8 e3       	ldi	r30, 0x38	; 56
    1e6e:	f0 e0       	ldi	r31, 0x00	; 0
    1e70:	8a 81       	ldd	r24, Y+2	; 0x02
    1e72:	80 83       	st	Z, r24
    1e74:	09 c0       	rjmp	.+18     	; 0x1e88 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1e76:	e5 e3       	ldi	r30, 0x35	; 53
    1e78:	f0 e0       	ldi	r31, 0x00	; 0
    1e7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e7c:	80 83       	st	Z, r24
    1e7e:	04 c0       	rjmp	.+8      	; 0x1e88 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1e80:	e2 e3       	ldi	r30, 0x32	; 50
    1e82:	f0 e0       	ldi	r31, 0x00	; 0
    1e84:	8a 81       	ldd	r24, Y+2	; 0x02
    1e86:	80 83       	st	Z, r24
			break;
		}
	}
}
    1e88:	0f 90       	pop	r0
    1e8a:	0f 90       	pop	r0
    1e8c:	0f 90       	pop	r0
    1e8e:	0f 90       	pop	r0
    1e90:	cf 91       	pop	r28
    1e92:	df 91       	pop	r29
    1e94:	08 95       	ret

00001e96 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1e96:	df 93       	push	r29
    1e98:	cf 93       	push	r28
    1e9a:	00 d0       	rcall	.+0      	; 0x1e9c <GPIO_readPort+0x6>
    1e9c:	00 d0       	rcall	.+0      	; 0x1e9e <GPIO_readPort+0x8>
    1e9e:	cd b7       	in	r28, 0x3d	; 61
    1ea0:	de b7       	in	r29, 0x3e	; 62
    1ea2:	89 83       	std	Y+1, r24	; 0x01
	if(port_num >= NUM_OF_PORTS)
    1ea4:	89 81       	ldd	r24, Y+1	; 0x01
    1ea6:	84 30       	cpi	r24, 0x04	; 4
    1ea8:	10 f0       	brcs	.+4      	; 0x1eae <GPIO_readPort+0x18>
	{
		return 0;
    1eaa:	1c 82       	std	Y+4, r1	; 0x04
    1eac:	34 c0       	rjmp	.+104    	; 0x1f16 <GPIO_readPort+0x80>
	}
	else
	{
	/* Setup the port direction as required */
	switch(port_num)
    1eae:	89 81       	ldd	r24, Y+1	; 0x01
    1eb0:	28 2f       	mov	r18, r24
    1eb2:	30 e0       	ldi	r19, 0x00	; 0
    1eb4:	3b 83       	std	Y+3, r19	; 0x03
    1eb6:	2a 83       	std	Y+2, r18	; 0x02
    1eb8:	8a 81       	ldd	r24, Y+2	; 0x02
    1eba:	9b 81       	ldd	r25, Y+3	; 0x03
    1ebc:	81 30       	cpi	r24, 0x01	; 1
    1ebe:	91 05       	cpc	r25, r1
    1ec0:	d1 f0       	breq	.+52     	; 0x1ef6 <GPIO_readPort+0x60>
    1ec2:	2a 81       	ldd	r18, Y+2	; 0x02
    1ec4:	3b 81       	ldd	r19, Y+3	; 0x03
    1ec6:	22 30       	cpi	r18, 0x02	; 2
    1ec8:	31 05       	cpc	r19, r1
    1eca:	2c f4       	brge	.+10     	; 0x1ed6 <GPIO_readPort+0x40>
    1ecc:	8a 81       	ldd	r24, Y+2	; 0x02
    1ece:	9b 81       	ldd	r25, Y+3	; 0x03
    1ed0:	00 97       	sbiw	r24, 0x00	; 0
    1ed2:	61 f0       	breq	.+24     	; 0x1eec <GPIO_readPort+0x56>
    1ed4:	1f c0       	rjmp	.+62     	; 0x1f14 <GPIO_readPort+0x7e>
    1ed6:	2a 81       	ldd	r18, Y+2	; 0x02
    1ed8:	3b 81       	ldd	r19, Y+3	; 0x03
    1eda:	22 30       	cpi	r18, 0x02	; 2
    1edc:	31 05       	cpc	r19, r1
    1ede:	81 f0       	breq	.+32     	; 0x1f00 <GPIO_readPort+0x6a>
    1ee0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ee2:	9b 81       	ldd	r25, Y+3	; 0x03
    1ee4:	83 30       	cpi	r24, 0x03	; 3
    1ee6:	91 05       	cpc	r25, r1
    1ee8:	81 f0       	breq	.+32     	; 0x1f0a <GPIO_readPort+0x74>
    1eea:	14 c0       	rjmp	.+40     	; 0x1f14 <GPIO_readPort+0x7e>
	{
	case PORTA_ID:
		return PINA;
    1eec:	e9 e3       	ldi	r30, 0x39	; 57
    1eee:	f0 e0       	ldi	r31, 0x00	; 0
    1ef0:	90 81       	ld	r25, Z
    1ef2:	9c 83       	std	Y+4, r25	; 0x04
    1ef4:	10 c0       	rjmp	.+32     	; 0x1f16 <GPIO_readPort+0x80>
		break;
	case PORTB_ID:
		return PINB;
    1ef6:	e6 e3       	ldi	r30, 0x36	; 54
    1ef8:	f0 e0       	ldi	r31, 0x00	; 0
    1efa:	20 81       	ld	r18, Z
    1efc:	2c 83       	std	Y+4, r18	; 0x04
    1efe:	0b c0       	rjmp	.+22     	; 0x1f16 <GPIO_readPort+0x80>
		break;
	case PORTC_ID:
		return PINC;
    1f00:	e3 e3       	ldi	r30, 0x33	; 51
    1f02:	f0 e0       	ldi	r31, 0x00	; 0
    1f04:	30 81       	ld	r19, Z
    1f06:	3c 83       	std	Y+4, r19	; 0x04
    1f08:	06 c0       	rjmp	.+12     	; 0x1f16 <GPIO_readPort+0x80>
		break;
	case PORTD_ID:
		return PIND;
    1f0a:	e0 e3       	ldi	r30, 0x30	; 48
    1f0c:	f0 e0       	ldi	r31, 0x00	; 0
    1f0e:	80 81       	ld	r24, Z
    1f10:	8c 83       	std	Y+4, r24	; 0x04
    1f12:	01 c0       	rjmp	.+2      	; 0x1f16 <GPIO_readPort+0x80>
		break;
	}
  }
	return 0;
    1f14:	1c 82       	std	Y+4, r1	; 0x04
    1f16:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1f18:	0f 90       	pop	r0
    1f1a:	0f 90       	pop	r0
    1f1c:	0f 90       	pop	r0
    1f1e:	0f 90       	pop	r0
    1f20:	cf 91       	pop	r28
    1f22:	df 91       	pop	r29
    1f24:	08 95       	ret

00001f26 <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    1f26:	df 93       	push	r29
    1f28:	cf 93       	push	r28
    1f2a:	cd b7       	in	r28, 0x3d	; 61
    1f2c:	de b7       	in	r29, 0x3e	; 62
    1f2e:	6e 97       	sbiw	r28, 0x1e	; 30
    1f30:	0f b6       	in	r0, 0x3f	; 63
    1f32:	f8 94       	cli
    1f34:	de bf       	out	0x3e, r29	; 62
    1f36:	0f be       	out	0x3f, r0	; 63
    1f38:	cd bf       	out	0x3d, r28	; 61
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    1f3a:	81 e0       	ldi	r24, 0x01	; 1
    1f3c:	64 e0       	ldi	r22, 0x04	; 4
    1f3e:	40 e0       	ldi	r20, 0x00	; 0
    1f40:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    1f44:	81 e0       	ldi	r24, 0x01	; 1
    1f46:	65 e0       	ldi	r22, 0x05	; 5
    1f48:	40 e0       	ldi	r20, 0x00	; 0
    1f4a:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    1f4e:	81 e0       	ldi	r24, 0x01	; 1
    1f50:	66 e0       	ldi	r22, 0x06	; 6
    1f52:	40 e0       	ldi	r20, 0x00	; 0
    1f54:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    1f58:	81 e0       	ldi	r24, 0x01	; 1
    1f5a:	67 e0       	ldi	r22, 0x07	; 7
    1f5c:	40 e0       	ldi	r20, 0x00	; 0
    1f5e:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    1f62:	81 e0       	ldi	r24, 0x01	; 1
    1f64:	60 e0       	ldi	r22, 0x00	; 0
    1f66:	40 e0       	ldi	r20, 0x00	; 0
    1f68:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    1f6c:	81 e0       	ldi	r24, 0x01	; 1
    1f6e:	61 e0       	ldi	r22, 0x01	; 1
    1f70:	40 e0       	ldi	r20, 0x00	; 0
    1f72:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    1f76:	81 e0       	ldi	r24, 0x01	; 1
    1f78:	62 e0       	ldi	r22, 0x02	; 2
    1f7a:	40 e0       	ldi	r20, 0x00	; 0
    1f7c:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    1f80:	81 e0       	ldi	r24, 0x01	; 1
    1f82:	63 e0       	ldi	r22, 0x03	; 3
    1f84:	40 e0       	ldi	r20, 0x00	; 0
    1f86:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    1f8a:	1d 8e       	std	Y+29, r1	; 0x1d
    1f8c:	2d c1       	rjmp	.+602    	; 0x21e8 <KEYPAD_getPressedKey+0x2c2>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    1f8e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f90:	98 2f       	mov	r25, r24
    1f92:	9c 5f       	subi	r25, 0xFC	; 252
    1f94:	81 e0       	ldi	r24, 0x01	; 1
    1f96:	69 2f       	mov	r22, r25
    1f98:	41 e0       	ldi	r20, 0x01	; 1
    1f9a:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    1f9e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1fa0:	98 2f       	mov	r25, r24
    1fa2:	9c 5f       	subi	r25, 0xFC	; 252
    1fa4:	81 e0       	ldi	r24, 0x01	; 1
    1fa6:	69 2f       	mov	r22, r25
    1fa8:	40 e0       	ldi	r20, 0x00	; 0
    1faa:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1fae:	1e 8e       	std	Y+30, r1	; 0x1e
    1fb0:	9a c0       	rjmp	.+308    	; 0x20e6 <KEYPAD_getPressedKey+0x1c0>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    1fb2:	81 e0       	ldi	r24, 0x01	; 1
    1fb4:	6e 8d       	ldd	r22, Y+30	; 0x1e
    1fb6:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <GPIO_readPin>
    1fba:	88 23       	and	r24, r24
    1fbc:	09 f0       	breq	.+2      	; 0x1fc0 <KEYPAD_getPressedKey+0x9a>
    1fbe:	90 c0       	rjmp	.+288    	; 0x20e0 <KEYPAD_getPressedKey+0x1ba>
    1fc0:	72 c0       	rjmp	.+228    	; 0x20a6 <KEYPAD_getPressedKey+0x180>
				{
					while(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    1fc2:	80 e0       	ldi	r24, 0x00	; 0
    1fc4:	90 e0       	ldi	r25, 0x00	; 0
    1fc6:	a0 ea       	ldi	r26, 0xA0	; 160
    1fc8:	b0 e4       	ldi	r27, 0x40	; 64
    1fca:	89 8f       	std	Y+25, r24	; 0x19
    1fcc:	9a 8f       	std	Y+26, r25	; 0x1a
    1fce:	ab 8f       	std	Y+27, r26	; 0x1b
    1fd0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fd2:	69 8d       	ldd	r22, Y+25	; 0x19
    1fd4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1fd6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fd8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fda:	20 e0       	ldi	r18, 0x00	; 0
    1fdc:	30 e0       	ldi	r19, 0x00	; 0
    1fde:	4a ef       	ldi	r20, 0xFA	; 250
    1fe0:	54 e4       	ldi	r21, 0x44	; 68
    1fe2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fe6:	dc 01       	movw	r26, r24
    1fe8:	cb 01       	movw	r24, r22
    1fea:	8d 8b       	std	Y+21, r24	; 0x15
    1fec:	9e 8b       	std	Y+22, r25	; 0x16
    1fee:	af 8b       	std	Y+23, r26	; 0x17
    1ff0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1ff2:	6d 89       	ldd	r22, Y+21	; 0x15
    1ff4:	7e 89       	ldd	r23, Y+22	; 0x16
    1ff6:	8f 89       	ldd	r24, Y+23	; 0x17
    1ff8:	98 8d       	ldd	r25, Y+24	; 0x18
    1ffa:	20 e0       	ldi	r18, 0x00	; 0
    1ffc:	30 e0       	ldi	r19, 0x00	; 0
    1ffe:	40 e8       	ldi	r20, 0x80	; 128
    2000:	5f e3       	ldi	r21, 0x3F	; 63
    2002:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2006:	88 23       	and	r24, r24
    2008:	2c f4       	brge	.+10     	; 0x2014 <KEYPAD_getPressedKey+0xee>
		__ticks = 1;
    200a:	81 e0       	ldi	r24, 0x01	; 1
    200c:	90 e0       	ldi	r25, 0x00	; 0
    200e:	9c 8b       	std	Y+20, r25	; 0x14
    2010:	8b 8b       	std	Y+19, r24	; 0x13
    2012:	3f c0       	rjmp	.+126    	; 0x2092 <KEYPAD_getPressedKey+0x16c>
	else if (__tmp > 65535)
    2014:	6d 89       	ldd	r22, Y+21	; 0x15
    2016:	7e 89       	ldd	r23, Y+22	; 0x16
    2018:	8f 89       	ldd	r24, Y+23	; 0x17
    201a:	98 8d       	ldd	r25, Y+24	; 0x18
    201c:	20 e0       	ldi	r18, 0x00	; 0
    201e:	3f ef       	ldi	r19, 0xFF	; 255
    2020:	4f e7       	ldi	r20, 0x7F	; 127
    2022:	57 e4       	ldi	r21, 0x47	; 71
    2024:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2028:	18 16       	cp	r1, r24
    202a:	4c f5       	brge	.+82     	; 0x207e <KEYPAD_getPressedKey+0x158>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    202c:	69 8d       	ldd	r22, Y+25	; 0x19
    202e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2030:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2032:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2034:	20 e0       	ldi	r18, 0x00	; 0
    2036:	30 e0       	ldi	r19, 0x00	; 0
    2038:	40 e2       	ldi	r20, 0x20	; 32
    203a:	51 e4       	ldi	r21, 0x41	; 65
    203c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2040:	dc 01       	movw	r26, r24
    2042:	cb 01       	movw	r24, r22
    2044:	bc 01       	movw	r22, r24
    2046:	cd 01       	movw	r24, r26
    2048:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    204c:	dc 01       	movw	r26, r24
    204e:	cb 01       	movw	r24, r22
    2050:	9c 8b       	std	Y+20, r25	; 0x14
    2052:	8b 8b       	std	Y+19, r24	; 0x13
    2054:	0f c0       	rjmp	.+30     	; 0x2074 <KEYPAD_getPressedKey+0x14e>
    2056:	88 ec       	ldi	r24, 0xC8	; 200
    2058:	90 e0       	ldi	r25, 0x00	; 0
    205a:	9a 8b       	std	Y+18, r25	; 0x12
    205c:	89 8b       	std	Y+17, r24	; 0x11
    205e:	89 89       	ldd	r24, Y+17	; 0x11
    2060:	9a 89       	ldd	r25, Y+18	; 0x12
    2062:	01 97       	sbiw	r24, 0x01	; 1
    2064:	f1 f7       	brne	.-4      	; 0x2062 <KEYPAD_getPressedKey+0x13c>
    2066:	9a 8b       	std	Y+18, r25	; 0x12
    2068:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    206a:	8b 89       	ldd	r24, Y+19	; 0x13
    206c:	9c 89       	ldd	r25, Y+20	; 0x14
    206e:	01 97       	sbiw	r24, 0x01	; 1
    2070:	9c 8b       	std	Y+20, r25	; 0x14
    2072:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2074:	8b 89       	ldd	r24, Y+19	; 0x13
    2076:	9c 89       	ldd	r25, Y+20	; 0x14
    2078:	00 97       	sbiw	r24, 0x00	; 0
    207a:	69 f7       	brne	.-38     	; 0x2056 <KEYPAD_getPressedKey+0x130>
    207c:	14 c0       	rjmp	.+40     	; 0x20a6 <KEYPAD_getPressedKey+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    207e:	6d 89       	ldd	r22, Y+21	; 0x15
    2080:	7e 89       	ldd	r23, Y+22	; 0x16
    2082:	8f 89       	ldd	r24, Y+23	; 0x17
    2084:	98 8d       	ldd	r25, Y+24	; 0x18
    2086:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    208a:	dc 01       	movw	r26, r24
    208c:	cb 01       	movw	r24, r22
    208e:	9c 8b       	std	Y+20, r25	; 0x14
    2090:	8b 8b       	std	Y+19, r24	; 0x13
    2092:	8b 89       	ldd	r24, Y+19	; 0x13
    2094:	9c 89       	ldd	r25, Y+20	; 0x14
    2096:	98 8b       	std	Y+16, r25	; 0x10
    2098:	8f 87       	std	Y+15, r24	; 0x0f
    209a:	8f 85       	ldd	r24, Y+15	; 0x0f
    209c:	98 89       	ldd	r25, Y+16	; 0x10
    209e:	01 97       	sbiw	r24, 0x01	; 1
    20a0:	f1 f7       	brne	.-4      	; 0x209e <KEYPAD_getPressedKey+0x178>
    20a2:	98 8b       	std	Y+16, r25	; 0x10
    20a4:	8f 87       	std	Y+15, r24	; 0x0f
    20a6:	81 e0       	ldi	r24, 0x01	; 1
    20a8:	6e 8d       	ldd	r22, Y+30	; 0x1e
    20aa:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <GPIO_readPin>
    20ae:	88 23       	and	r24, r24
    20b0:	09 f4       	brne	.+2      	; 0x20b4 <KEYPAD_getPressedKey+0x18e>
    20b2:	87 cf       	rjmp	.-242    	; 0x1fc2 <KEYPAD_getPressedKey+0x9c>
						#endif
					#elif (KEYPAD_NUM_COLS == 4)
						#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
						#else
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    20b4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    20b6:	88 2f       	mov	r24, r24
    20b8:	90 e0       	ldi	r25, 0x00	; 0
    20ba:	88 0f       	add	r24, r24
    20bc:	99 1f       	adc	r25, r25
    20be:	88 0f       	add	r24, r24
    20c0:	99 1f       	adc	r25, r25
    20c2:	98 2f       	mov	r25, r24
    20c4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    20c6:	89 0f       	add	r24, r25
    20c8:	8f 5f       	subi	r24, 0xFF	; 255
    20ca:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <KEYPAD_4x4_adjustKeyNumber>
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
			_delay_ms(5); /* Add small delay to fix CPU load issue in proteus */
		}
	}	
}
    20ce:	6e 96       	adiw	r28, 0x1e	; 30
    20d0:	0f b6       	in	r0, 0x3f	; 63
    20d2:	f8 94       	cli
    20d4:	de bf       	out	0x3e, r29	; 62
    20d6:	0f be       	out	0x3f, r0	; 63
    20d8:	cd bf       	out	0x3d, r28	; 61
    20da:	cf 91       	pop	r28
    20dc:	df 91       	pop	r29
    20de:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    20e0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    20e2:	8f 5f       	subi	r24, 0xFF	; 255
    20e4:	8e 8f       	std	Y+30, r24	; 0x1e
    20e6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    20e8:	84 30       	cpi	r24, 0x04	; 4
    20ea:	08 f4       	brcc	.+2      	; 0x20ee <KEYPAD_getPressedKey+0x1c8>
    20ec:	62 cf       	rjmp	.-316    	; 0x1fb2 <KEYPAD_getPressedKey+0x8c>
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
						#endif
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    20ee:	8d 8d       	ldd	r24, Y+29	; 0x1d
    20f0:	98 2f       	mov	r25, r24
    20f2:	9c 5f       	subi	r25, 0xFC	; 252
    20f4:	81 e0       	ldi	r24, 0x01	; 1
    20f6:	69 2f       	mov	r22, r25
    20f8:	40 e0       	ldi	r20, 0x00	; 0
    20fa:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <GPIO_setupPinDirection>
    20fe:	80 e0       	ldi	r24, 0x00	; 0
    2100:	90 e0       	ldi	r25, 0x00	; 0
    2102:	a0 ea       	ldi	r26, 0xA0	; 160
    2104:	b0 e4       	ldi	r27, 0x40	; 64
    2106:	8b 87       	std	Y+11, r24	; 0x0b
    2108:	9c 87       	std	Y+12, r25	; 0x0c
    210a:	ad 87       	std	Y+13, r26	; 0x0d
    210c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    210e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2110:	7c 85       	ldd	r23, Y+12	; 0x0c
    2112:	8d 85       	ldd	r24, Y+13	; 0x0d
    2114:	9e 85       	ldd	r25, Y+14	; 0x0e
    2116:	20 e0       	ldi	r18, 0x00	; 0
    2118:	30 e0       	ldi	r19, 0x00	; 0
    211a:	4a ef       	ldi	r20, 0xFA	; 250
    211c:	54 e4       	ldi	r21, 0x44	; 68
    211e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2122:	dc 01       	movw	r26, r24
    2124:	cb 01       	movw	r24, r22
    2126:	8f 83       	std	Y+7, r24	; 0x07
    2128:	98 87       	std	Y+8, r25	; 0x08
    212a:	a9 87       	std	Y+9, r26	; 0x09
    212c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    212e:	6f 81       	ldd	r22, Y+7	; 0x07
    2130:	78 85       	ldd	r23, Y+8	; 0x08
    2132:	89 85       	ldd	r24, Y+9	; 0x09
    2134:	9a 85       	ldd	r25, Y+10	; 0x0a
    2136:	20 e0       	ldi	r18, 0x00	; 0
    2138:	30 e0       	ldi	r19, 0x00	; 0
    213a:	40 e8       	ldi	r20, 0x80	; 128
    213c:	5f e3       	ldi	r21, 0x3F	; 63
    213e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2142:	88 23       	and	r24, r24
    2144:	2c f4       	brge	.+10     	; 0x2150 <KEYPAD_getPressedKey+0x22a>
		__ticks = 1;
    2146:	81 e0       	ldi	r24, 0x01	; 1
    2148:	90 e0       	ldi	r25, 0x00	; 0
    214a:	9e 83       	std	Y+6, r25	; 0x06
    214c:	8d 83       	std	Y+5, r24	; 0x05
    214e:	3f c0       	rjmp	.+126    	; 0x21ce <KEYPAD_getPressedKey+0x2a8>
	else if (__tmp > 65535)
    2150:	6f 81       	ldd	r22, Y+7	; 0x07
    2152:	78 85       	ldd	r23, Y+8	; 0x08
    2154:	89 85       	ldd	r24, Y+9	; 0x09
    2156:	9a 85       	ldd	r25, Y+10	; 0x0a
    2158:	20 e0       	ldi	r18, 0x00	; 0
    215a:	3f ef       	ldi	r19, 0xFF	; 255
    215c:	4f e7       	ldi	r20, 0x7F	; 127
    215e:	57 e4       	ldi	r21, 0x47	; 71
    2160:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2164:	18 16       	cp	r1, r24
    2166:	4c f5       	brge	.+82     	; 0x21ba <KEYPAD_getPressedKey+0x294>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2168:	6b 85       	ldd	r22, Y+11	; 0x0b
    216a:	7c 85       	ldd	r23, Y+12	; 0x0c
    216c:	8d 85       	ldd	r24, Y+13	; 0x0d
    216e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2170:	20 e0       	ldi	r18, 0x00	; 0
    2172:	30 e0       	ldi	r19, 0x00	; 0
    2174:	40 e2       	ldi	r20, 0x20	; 32
    2176:	51 e4       	ldi	r21, 0x41	; 65
    2178:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    217c:	dc 01       	movw	r26, r24
    217e:	cb 01       	movw	r24, r22
    2180:	bc 01       	movw	r22, r24
    2182:	cd 01       	movw	r24, r26
    2184:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2188:	dc 01       	movw	r26, r24
    218a:	cb 01       	movw	r24, r22
    218c:	9e 83       	std	Y+6, r25	; 0x06
    218e:	8d 83       	std	Y+5, r24	; 0x05
    2190:	0f c0       	rjmp	.+30     	; 0x21b0 <KEYPAD_getPressedKey+0x28a>
    2192:	88 ec       	ldi	r24, 0xC8	; 200
    2194:	90 e0       	ldi	r25, 0x00	; 0
    2196:	9c 83       	std	Y+4, r25	; 0x04
    2198:	8b 83       	std	Y+3, r24	; 0x03
    219a:	8b 81       	ldd	r24, Y+3	; 0x03
    219c:	9c 81       	ldd	r25, Y+4	; 0x04
    219e:	01 97       	sbiw	r24, 0x01	; 1
    21a0:	f1 f7       	brne	.-4      	; 0x219e <KEYPAD_getPressedKey+0x278>
    21a2:	9c 83       	std	Y+4, r25	; 0x04
    21a4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21a6:	8d 81       	ldd	r24, Y+5	; 0x05
    21a8:	9e 81       	ldd	r25, Y+6	; 0x06
    21aa:	01 97       	sbiw	r24, 0x01	; 1
    21ac:	9e 83       	std	Y+6, r25	; 0x06
    21ae:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21b0:	8d 81       	ldd	r24, Y+5	; 0x05
    21b2:	9e 81       	ldd	r25, Y+6	; 0x06
    21b4:	00 97       	sbiw	r24, 0x00	; 0
    21b6:	69 f7       	brne	.-38     	; 0x2192 <KEYPAD_getPressedKey+0x26c>
    21b8:	14 c0       	rjmp	.+40     	; 0x21e2 <KEYPAD_getPressedKey+0x2bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21ba:	6f 81       	ldd	r22, Y+7	; 0x07
    21bc:	78 85       	ldd	r23, Y+8	; 0x08
    21be:	89 85       	ldd	r24, Y+9	; 0x09
    21c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    21c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21c6:	dc 01       	movw	r26, r24
    21c8:	cb 01       	movw	r24, r22
    21ca:	9e 83       	std	Y+6, r25	; 0x06
    21cc:	8d 83       	std	Y+5, r24	; 0x05
    21ce:	8d 81       	ldd	r24, Y+5	; 0x05
    21d0:	9e 81       	ldd	r25, Y+6	; 0x06
    21d2:	9a 83       	std	Y+2, r25	; 0x02
    21d4:	89 83       	std	Y+1, r24	; 0x01
    21d6:	89 81       	ldd	r24, Y+1	; 0x01
    21d8:	9a 81       	ldd	r25, Y+2	; 0x02
    21da:	01 97       	sbiw	r24, 0x01	; 1
    21dc:	f1 f7       	brne	.-4      	; 0x21da <KEYPAD_getPressedKey+0x2b4>
    21de:	9a 83       	std	Y+2, r25	; 0x02
    21e0:	89 83       	std	Y+1, r24	; 0x01
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    21e2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    21e4:	8f 5f       	subi	r24, 0xFF	; 255
    21e6:	8d 8f       	std	Y+29, r24	; 0x1d
    21e8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    21ea:	84 30       	cpi	r24, 0x04	; 4
    21ec:	08 f4       	brcc	.+2      	; 0x21f0 <KEYPAD_getPressedKey+0x2ca>
    21ee:	cf ce       	rjmp	.-610    	; 0x1f8e <KEYPAD_getPressedKey+0x68>
    21f0:	cc ce       	rjmp	.-616    	; 0x1f8a <KEYPAD_getPressedKey+0x64>

000021f2 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    21f2:	df 93       	push	r29
    21f4:	cf 93       	push	r28
    21f6:	00 d0       	rcall	.+0      	; 0x21f8 <KEYPAD_4x4_adjustKeyNumber+0x6>
    21f8:	00 d0       	rcall	.+0      	; 0x21fa <KEYPAD_4x4_adjustKeyNumber+0x8>
    21fa:	cd b7       	in	r28, 0x3d	; 61
    21fc:	de b7       	in	r29, 0x3e	; 62
    21fe:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    2200:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    2202:	8a 81       	ldd	r24, Y+2	; 0x02
    2204:	28 2f       	mov	r18, r24
    2206:	30 e0       	ldi	r19, 0x00	; 0
    2208:	3c 83       	std	Y+4, r19	; 0x04
    220a:	2b 83       	std	Y+3, r18	; 0x03
    220c:	8b 81       	ldd	r24, Y+3	; 0x03
    220e:	9c 81       	ldd	r25, Y+4	; 0x04
    2210:	88 30       	cpi	r24, 0x08	; 8
    2212:	91 05       	cpc	r25, r1
    2214:	09 f4       	brne	.+2      	; 0x2218 <KEYPAD_4x4_adjustKeyNumber+0x26>
    2216:	70 c0       	rjmp	.+224    	; 0x22f8 <KEYPAD_4x4_adjustKeyNumber+0x106>
    2218:	2b 81       	ldd	r18, Y+3	; 0x03
    221a:	3c 81       	ldd	r19, Y+4	; 0x04
    221c:	29 30       	cpi	r18, 0x09	; 9
    221e:	31 05       	cpc	r19, r1
    2220:	5c f5       	brge	.+86     	; 0x2278 <KEYPAD_4x4_adjustKeyNumber+0x86>
    2222:	8b 81       	ldd	r24, Y+3	; 0x03
    2224:	9c 81       	ldd	r25, Y+4	; 0x04
    2226:	84 30       	cpi	r24, 0x04	; 4
    2228:	91 05       	cpc	r25, r1
    222a:	09 f4       	brne	.+2      	; 0x222e <KEYPAD_4x4_adjustKeyNumber+0x3c>
    222c:	59 c0       	rjmp	.+178    	; 0x22e0 <KEYPAD_4x4_adjustKeyNumber+0xee>
    222e:	2b 81       	ldd	r18, Y+3	; 0x03
    2230:	3c 81       	ldd	r19, Y+4	; 0x04
    2232:	25 30       	cpi	r18, 0x05	; 5
    2234:	31 05       	cpc	r19, r1
    2236:	9c f4       	brge	.+38     	; 0x225e <KEYPAD_4x4_adjustKeyNumber+0x6c>
    2238:	8b 81       	ldd	r24, Y+3	; 0x03
    223a:	9c 81       	ldd	r25, Y+4	; 0x04
    223c:	82 30       	cpi	r24, 0x02	; 2
    223e:	91 05       	cpc	r25, r1
    2240:	09 f4       	brne	.+2      	; 0x2244 <KEYPAD_4x4_adjustKeyNumber+0x52>
    2242:	48 c0       	rjmp	.+144    	; 0x22d4 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    2244:	2b 81       	ldd	r18, Y+3	; 0x03
    2246:	3c 81       	ldd	r19, Y+4	; 0x04
    2248:	23 30       	cpi	r18, 0x03	; 3
    224a:	31 05       	cpc	r19, r1
    224c:	0c f0       	brlt	.+2      	; 0x2250 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    224e:	45 c0       	rjmp	.+138    	; 0x22da <KEYPAD_4x4_adjustKeyNumber+0xe8>
    2250:	8b 81       	ldd	r24, Y+3	; 0x03
    2252:	9c 81       	ldd	r25, Y+4	; 0x04
    2254:	81 30       	cpi	r24, 0x01	; 1
    2256:	91 05       	cpc	r25, r1
    2258:	09 f4       	brne	.+2      	; 0x225c <KEYPAD_4x4_adjustKeyNumber+0x6a>
    225a:	39 c0       	rjmp	.+114    	; 0x22ce <KEYPAD_4x4_adjustKeyNumber+0xdc>
    225c:	67 c0       	rjmp	.+206    	; 0x232c <KEYPAD_4x4_adjustKeyNumber+0x13a>
    225e:	2b 81       	ldd	r18, Y+3	; 0x03
    2260:	3c 81       	ldd	r19, Y+4	; 0x04
    2262:	26 30       	cpi	r18, 0x06	; 6
    2264:	31 05       	cpc	r19, r1
    2266:	09 f4       	brne	.+2      	; 0x226a <KEYPAD_4x4_adjustKeyNumber+0x78>
    2268:	41 c0       	rjmp	.+130    	; 0x22ec <KEYPAD_4x4_adjustKeyNumber+0xfa>
    226a:	8b 81       	ldd	r24, Y+3	; 0x03
    226c:	9c 81       	ldd	r25, Y+4	; 0x04
    226e:	87 30       	cpi	r24, 0x07	; 7
    2270:	91 05       	cpc	r25, r1
    2272:	0c f0       	brlt	.+2      	; 0x2276 <KEYPAD_4x4_adjustKeyNumber+0x84>
    2274:	3e c0       	rjmp	.+124    	; 0x22f2 <KEYPAD_4x4_adjustKeyNumber+0x100>
    2276:	37 c0       	rjmp	.+110    	; 0x22e6 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    2278:	2b 81       	ldd	r18, Y+3	; 0x03
    227a:	3c 81       	ldd	r19, Y+4	; 0x04
    227c:	2c 30       	cpi	r18, 0x0C	; 12
    227e:	31 05       	cpc	r19, r1
    2280:	09 f4       	brne	.+2      	; 0x2284 <KEYPAD_4x4_adjustKeyNumber+0x92>
    2282:	46 c0       	rjmp	.+140    	; 0x2310 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    2284:	8b 81       	ldd	r24, Y+3	; 0x03
    2286:	9c 81       	ldd	r25, Y+4	; 0x04
    2288:	8d 30       	cpi	r24, 0x0D	; 13
    228a:	91 05       	cpc	r25, r1
    228c:	5c f4       	brge	.+22     	; 0x22a4 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    228e:	2b 81       	ldd	r18, Y+3	; 0x03
    2290:	3c 81       	ldd	r19, Y+4	; 0x04
    2292:	2a 30       	cpi	r18, 0x0A	; 10
    2294:	31 05       	cpc	r19, r1
    2296:	b1 f1       	breq	.+108    	; 0x2304 <KEYPAD_4x4_adjustKeyNumber+0x112>
    2298:	8b 81       	ldd	r24, Y+3	; 0x03
    229a:	9c 81       	ldd	r25, Y+4	; 0x04
    229c:	8b 30       	cpi	r24, 0x0B	; 11
    229e:	91 05       	cpc	r25, r1
    22a0:	a4 f5       	brge	.+104    	; 0x230a <KEYPAD_4x4_adjustKeyNumber+0x118>
    22a2:	2d c0       	rjmp	.+90     	; 0x22fe <KEYPAD_4x4_adjustKeyNumber+0x10c>
    22a4:	2b 81       	ldd	r18, Y+3	; 0x03
    22a6:	3c 81       	ldd	r19, Y+4	; 0x04
    22a8:	2e 30       	cpi	r18, 0x0E	; 14
    22aa:	31 05       	cpc	r19, r1
    22ac:	b9 f1       	breq	.+110    	; 0x231c <KEYPAD_4x4_adjustKeyNumber+0x12a>
    22ae:	8b 81       	ldd	r24, Y+3	; 0x03
    22b0:	9c 81       	ldd	r25, Y+4	; 0x04
    22b2:	8e 30       	cpi	r24, 0x0E	; 14
    22b4:	91 05       	cpc	r25, r1
    22b6:	7c f1       	brlt	.+94     	; 0x2316 <KEYPAD_4x4_adjustKeyNumber+0x124>
    22b8:	2b 81       	ldd	r18, Y+3	; 0x03
    22ba:	3c 81       	ldd	r19, Y+4	; 0x04
    22bc:	2f 30       	cpi	r18, 0x0F	; 15
    22be:	31 05       	cpc	r19, r1
    22c0:	79 f1       	breq	.+94     	; 0x2320 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    22c2:	8b 81       	ldd	r24, Y+3	; 0x03
    22c4:	9c 81       	ldd	r25, Y+4	; 0x04
    22c6:	80 31       	cpi	r24, 0x10	; 16
    22c8:	91 05       	cpc	r25, r1
    22ca:	69 f1       	breq	.+90     	; 0x2326 <KEYPAD_4x4_adjustKeyNumber+0x134>
    22cc:	2f c0       	rjmp	.+94     	; 0x232c <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    22ce:	87 e0       	ldi	r24, 0x07	; 7
    22d0:	89 83       	std	Y+1, r24	; 0x01
    22d2:	2e c0       	rjmp	.+92     	; 0x2330 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    22d4:	88 e0       	ldi	r24, 0x08	; 8
    22d6:	89 83       	std	Y+1, r24	; 0x01
    22d8:	2b c0       	rjmp	.+86     	; 0x2330 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    22da:	89 e0       	ldi	r24, 0x09	; 9
    22dc:	89 83       	std	Y+1, r24	; 0x01
    22de:	28 c0       	rjmp	.+80     	; 0x2330 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    22e0:	85 e2       	ldi	r24, 0x25	; 37
    22e2:	89 83       	std	Y+1, r24	; 0x01
    22e4:	25 c0       	rjmp	.+74     	; 0x2330 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    22e6:	84 e0       	ldi	r24, 0x04	; 4
    22e8:	89 83       	std	Y+1, r24	; 0x01
    22ea:	22 c0       	rjmp	.+68     	; 0x2330 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    22ec:	85 e0       	ldi	r24, 0x05	; 5
    22ee:	89 83       	std	Y+1, r24	; 0x01
    22f0:	1f c0       	rjmp	.+62     	; 0x2330 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    22f2:	86 e0       	ldi	r24, 0x06	; 6
    22f4:	89 83       	std	Y+1, r24	; 0x01
    22f6:	1c c0       	rjmp	.+56     	; 0x2330 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    22f8:	8a e2       	ldi	r24, 0x2A	; 42
    22fa:	89 83       	std	Y+1, r24	; 0x01
    22fc:	19 c0       	rjmp	.+50     	; 0x2330 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    22fe:	81 e0       	ldi	r24, 0x01	; 1
    2300:	89 83       	std	Y+1, r24	; 0x01
    2302:	16 c0       	rjmp	.+44     	; 0x2330 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    2304:	82 e0       	ldi	r24, 0x02	; 2
    2306:	89 83       	std	Y+1, r24	; 0x01
    2308:	13 c0       	rjmp	.+38     	; 0x2330 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    230a:	83 e0       	ldi	r24, 0x03	; 3
    230c:	89 83       	std	Y+1, r24	; 0x01
    230e:	10 c0       	rjmp	.+32     	; 0x2330 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    2310:	8d e2       	ldi	r24, 0x2D	; 45
    2312:	89 83       	std	Y+1, r24	; 0x01
    2314:	0d c0       	rjmp	.+26     	; 0x2330 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    2316:	8d e0       	ldi	r24, 0x0D	; 13
    2318:	89 83       	std	Y+1, r24	; 0x01
    231a:	0a c0       	rjmp	.+20     	; 0x2330 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    231c:	19 82       	std	Y+1, r1	; 0x01
    231e:	08 c0       	rjmp	.+16     	; 0x2330 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    2320:	8d e3       	ldi	r24, 0x3D	; 61
    2322:	89 83       	std	Y+1, r24	; 0x01
    2324:	05 c0       	rjmp	.+10     	; 0x2330 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    2326:	8b e2       	ldi	r24, 0x2B	; 43
    2328:	89 83       	std	Y+1, r24	; 0x01
    232a:	02 c0       	rjmp	.+4      	; 0x2330 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    232c:	8a 81       	ldd	r24, Y+2	; 0x02
    232e:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    2330:	89 81       	ldd	r24, Y+1	; 0x01
} 
    2332:	0f 90       	pop	r0
    2334:	0f 90       	pop	r0
    2336:	0f 90       	pop	r0
    2338:	0f 90       	pop	r0
    233a:	cf 91       	pop	r28
    233c:	df 91       	pop	r29
    233e:	08 95       	ret

00002340 <TIMER1_counter>:

uint8 key;
uint8 second;

void TIMER1_counter()
{
    2340:	df 93       	push	r29
    2342:	cf 93       	push	r28
    2344:	cd b7       	in	r28, 0x3d	; 61
    2346:	de b7       	in	r29, 0x3e	; 62
	second++;
    2348:	80 91 10 01 	lds	r24, 0x0110
    234c:	8f 5f       	subi	r24, 0xFF	; 255
    234e:	80 93 10 01 	sts	0x0110, r24
}
    2352:	cf 91       	pop	r28
    2354:	df 91       	pop	r29
    2356:	08 95       	ret

00002358 <delay>:
void delay(uint16 sec)
{
    2358:	df 93       	push	r29
    235a:	cf 93       	push	r28
    235c:	cd b7       	in	r28, 0x3d	; 61
    235e:	de b7       	in	r29, 0x3e	; 62
    2360:	2d 97       	sbiw	r28, 0x0d	; 13
    2362:	0f b6       	in	r0, 0x3f	; 63
    2364:	f8 94       	cli
    2366:	de bf       	out	0x3e, r29	; 62
    2368:	0f be       	out	0x3f, r0	; 63
    236a:	cd bf       	out	0x3d, r28	; 61
    236c:	98 87       	std	Y+8, r25	; 0x08
    236e:	8f 83       	std	Y+7, r24	; 0x07
	second=0;
    2370:	10 92 10 01 	sts	0x0110, r1
	Timer1_ConfigType timer1_config={0, 15624, PRESCALER_64, COMPARE};
    2374:	ce 01       	movw	r24, r28
    2376:	01 96       	adiw	r24, 0x01	; 1
    2378:	9a 87       	std	Y+10, r25	; 0x0a
    237a:	89 87       	std	Y+9, r24	; 0x09
    237c:	e0 ef       	ldi	r30, 0xF0	; 240
    237e:	f0 e0       	ldi	r31, 0x00	; 0
    2380:	fc 87       	std	Y+12, r31	; 0x0c
    2382:	eb 87       	std	Y+11, r30	; 0x0b
    2384:	f6 e0       	ldi	r31, 0x06	; 6
    2386:	fd 87       	std	Y+13, r31	; 0x0d
    2388:	eb 85       	ldd	r30, Y+11	; 0x0b
    238a:	fc 85       	ldd	r31, Y+12	; 0x0c
    238c:	00 80       	ld	r0, Z
    238e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2390:	9c 85       	ldd	r25, Y+12	; 0x0c
    2392:	01 96       	adiw	r24, 0x01	; 1
    2394:	9c 87       	std	Y+12, r25	; 0x0c
    2396:	8b 87       	std	Y+11, r24	; 0x0b
    2398:	e9 85       	ldd	r30, Y+9	; 0x09
    239a:	fa 85       	ldd	r31, Y+10	; 0x0a
    239c:	00 82       	st	Z, r0
    239e:	89 85       	ldd	r24, Y+9	; 0x09
    23a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    23a2:	01 96       	adiw	r24, 0x01	; 1
    23a4:	9a 87       	std	Y+10, r25	; 0x0a
    23a6:	89 87       	std	Y+9, r24	; 0x09
    23a8:	9d 85       	ldd	r25, Y+13	; 0x0d
    23aa:	91 50       	subi	r25, 0x01	; 1
    23ac:	9d 87       	std	Y+13, r25	; 0x0d
    23ae:	ed 85       	ldd	r30, Y+13	; 0x0d
    23b0:	ee 23       	and	r30, r30
    23b2:	51 f7       	brne	.-44     	; 0x2388 <delay+0x30>
	Timer1_init(&timer1_config);
    23b4:	ce 01       	movw	r24, r28
    23b6:	01 96       	adiw	r24, 0x01	; 1
    23b8:	0e 94 b6 0a 	call	0x156c	; 0x156c <Timer1_init>
	Timer1_setCallBack(TIMER1_counter);
    23bc:	80 ea       	ldi	r24, 0xA0	; 160
    23be:	91 e1       	ldi	r25, 0x11	; 17
    23c0:	0e 94 33 0b 	call	0x1666	; 0x1666 <Timer1_setCallBack>
	while(second!=sec);
    23c4:	80 91 10 01 	lds	r24, 0x0110
    23c8:	28 2f       	mov	r18, r24
    23ca:	30 e0       	ldi	r19, 0x00	; 0
    23cc:	8f 81       	ldd	r24, Y+7	; 0x07
    23ce:	98 85       	ldd	r25, Y+8	; 0x08
    23d0:	28 17       	cp	r18, r24
    23d2:	39 07       	cpc	r19, r25
    23d4:	b9 f7       	brne	.-18     	; 0x23c4 <delay+0x6c>
}
    23d6:	2d 96       	adiw	r28, 0x0d	; 13
    23d8:	0f b6       	in	r0, 0x3f	; 63
    23da:	f8 94       	cli
    23dc:	de bf       	out	0x3e, r29	; 62
    23de:	0f be       	out	0x3f, r0	; 63
    23e0:	cd bf       	out	0x3d, r28	; 61
    23e2:	cf 91       	pop	r28
    23e4:	df 91       	pop	r29
    23e6:	08 95       	ret

000023e8 <enter>:
void enter()
{
    23e8:	df 93       	push	r29
    23ea:	cf 93       	push	r28
    23ec:	cd b7       	in	r28, 0x3d	; 61
    23ee:	de b7       	in	r29, 0x3e	; 62
    23f0:	04 c0       	rjmp	.+8      	; 0x23fa <enter+0x12>
	while (key != '='){
		key = KEYPAD_getPressedKey();
    23f2:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <KEYPAD_getPressedKey>
    23f6:	80 93 11 01 	sts	0x0111, r24
	Timer1_setCallBack(TIMER1_counter);
	while(second!=sec);
}
void enter()
{
	while (key != '='){
    23fa:	80 91 11 01 	lds	r24, 0x0111
    23fe:	8d 33       	cpi	r24, 0x3D	; 61
    2400:	c1 f7       	brne	.-16     	; 0x23f2 <enter+0xa>
		key = KEYPAD_getPressedKey();
	}

}
    2402:	cf 91       	pop	r28
    2404:	df 91       	pop	r29
    2406:	08 95       	ret

00002408 <step_1>:
void step_1()
{
    2408:	df 93       	push	r29
    240a:	cf 93       	push	r28
    240c:	00 d0       	rcall	.+0      	; 0x240e <step_1+0x6>
    240e:	cd b7       	in	r28, 0x3d	; 61
    2410:	de b7       	in	r29, 0x3e	; 62

	uint8 i;
	uint8 step1_result;
	clear_screen();
    2412:	0e 94 46 0a 	call	0x148c	; 0x148c <clear_screen>
	display_stringRowColumn(0, 0, (uint8 *)"plz enter pass:");
    2416:	20 e6       	ldi	r18, 0x60	; 96
    2418:	30 e0       	ldi	r19, 0x00	; 0
    241a:	80 e0       	ldi	r24, 0x00	; 0
    241c:	60 e0       	ldi	r22, 0x00	; 0
    241e:	a9 01       	movw	r20, r18
    2420:	0e 94 0a 0a 	call	0x1414	; 0x1414 <display_stringRowColumn>
	move_cursor(1, 0);
    2424:	81 e0       	ldi	r24, 0x01	; 1
    2426:	60 e0       	ldi	r22, 0x00	; 0
    2428:	0e 94 c8 09 	call	0x1390	; 0x1390 <move_cursor>
	// First password entry
	for (i = 0; i < SIZE_PASSWORD; i++) {
    242c:	1a 82       	std	Y+2, r1	; 0x02
    242e:	17 c0       	rjmp	.+46     	; 0x245e <step_1+0x56>
		key = KEYPAD_getPressedKey();
    2430:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <KEYPAD_getPressedKey>
    2434:	80 93 11 01 	sts	0x0111, r24
		if (key >= 0 && key <= 9) {
    2438:	80 91 11 01 	lds	r24, 0x0111
    243c:	8a 30       	cpi	r24, 0x0A	; 10
    243e:	60 f4       	brcc	.+24     	; 0x2458 <step_1+0x50>
			array1[i] = key;
    2440:	8a 81       	ldd	r24, Y+2	; 0x02
    2442:	88 2f       	mov	r24, r24
    2444:	90 e0       	ldi	r25, 0x00	; 0
    2446:	20 91 11 01 	lds	r18, 0x0111
    244a:	fc 01       	movw	r30, r24
    244c:	e0 50       	subi	r30, 0x00	; 0
    244e:	ff 4f       	sbci	r31, 0xFF	; 255
    2450:	20 83       	st	Z, r18
			display_character('*');
    2452:	8a e2       	ldi	r24, 0x2A	; 42
    2454:	0e 94 b0 07 	call	0xf60	; 0xf60 <display_character>
	uint8 step1_result;
	clear_screen();
	display_stringRowColumn(0, 0, (uint8 *)"plz enter pass:");
	move_cursor(1, 0);
	// First password entry
	for (i = 0; i < SIZE_PASSWORD; i++) {
    2458:	8a 81       	ldd	r24, Y+2	; 0x02
    245a:	8f 5f       	subi	r24, 0xFF	; 255
    245c:	8a 83       	std	Y+2, r24	; 0x02
    245e:	8a 81       	ldd	r24, Y+2	; 0x02
    2460:	85 30       	cpi	r24, 0x05	; 5
    2462:	30 f3       	brcs	.-52     	; 0x2430 <step_1+0x28>
			array1[i] = key;
			display_character('*');
		}
	}

	enter();
    2464:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <enter>
	send_password(array1);
    2468:	80 e0       	ldi	r24, 0x00	; 0
    246a:	91 e0       	ldi	r25, 0x01	; 1
    246c:	0e 94 5d 13 	call	0x26ba	; 0x26ba <send_password>
	clear_screen();
    2470:	0e 94 46 0a 	call	0x148c	; 0x148c <clear_screen>
	display_stringRowColumn(0, 0, (uint8 *)"plz re-enter ");
    2474:	20 e7       	ldi	r18, 0x70	; 112
    2476:	30 e0       	ldi	r19, 0x00	; 0
    2478:	80 e0       	ldi	r24, 0x00	; 0
    247a:	60 e0       	ldi	r22, 0x00	; 0
    247c:	a9 01       	movw	r20, r18
    247e:	0e 94 0a 0a 	call	0x1414	; 0x1414 <display_stringRowColumn>
	move_cursor(1, 0);
    2482:	81 e0       	ldi	r24, 0x01	; 1
    2484:	60 e0       	ldi	r22, 0x00	; 0
    2486:	0e 94 c8 09 	call	0x1390	; 0x1390 <move_cursor>
	// Second password entry
	for (i = 0; i < SIZE_PASSWORD; i++){
    248a:	1a 82       	std	Y+2, r1	; 0x02
    248c:	17 c0       	rjmp	.+46     	; 0x24bc <step_1+0xb4>
		key = KEYPAD_getPressedKey();
    248e:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <KEYPAD_getPressedKey>
    2492:	80 93 11 01 	sts	0x0111, r24
		if (key >= 0 && key <= 9) {
    2496:	80 91 11 01 	lds	r24, 0x0111
    249a:	8a 30       	cpi	r24, 0x0A	; 10
    249c:	60 f4       	brcc	.+24     	; 0x24b6 <step_1+0xae>
			array2[i] = key;
    249e:	8a 81       	ldd	r24, Y+2	; 0x02
    24a0:	88 2f       	mov	r24, r24
    24a2:	90 e0       	ldi	r25, 0x00	; 0
    24a4:	20 91 11 01 	lds	r18, 0x0111
    24a8:	fc 01       	movw	r30, r24
    24aa:	eb 5f       	subi	r30, 0xFB	; 251
    24ac:	fe 4f       	sbci	r31, 0xFE	; 254
    24ae:	20 83       	st	Z, r18
			display_character('*');
    24b0:	8a e2       	ldi	r24, 0x2A	; 42
    24b2:	0e 94 b0 07 	call	0xf60	; 0xf60 <display_character>
	send_password(array1);
	clear_screen();
	display_stringRowColumn(0, 0, (uint8 *)"plz re-enter ");
	move_cursor(1, 0);
	// Second password entry
	for (i = 0; i < SIZE_PASSWORD; i++){
    24b6:	8a 81       	ldd	r24, Y+2	; 0x02
    24b8:	8f 5f       	subi	r24, 0xFF	; 255
    24ba:	8a 83       	std	Y+2, r24	; 0x02
    24bc:	8a 81       	ldd	r24, Y+2	; 0x02
    24be:	85 30       	cpi	r24, 0x05	; 5
    24c0:	30 f3       	brcs	.-52     	; 0x248e <step_1+0x86>
			array2[i] = key;
			display_character('*');
		}

	}
	enter();
    24c2:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <enter>
	send_password(array2);
    24c6:	85 e0       	ldi	r24, 0x05	; 5
    24c8:	91 e0       	ldi	r25, 0x01	; 1
    24ca:	0e 94 5d 13 	call	0x26ba	; 0x26ba <send_password>
	step1_result = UART_RecieveByte();
    24ce:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <UART_RecieveByte>
    24d2:	89 83       	std	Y+1, r24	; 0x01
	if (step1_result == WRONG_PASSWORD) {
    24d4:	89 81       	ldd	r24, Y+1	; 0x01
    24d6:	88 23       	and	r24, r24
    24d8:	61 f4       	brne	.+24     	; 0x24f2 <step_1+0xea>
		clear_screen();
    24da:	0e 94 46 0a 	call	0x148c	; 0x148c <clear_screen>
		display_stringRowColumn(0, 0, (uint8 *)"Wrong password");
    24de:	2e e7       	ldi	r18, 0x7E	; 126
    24e0:	30 e0       	ldi	r19, 0x00	; 0
    24e2:	80 e0       	ldi	r24, 0x00	; 0
    24e4:	60 e0       	ldi	r22, 0x00	; 0
    24e6:	a9 01       	movw	r20, r18
    24e8:	0e 94 0a 0a 	call	0x1414	; 0x1414 <display_stringRowColumn>
		step_1();
    24ec:	0e 94 04 12 	call	0x2408	; 0x2408 <step_1>
    24f0:	05 c0       	rjmp	.+10     	; 0x24fc <step_1+0xf4>
	} else if (step1_result == RIGHT_PASSWORD) {
    24f2:	89 81       	ldd	r24, Y+1	; 0x01
    24f4:	81 30       	cpi	r24, 0x01	; 1
    24f6:	11 f4       	brne	.+4      	; 0x24fc <step_1+0xf4>
		step_2();
    24f8:	0e 94 83 12 	call	0x2506	; 0x2506 <step_2>
	}
}
    24fc:	0f 90       	pop	r0
    24fe:	0f 90       	pop	r0
    2500:	cf 91       	pop	r28
    2502:	df 91       	pop	r29
    2504:	08 95       	ret

00002506 <step_2>:

void step_2() {
    2506:	df 93       	push	r29
    2508:	cf 93       	push	r28
    250a:	cd b7       	in	r28, 0x3d	; 61
    250c:	de b7       	in	r29, 0x3e	; 62
	clear_screen();
    250e:	0e 94 46 0a 	call	0x148c	; 0x148c <clear_screen>
	display_stringRowColumn(0, 0, (uint8 *)"+:open door");
    2512:	2d e8       	ldi	r18, 0x8D	; 141
    2514:	30 e0       	ldi	r19, 0x00	; 0
    2516:	80 e0       	ldi	r24, 0x00	; 0
    2518:	60 e0       	ldi	r22, 0x00	; 0
    251a:	a9 01       	movw	r20, r18
    251c:	0e 94 0a 0a 	call	0x1414	; 0x1414 <display_stringRowColumn>
	display_stringRowColumn(1, 0, (uint8 *)"-:change pass");
    2520:	29 e9       	ldi	r18, 0x99	; 153
    2522:	30 e0       	ldi	r19, 0x00	; 0
    2524:	81 e0       	ldi	r24, 0x01	; 1
    2526:	60 e0       	ldi	r22, 0x00	; 0
    2528:	a9 01       	movw	r20, r18
    252a:	0e 94 0a 0a 	call	0x1414	; 0x1414 <display_stringRowColumn>
    252e:	04 c0       	rjmp	.+8      	; 0x2538 <step_2+0x32>
	while ((key != '+') && (key != '-')) {
		key = KEYPAD_getPressedKey();
    2530:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <KEYPAD_getPressedKey>
    2534:	80 93 11 01 	sts	0x0111, r24

void step_2() {
	clear_screen();
	display_stringRowColumn(0, 0, (uint8 *)"+:open door");
	display_stringRowColumn(1, 0, (uint8 *)"-:change pass");
	while ((key != '+') && (key != '-')) {
    2538:	80 91 11 01 	lds	r24, 0x0111
    253c:	8b 32       	cpi	r24, 0x2B	; 43
    253e:	21 f0       	breq	.+8      	; 0x2548 <step_2+0x42>
    2540:	80 91 11 01 	lds	r24, 0x0111
    2544:	8d 32       	cpi	r24, 0x2D	; 45
    2546:	a1 f7       	brne	.-24     	; 0x2530 <step_2+0x2a>
		key = KEYPAD_getPressedKey();
	}
	if (key == '+') {
    2548:	80 91 11 01 	lds	r24, 0x0111
    254c:	8b 32       	cpi	r24, 0x2B	; 43
    254e:	41 f4       	brne	.+16     	; 0x2560 <step_2+0x5a>
		UART_SendByte('o');
    2550:	8f e6       	ldi	r24, 0x6F	; 111
    2552:	0e 94 bf 0b 	call	0x177e	; 0x177e <UART_SendByte>
		check_password();
    2556:	0e 94 be 12 	call	0x257c	; 0x257c <check_password>
		open_door();
    255a:	0e 94 22 13 	call	0x2644	; 0x2644 <open_door>
    255e:	0b c0       	rjmp	.+22     	; 0x2576 <step_2+0x70>
	}
	else if(key=='-')
    2560:	80 91 11 01 	lds	r24, 0x0111
    2564:	8d 32       	cpi	r24, 0x2D	; 45
    2566:	39 f4       	brne	.+14     	; 0x2576 <step_2+0x70>
	{
		UART_SendByte('p');
    2568:	80 e7       	ldi	r24, 0x70	; 112
    256a:	0e 94 bf 0b 	call	0x177e	; 0x177e <UART_SendByte>
		check_password();
    256e:	0e 94 be 12 	call	0x257c	; 0x257c <check_password>
		step_1();
    2572:	0e 94 04 12 	call	0x2408	; 0x2408 <step_1>
	}
}
    2576:	cf 91       	pop	r28
    2578:	df 91       	pop	r29
    257a:	08 95       	ret

0000257c <check_password>:
void check_password()
{
    257c:	df 93       	push	r29
    257e:	cf 93       	push	r28
    2580:	00 d0       	rcall	.+0      	; 0x2582 <check_password+0x6>
    2582:	cd b7       	in	r28, 0x3d	; 61
    2584:	de b7       	in	r29, 0x3e	; 62
	uint8 i;
	clear_screen();
    2586:	0e 94 46 0a 	call	0x148c	; 0x148c <clear_screen>
	display_stringRowColumn(0, 0, (uint8 *)"plz enter pass ");
    258a:	27 ea       	ldi	r18, 0xA7	; 167
    258c:	30 e0       	ldi	r19, 0x00	; 0
    258e:	80 e0       	ldi	r24, 0x00	; 0
    2590:	60 e0       	ldi	r22, 0x00	; 0
    2592:	a9 01       	movw	r20, r18
    2594:	0e 94 0a 0a 	call	0x1414	; 0x1414 <display_stringRowColumn>
	display_stringRowColumn(1, 0, (uint8 *)"to confirm:");
    2598:	27 eb       	ldi	r18, 0xB7	; 183
    259a:	30 e0       	ldi	r19, 0x00	; 0
    259c:	81 e0       	ldi	r24, 0x01	; 1
    259e:	60 e0       	ldi	r22, 0x00	; 0
    25a0:	a9 01       	movw	r20, r18
    25a2:	0e 94 0a 0a 	call	0x1414	; 0x1414 <display_stringRowColumn>


	// First password entry
	for (i = 0; i < SIZE_PASSWORD; i++) {
    25a6:	1a 82       	std	Y+2, r1	; 0x02
    25a8:	17 c0       	rjmp	.+46     	; 0x25d8 <check_password+0x5c>
		key = KEYPAD_getPressedKey();
    25aa:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <KEYPAD_getPressedKey>
    25ae:	80 93 11 01 	sts	0x0111, r24
		if (key >= 0 && key <= 9) {
    25b2:	80 91 11 01 	lds	r24, 0x0111
    25b6:	8a 30       	cpi	r24, 0x0A	; 10
    25b8:	60 f4       	brcc	.+24     	; 0x25d2 <check_password+0x56>
			array3[i] = key;
    25ba:	8a 81       	ldd	r24, Y+2	; 0x02
    25bc:	88 2f       	mov	r24, r24
    25be:	90 e0       	ldi	r25, 0x00	; 0
    25c0:	20 91 11 01 	lds	r18, 0x0111
    25c4:	fc 01       	movw	r30, r24
    25c6:	e6 5f       	subi	r30, 0xF6	; 246
    25c8:	fe 4f       	sbci	r31, 0xFE	; 254
    25ca:	20 83       	st	Z, r18
			display_character('*');
    25cc:	8a e2       	ldi	r24, 0x2A	; 42
    25ce:	0e 94 b0 07 	call	0xf60	; 0xf60 <display_character>
	display_stringRowColumn(0, 0, (uint8 *)"plz enter pass ");
	display_stringRowColumn(1, 0, (uint8 *)"to confirm:");


	// First password entry
	for (i = 0; i < SIZE_PASSWORD; i++) {
    25d2:	8a 81       	ldd	r24, Y+2	; 0x02
    25d4:	8f 5f       	subi	r24, 0xFF	; 255
    25d6:	8a 83       	std	Y+2, r24	; 0x02
    25d8:	8a 81       	ldd	r24, Y+2	; 0x02
    25da:	85 30       	cpi	r24, 0x05	; 5
    25dc:	30 f3       	brcs	.-52     	; 0x25aa <check_password+0x2e>
			array3[i] = key;
			display_character('*');
		}

	}
	enter();
    25de:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <enter>
	send_password(array3);
    25e2:	8a e0       	ldi	r24, 0x0A	; 10
    25e4:	91 e0       	ldi	r25, 0x01	; 1
    25e6:	0e 94 5d 13 	call	0x26ba	; 0x26ba <send_password>
	uint8 step2_result;

	step2_result= UART_RecieveByte();
    25ea:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <UART_RecieveByte>
    25ee:	89 83       	std	Y+1, r24	; 0x01
	if(step2_result==CONFIRMED)
    25f0:	89 81       	ldd	r24, Y+1	; 0x01
    25f2:	81 3f       	cpi	r24, 0xF1	; 241
    25f4:	19 f4       	brne	.+6      	; 0x25fc <check_password+0x80>
	{
		error=0;
    25f6:	10 92 0f 01 	sts	0x010F, r1
    25fa:	1f c0       	rjmp	.+62     	; 0x263a <check_password+0xbe>
	}
	else if(step2_result==NOT_CONFIRMED)
    25fc:	89 81       	ldd	r24, Y+1	; 0x01
    25fe:	82 3f       	cpi	r24, 0xF2	; 242
    2600:	e1 f4       	brne	.+56     	; 0x263a <check_password+0xbe>
	{
		error++;
    2602:	80 91 0f 01 	lds	r24, 0x010F
    2606:	8f 5f       	subi	r24, 0xFF	; 255
    2608:	80 93 0f 01 	sts	0x010F, r24
		if(error==3)
    260c:	80 91 0f 01 	lds	r24, 0x010F
    2610:	83 30       	cpi	r24, 0x03	; 3
    2612:	89 f4       	brne	.+34     	; 0x2636 <check_password+0xba>
		{
			clear_screen();
    2614:	0e 94 46 0a 	call	0x148c	; 0x148c <clear_screen>
			display_stringRowColumn(0, 0, (uint8 *)"ERROR");
    2618:	23 ec       	ldi	r18, 0xC3	; 195
    261a:	30 e0       	ldi	r19, 0x00	; 0
    261c:	80 e0       	ldi	r24, 0x00	; 0
    261e:	60 e0       	ldi	r22, 0x00	; 0
    2620:	a9 01       	movw	r20, r18
    2622:	0e 94 0a 0a 	call	0x1414	; 0x1414 <display_stringRowColumn>
			delay(60);
    2626:	8c e3       	ldi	r24, 0x3C	; 60
    2628:	90 e0       	ldi	r25, 0x00	; 0
    262a:	0e 94 ac 11 	call	0x2358	; 0x2358 <delay>
			error=0;
    262e:	10 92 0f 01 	sts	0x010F, r1
			step_2();
    2632:	0e 94 83 12 	call	0x2506	; 0x2506 <step_2>
		}
		check_password();
    2636:	0e 94 be 12 	call	0x257c	; 0x257c <check_password>
	}

}
    263a:	0f 90       	pop	r0
    263c:	0f 90       	pop	r0
    263e:	cf 91       	pop	r28
    2640:	df 91       	pop	r29
    2642:	08 95       	ret

00002644 <open_door>:
void open_door()
{
    2644:	df 93       	push	r29
    2646:	cf 93       	push	r28
    2648:	cd b7       	in	r28, 0x3d	; 61
    264a:	de b7       	in	r29, 0x3e	; 62


	clear_screen();
    264c:	0e 94 46 0a 	call	0x148c	; 0x148c <clear_screen>
	display_stringRowColumn(0, 0, (uint8 *)"DOOR IS");
    2650:	29 ec       	ldi	r18, 0xC9	; 201
    2652:	30 e0       	ldi	r19, 0x00	; 0
    2654:	80 e0       	ldi	r24, 0x00	; 0
    2656:	60 e0       	ldi	r22, 0x00	; 0
    2658:	a9 01       	movw	r20, r18
    265a:	0e 94 0a 0a 	call	0x1414	; 0x1414 <display_stringRowColumn>
	display_stringRowColumn(1, 0, (uint8 *)"UNLOCKING");
    265e:	21 ed       	ldi	r18, 0xD1	; 209
    2660:	30 e0       	ldi	r19, 0x00	; 0
    2662:	81 e0       	ldi	r24, 0x01	; 1
    2664:	60 e0       	ldi	r22, 0x00	; 0
    2666:	a9 01       	movw	r20, r18
    2668:	0e 94 0a 0a 	call	0x1414	; 0x1414 <display_stringRowColumn>
	delay(15);
    266c:	8f e0       	ldi	r24, 0x0F	; 15
    266e:	90 e0       	ldi	r25, 0x00	; 0
    2670:	0e 94 ac 11 	call	0x2358	; 0x2358 <delay>
	clear_screen();
    2674:	0e 94 46 0a 	call	0x148c	; 0x148c <clear_screen>
	display_string("HOLD");
    2678:	8b ed       	ldi	r24, 0xDB	; 219
    267a:	90 e0       	ldi	r25, 0x00	; 0
    267c:	0e 94 9f 09 	call	0x133e	; 0x133e <display_string>

	delay(3);
    2680:	83 e0       	ldi	r24, 0x03	; 3
    2682:	90 e0       	ldi	r25, 0x00	; 0
    2684:	0e 94 ac 11 	call	0x2358	; 0x2358 <delay>
	clear_screen();
    2688:	0e 94 46 0a 	call	0x148c	; 0x148c <clear_screen>
	display_stringRowColumn(0, 0, (uint8 *)"DOOR IS");
    268c:	29 ec       	ldi	r18, 0xC9	; 201
    268e:	30 e0       	ldi	r19, 0x00	; 0
    2690:	80 e0       	ldi	r24, 0x00	; 0
    2692:	60 e0       	ldi	r22, 0x00	; 0
    2694:	a9 01       	movw	r20, r18
    2696:	0e 94 0a 0a 	call	0x1414	; 0x1414 <display_stringRowColumn>
	display_stringRowColumn(1, 0, (uint8 *)"LOCKING");
    269a:	20 ee       	ldi	r18, 0xE0	; 224
    269c:	30 e0       	ldi	r19, 0x00	; 0
    269e:	81 e0       	ldi	r24, 0x01	; 1
    26a0:	60 e0       	ldi	r22, 0x00	; 0
    26a2:	a9 01       	movw	r20, r18
    26a4:	0e 94 0a 0a 	call	0x1414	; 0x1414 <display_stringRowColumn>

	delay(15);
    26a8:	8f e0       	ldi	r24, 0x0F	; 15
    26aa:	90 e0       	ldi	r25, 0x00	; 0
    26ac:	0e 94 ac 11 	call	0x2358	; 0x2358 <delay>
	step_2();
    26b0:	0e 94 83 12 	call	0x2506	; 0x2506 <step_2>

}
    26b4:	cf 91       	pop	r28
    26b6:	df 91       	pop	r29
    26b8:	08 95       	ret

000026ba <send_password>:

void send_password(uint8 *password) {
    26ba:	df 93       	push	r29
    26bc:	cf 93       	push	r28
    26be:	00 d0       	rcall	.+0      	; 0x26c0 <send_password+0x6>
    26c0:	00 d0       	rcall	.+0      	; 0x26c2 <send_password+0x8>
    26c2:	cd b7       	in	r28, 0x3d	; 61
    26c4:	de b7       	in	r29, 0x3e	; 62
    26c6:	9c 83       	std	Y+4, r25	; 0x04
    26c8:	8b 83       	std	Y+3, r24	; 0x03
	for (int i = 0; i < SIZE_PASSWORD; i++) {
    26ca:	1a 82       	std	Y+2, r1	; 0x02
    26cc:	19 82       	std	Y+1, r1	; 0x01
    26ce:	0f c0       	rjmp	.+30     	; 0x26ee <send_password+0x34>
		UART_SendByte(password[i]);
    26d0:	29 81       	ldd	r18, Y+1	; 0x01
    26d2:	3a 81       	ldd	r19, Y+2	; 0x02
    26d4:	8b 81       	ldd	r24, Y+3	; 0x03
    26d6:	9c 81       	ldd	r25, Y+4	; 0x04
    26d8:	fc 01       	movw	r30, r24
    26da:	e2 0f       	add	r30, r18
    26dc:	f3 1f       	adc	r31, r19
    26de:	80 81       	ld	r24, Z
    26e0:	0e 94 bf 0b 	call	0x177e	; 0x177e <UART_SendByte>
	step_2();

}

void send_password(uint8 *password) {
	for (int i = 0; i < SIZE_PASSWORD; i++) {
    26e4:	89 81       	ldd	r24, Y+1	; 0x01
    26e6:	9a 81       	ldd	r25, Y+2	; 0x02
    26e8:	01 96       	adiw	r24, 0x01	; 1
    26ea:	9a 83       	std	Y+2, r25	; 0x02
    26ec:	89 83       	std	Y+1, r24	; 0x01
    26ee:	89 81       	ldd	r24, Y+1	; 0x01
    26f0:	9a 81       	ldd	r25, Y+2	; 0x02
    26f2:	85 30       	cpi	r24, 0x05	; 5
    26f4:	91 05       	cpc	r25, r1
    26f6:	64 f3       	brlt	.-40     	; 0x26d0 <send_password+0x16>
		UART_SendByte(password[i]);
	}
}
    26f8:	0f 90       	pop	r0
    26fa:	0f 90       	pop	r0
    26fc:	0f 90       	pop	r0
    26fe:	0f 90       	pop	r0
    2700:	cf 91       	pop	r28
    2702:	df 91       	pop	r29
    2704:	08 95       	ret

00002706 <main>:

int main()
{
    2706:	df 93       	push	r29
    2708:	cf 93       	push	r28
    270a:	cd b7       	in	r28, 0x3d	; 61
    270c:	de b7       	in	r29, 0x3e	; 62
    270e:	2c 97       	sbiw	r28, 0x0c	; 12
    2710:	0f b6       	in	r0, 0x3f	; 63
    2712:	f8 94       	cli
    2714:	de bf       	out	0x3e, r29	; 62
    2716:	0f be       	out	0x3f, r0	; 63
    2718:	cd bf       	out	0x3d, r28	; 61
	LCD_init();
    271a:	0e 94 a3 05 	call	0xb46	; 0xb46 <LCD_init>
	UART_ConfigType uart_config = {BIT_DATA_8, NONE, STOP_BIT_1, 9600};
    271e:	ce 01       	movw	r24, r28
    2720:	01 96       	adiw	r24, 0x01	; 1
    2722:	99 87       	std	Y+9, r25	; 0x09
    2724:	88 87       	std	Y+8, r24	; 0x08
    2726:	e6 ef       	ldi	r30, 0xF6	; 246
    2728:	f0 e0       	ldi	r31, 0x00	; 0
    272a:	fb 87       	std	Y+11, r31	; 0x0b
    272c:	ea 87       	std	Y+10, r30	; 0x0a
    272e:	f7 e0       	ldi	r31, 0x07	; 7
    2730:	fc 87       	std	Y+12, r31	; 0x0c
    2732:	ea 85       	ldd	r30, Y+10	; 0x0a
    2734:	fb 85       	ldd	r31, Y+11	; 0x0b
    2736:	00 80       	ld	r0, Z
    2738:	8a 85       	ldd	r24, Y+10	; 0x0a
    273a:	9b 85       	ldd	r25, Y+11	; 0x0b
    273c:	01 96       	adiw	r24, 0x01	; 1
    273e:	9b 87       	std	Y+11, r25	; 0x0b
    2740:	8a 87       	std	Y+10, r24	; 0x0a
    2742:	e8 85       	ldd	r30, Y+8	; 0x08
    2744:	f9 85       	ldd	r31, Y+9	; 0x09
    2746:	00 82       	st	Z, r0
    2748:	88 85       	ldd	r24, Y+8	; 0x08
    274a:	99 85       	ldd	r25, Y+9	; 0x09
    274c:	01 96       	adiw	r24, 0x01	; 1
    274e:	99 87       	std	Y+9, r25	; 0x09
    2750:	88 87       	std	Y+8, r24	; 0x08
    2752:	9c 85       	ldd	r25, Y+12	; 0x0c
    2754:	91 50       	subi	r25, 0x01	; 1
    2756:	9c 87       	std	Y+12, r25	; 0x0c
    2758:	ec 85       	ldd	r30, Y+12	; 0x0c
    275a:	ee 23       	and	r30, r30
    275c:	51 f7       	brne	.-44     	; 0x2732 <main+0x2c>
	UART_init(&uart_config);
    275e:	ce 01       	movw	r24, r28
    2760:	01 96       	adiw	r24, 0x01	; 1
    2762:	0e 94 45 0b 	call	0x168a	; 0x168a <UART_init>
	step_1();
    2766:	0e 94 04 12 	call	0x2408	; 0x2408 <step_1>
    276a:	ff cf       	rjmp	.-2      	; 0x276a <main+0x64>

0000276c <__udivmodsi4>:
    276c:	a1 e2       	ldi	r26, 0x21	; 33
    276e:	1a 2e       	mov	r1, r26
    2770:	aa 1b       	sub	r26, r26
    2772:	bb 1b       	sub	r27, r27
    2774:	fd 01       	movw	r30, r26
    2776:	0d c0       	rjmp	.+26     	; 0x2792 <__udivmodsi4_ep>

00002778 <__udivmodsi4_loop>:
    2778:	aa 1f       	adc	r26, r26
    277a:	bb 1f       	adc	r27, r27
    277c:	ee 1f       	adc	r30, r30
    277e:	ff 1f       	adc	r31, r31
    2780:	a2 17       	cp	r26, r18
    2782:	b3 07       	cpc	r27, r19
    2784:	e4 07       	cpc	r30, r20
    2786:	f5 07       	cpc	r31, r21
    2788:	20 f0       	brcs	.+8      	; 0x2792 <__udivmodsi4_ep>
    278a:	a2 1b       	sub	r26, r18
    278c:	b3 0b       	sbc	r27, r19
    278e:	e4 0b       	sbc	r30, r20
    2790:	f5 0b       	sbc	r31, r21

00002792 <__udivmodsi4_ep>:
    2792:	66 1f       	adc	r22, r22
    2794:	77 1f       	adc	r23, r23
    2796:	88 1f       	adc	r24, r24
    2798:	99 1f       	adc	r25, r25
    279a:	1a 94       	dec	r1
    279c:	69 f7       	brne	.-38     	; 0x2778 <__udivmodsi4_loop>
    279e:	60 95       	com	r22
    27a0:	70 95       	com	r23
    27a2:	80 95       	com	r24
    27a4:	90 95       	com	r25
    27a6:	9b 01       	movw	r18, r22
    27a8:	ac 01       	movw	r20, r24
    27aa:	bd 01       	movw	r22, r26
    27ac:	cf 01       	movw	r24, r30
    27ae:	08 95       	ret

000027b0 <__prologue_saves__>:
    27b0:	2f 92       	push	r2
    27b2:	3f 92       	push	r3
    27b4:	4f 92       	push	r4
    27b6:	5f 92       	push	r5
    27b8:	6f 92       	push	r6
    27ba:	7f 92       	push	r7
    27bc:	8f 92       	push	r8
    27be:	9f 92       	push	r9
    27c0:	af 92       	push	r10
    27c2:	bf 92       	push	r11
    27c4:	cf 92       	push	r12
    27c6:	df 92       	push	r13
    27c8:	ef 92       	push	r14
    27ca:	ff 92       	push	r15
    27cc:	0f 93       	push	r16
    27ce:	1f 93       	push	r17
    27d0:	cf 93       	push	r28
    27d2:	df 93       	push	r29
    27d4:	cd b7       	in	r28, 0x3d	; 61
    27d6:	de b7       	in	r29, 0x3e	; 62
    27d8:	ca 1b       	sub	r28, r26
    27da:	db 0b       	sbc	r29, r27
    27dc:	0f b6       	in	r0, 0x3f	; 63
    27de:	f8 94       	cli
    27e0:	de bf       	out	0x3e, r29	; 62
    27e2:	0f be       	out	0x3f, r0	; 63
    27e4:	cd bf       	out	0x3d, r28	; 61
    27e6:	09 94       	ijmp

000027e8 <__epilogue_restores__>:
    27e8:	2a 88       	ldd	r2, Y+18	; 0x12
    27ea:	39 88       	ldd	r3, Y+17	; 0x11
    27ec:	48 88       	ldd	r4, Y+16	; 0x10
    27ee:	5f 84       	ldd	r5, Y+15	; 0x0f
    27f0:	6e 84       	ldd	r6, Y+14	; 0x0e
    27f2:	7d 84       	ldd	r7, Y+13	; 0x0d
    27f4:	8c 84       	ldd	r8, Y+12	; 0x0c
    27f6:	9b 84       	ldd	r9, Y+11	; 0x0b
    27f8:	aa 84       	ldd	r10, Y+10	; 0x0a
    27fa:	b9 84       	ldd	r11, Y+9	; 0x09
    27fc:	c8 84       	ldd	r12, Y+8	; 0x08
    27fe:	df 80       	ldd	r13, Y+7	; 0x07
    2800:	ee 80       	ldd	r14, Y+6	; 0x06
    2802:	fd 80       	ldd	r15, Y+5	; 0x05
    2804:	0c 81       	ldd	r16, Y+4	; 0x04
    2806:	1b 81       	ldd	r17, Y+3	; 0x03
    2808:	aa 81       	ldd	r26, Y+2	; 0x02
    280a:	b9 81       	ldd	r27, Y+1	; 0x01
    280c:	ce 0f       	add	r28, r30
    280e:	d1 1d       	adc	r29, r1
    2810:	0f b6       	in	r0, 0x3f	; 63
    2812:	f8 94       	cli
    2814:	de bf       	out	0x3e, r29	; 62
    2816:	0f be       	out	0x3f, r0	; 63
    2818:	cd bf       	out	0x3d, r28	; 61
    281a:	ed 01       	movw	r28, r26
    281c:	08 95       	ret

0000281e <itoa>:
    281e:	fb 01       	movw	r30, r22
    2820:	9f 01       	movw	r18, r30
    2822:	e8 94       	clt
    2824:	42 30       	cpi	r20, 0x02	; 2
    2826:	c4 f0       	brlt	.+48     	; 0x2858 <itoa+0x3a>
    2828:	45 32       	cpi	r20, 0x25	; 37
    282a:	b4 f4       	brge	.+44     	; 0x2858 <itoa+0x3a>
    282c:	4a 30       	cpi	r20, 0x0A	; 10
    282e:	29 f4       	brne	.+10     	; 0x283a <itoa+0x1c>
    2830:	97 fb       	bst	r25, 7
    2832:	1e f4       	brtc	.+6      	; 0x283a <itoa+0x1c>
    2834:	90 95       	com	r25
    2836:	81 95       	neg	r24
    2838:	9f 4f       	sbci	r25, 0xFF	; 255
    283a:	64 2f       	mov	r22, r20
    283c:	77 27       	eor	r23, r23
    283e:	0e 94 40 14 	call	0x2880	; 0x2880 <__udivmodhi4>
    2842:	80 5d       	subi	r24, 0xD0	; 208
    2844:	8a 33       	cpi	r24, 0x3A	; 58
    2846:	0c f0       	brlt	.+2      	; 0x284a <itoa+0x2c>
    2848:	89 5d       	subi	r24, 0xD9	; 217
    284a:	81 93       	st	Z+, r24
    284c:	cb 01       	movw	r24, r22
    284e:	00 97       	sbiw	r24, 0x00	; 0
    2850:	a1 f7       	brne	.-24     	; 0x283a <itoa+0x1c>
    2852:	16 f4       	brtc	.+4      	; 0x2858 <itoa+0x3a>
    2854:	5d e2       	ldi	r21, 0x2D	; 45
    2856:	51 93       	st	Z+, r21
    2858:	10 82       	st	Z, r1
    285a:	c9 01       	movw	r24, r18
    285c:	0c 94 30 14 	jmp	0x2860	; 0x2860 <strrev>

00002860 <strrev>:
    2860:	dc 01       	movw	r26, r24
    2862:	fc 01       	movw	r30, r24
    2864:	67 2f       	mov	r22, r23
    2866:	71 91       	ld	r23, Z+
    2868:	77 23       	and	r23, r23
    286a:	e1 f7       	brne	.-8      	; 0x2864 <strrev+0x4>
    286c:	32 97       	sbiw	r30, 0x02	; 2
    286e:	04 c0       	rjmp	.+8      	; 0x2878 <strrev+0x18>
    2870:	7c 91       	ld	r23, X
    2872:	6d 93       	st	X+, r22
    2874:	70 83       	st	Z, r23
    2876:	62 91       	ld	r22, -Z
    2878:	ae 17       	cp	r26, r30
    287a:	bf 07       	cpc	r27, r31
    287c:	c8 f3       	brcs	.-14     	; 0x2870 <strrev+0x10>
    287e:	08 95       	ret

00002880 <__udivmodhi4>:
    2880:	aa 1b       	sub	r26, r26
    2882:	bb 1b       	sub	r27, r27
    2884:	51 e1       	ldi	r21, 0x11	; 17
    2886:	07 c0       	rjmp	.+14     	; 0x2896 <__udivmodhi4_ep>

00002888 <__udivmodhi4_loop>:
    2888:	aa 1f       	adc	r26, r26
    288a:	bb 1f       	adc	r27, r27
    288c:	a6 17       	cp	r26, r22
    288e:	b7 07       	cpc	r27, r23
    2890:	10 f0       	brcs	.+4      	; 0x2896 <__udivmodhi4_ep>
    2892:	a6 1b       	sub	r26, r22
    2894:	b7 0b       	sbc	r27, r23

00002896 <__udivmodhi4_ep>:
    2896:	88 1f       	adc	r24, r24
    2898:	99 1f       	adc	r25, r25
    289a:	5a 95       	dec	r21
    289c:	a9 f7       	brne	.-22     	; 0x2888 <__udivmodhi4_loop>
    289e:	80 95       	com	r24
    28a0:	90 95       	com	r25
    28a2:	bc 01       	movw	r22, r24
    28a4:	cd 01       	movw	r24, r26
    28a6:	08 95       	ret

000028a8 <_exit>:
    28a8:	f8 94       	cli

000028aa <__stop_program>:
    28aa:	ff cf       	rjmp	.-2      	; 0x28aa <__stop_program>
