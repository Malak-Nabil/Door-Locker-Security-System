
MC2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001ff2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001c  00800060  00001ff2  00002086  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000013  0080007c  0080007c  000020a2  2**0
                  ALLOC
  3 .stab         000023a0  00000000  00000000  000020a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001275  00000000  00000000  00004444  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000056b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000057f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00005969  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000075b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000849d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000924c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  000093ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00009639  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00009e07  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 89 08 	jmp	0x1112	; 0x1112 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 56 08 	jmp	0x10ac	; 0x10ac <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 ef       	ldi	r30, 0xF2	; 242
      68:	ff e1       	ldi	r31, 0x1F	; 31
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 37       	cpi	r26, 0x7C	; 124
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ac e7       	ldi	r26, 0x7C	; 124
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 38       	cpi	r26, 0x8F	; 143
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <main>
      8a:	0c 94 f7 0f 	jmp	0x1fee	; 0x1fee <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 c0 0f 	jmp	0x1f80	; 0x1f80 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 dc 0f 	jmp	0x1fb8	; 0x1fb8 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 cc 0f 	jmp	0x1f98	; 0x1f98 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 e8 0f 	jmp	0x1fd0	; 0x1fd0 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 cc 0f 	jmp	0x1f98	; 0x1f98 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 e8 0f 	jmp	0x1fd0	; 0x1fd0 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 c0 0f 	jmp	0x1f80	; 0x1f80 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 dc 0f 	jmp	0x1fb8	; 0x1fb8 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 cc 0f 	jmp	0x1f98	; 0x1f98 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 e8 0f 	jmp	0x1fd0	; 0x1fd0 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 cc 0f 	jmp	0x1f98	; 0x1f98 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 e8 0f 	jmp	0x1fd0	; 0x1fd0 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 cc 0f 	jmp	0x1f98	; 0x1f98 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 e8 0f 	jmp	0x1fd0	; 0x1fd0 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 d0 0f 	jmp	0x1fa0	; 0x1fa0 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 ec 0f 	jmp	0x1fd8	; 0x1fd8 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <DcMotor_Init>:
#include"DC_MOTOR.h"
#include"gpio.h"
#include"PWM.h"

void DcMotor_Init(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(DC_PORT_ID, DC_PIN1_ID , PIN_OUTPUT); /* PB0 Output Pin */
     b4e:	81 e0       	ldi	r24, 0x01	; 1
     b50:	60 e0       	ldi	r22, 0x00	; 0
     b52:	41 e0       	ldi	r20, 0x01	; 1
     b54:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DC_PORT_ID, DC_PIN2_ID , PIN_OUTPUT); /* PB1 Output Pin */
     b58:	81 e0       	ldi	r24, 0x01	; 1
     b5a:	61 e0       	ldi	r22, 0x01	; 1
     b5c:	41 e0       	ldi	r20, 0x01	; 1
     b5e:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <GPIO_setupPinDirection>

	/*Stop at the DC-Motor at the beginning */
	DcMotor_Rotate(OFF,OFF_SPEED);
     b62:	80 e0       	ldi	r24, 0x00	; 0
     b64:	60 e0       	ldi	r22, 0x00	; 0
     b66:	0e 94 b8 05 	call	0xb70	; 0xb70 <DcMotor_Rotate>
}
     b6a:	cf 91       	pop	r28
     b6c:	df 91       	pop	r29
     b6e:	08 95       	ret

00000b70 <DcMotor_Rotate>:

void DcMotor_Rotate(DCMotor_State state,uint8 speed)
{
     b70:	df 93       	push	r29
     b72:	cf 93       	push	r28
     b74:	00 d0       	rcall	.+0      	; 0xb76 <DcMotor_Rotate+0x6>
     b76:	00 d0       	rcall	.+0      	; 0xb78 <DcMotor_Rotate+0x8>
     b78:	0f 92       	push	r0
     b7a:	cd b7       	in	r28, 0x3d	; 61
     b7c:	de b7       	in	r29, 0x3e	; 62
     b7e:	8a 83       	std	Y+2, r24	; 0x02
     b80:	6b 83       	std	Y+3, r22	; 0x03
	uint8 duty_cycle=speed*(255/100);
     b82:	8b 81       	ldd	r24, Y+3	; 0x03
     b84:	88 2f       	mov	r24, r24
     b86:	90 e0       	ldi	r25, 0x00	; 0
     b88:	88 0f       	add	r24, r24
     b8a:	99 1f       	adc	r25, r25
     b8c:	89 83       	std	Y+1, r24	; 0x01
	switch(state)
     b8e:	8a 81       	ldd	r24, Y+2	; 0x02
     b90:	28 2f       	mov	r18, r24
     b92:	30 e0       	ldi	r19, 0x00	; 0
     b94:	3d 83       	std	Y+5, r19	; 0x05
     b96:	2c 83       	std	Y+4, r18	; 0x04
     b98:	8c 81       	ldd	r24, Y+4	; 0x04
     b9a:	9d 81       	ldd	r25, Y+5	; 0x05
     b9c:	81 30       	cpi	r24, 0x01	; 1
     b9e:	91 05       	cpc	r25, r1
     ba0:	b9 f0       	breq	.+46     	; 0xbd0 <DcMotor_Rotate+0x60>
     ba2:	2c 81       	ldd	r18, Y+4	; 0x04
     ba4:	3d 81       	ldd	r19, Y+5	; 0x05
     ba6:	22 30       	cpi	r18, 0x02	; 2
     ba8:	31 05       	cpc	r19, r1
     baa:	01 f1       	breq	.+64     	; 0xbec <DcMotor_Rotate+0x7c>
     bac:	8c 81       	ldd	r24, Y+4	; 0x04
     bae:	9d 81       	ldd	r25, Y+5	; 0x05
     bb0:	00 97       	sbiw	r24, 0x00	; 0
     bb2:	49 f5       	brne	.+82     	; 0xc06 <DcMotor_Rotate+0x96>
	{
	case OFF:
		/* Stop the motor */
		GPIO_writePin(DC_PORT_ID, DC_PIN1_ID, LOGIC_LOW);
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	60 e0       	ldi	r22, 0x00	; 0
     bb8:	40 e0       	ldi	r20, 0x00	; 0
     bba:	0e 94 56 0b 	call	0x16ac	; 0x16ac <GPIO_writePin>
		GPIO_writePin(DC_PORT_ID, DC_PIN2_ID, LOGIC_LOW);
     bbe:	81 e0       	ldi	r24, 0x01	; 1
     bc0:	61 e0       	ldi	r22, 0x01	; 1
     bc2:	40 e0       	ldi	r20, 0x00	; 0
     bc4:	0e 94 56 0b 	call	0x16ac	; 0x16ac <GPIO_writePin>
		PWM_Timer0_Start(duty_cycle);
     bc8:	89 81       	ldd	r24, Y+1	; 0x01
     bca:	0e 94 3c 08 	call	0x1078	; 0x1078 <PWM_Timer0_Start>
     bce:	1b c0       	rjmp	.+54     	; 0xc06 <DcMotor_Rotate+0x96>
		break;
	case CW:
		/* Rotates the motor CW */
		GPIO_writePin(DC_PORT_ID, DC_PIN1_ID, LOGIC_LOW);
     bd0:	81 e0       	ldi	r24, 0x01	; 1
     bd2:	60 e0       	ldi	r22, 0x00	; 0
     bd4:	40 e0       	ldi	r20, 0x00	; 0
     bd6:	0e 94 56 0b 	call	0x16ac	; 0x16ac <GPIO_writePin>
		GPIO_writePin(DC_PORT_ID, DC_PIN2_ID, LOGIC_HIGH);
     bda:	81 e0       	ldi	r24, 0x01	; 1
     bdc:	61 e0       	ldi	r22, 0x01	; 1
     bde:	41 e0       	ldi	r20, 0x01	; 1
     be0:	0e 94 56 0b 	call	0x16ac	; 0x16ac <GPIO_writePin>
		PWM_Timer0_Start(duty_cycle);
     be4:	89 81       	ldd	r24, Y+1	; 0x01
     be6:	0e 94 3c 08 	call	0x1078	; 0x1078 <PWM_Timer0_Start>
     bea:	0d c0       	rjmp	.+26     	; 0xc06 <DcMotor_Rotate+0x96>
		break;
	case ACW:
		/* Rotates the motor A-CW */
		GPIO_writePin(DC_PORT_ID, DC_PIN1_ID, LOGIC_HIGH);
     bec:	81 e0       	ldi	r24, 0x01	; 1
     bee:	60 e0       	ldi	r22, 0x00	; 0
     bf0:	41 e0       	ldi	r20, 0x01	; 1
     bf2:	0e 94 56 0b 	call	0x16ac	; 0x16ac <GPIO_writePin>
		GPIO_writePin(DC_PORT_ID, DC_PIN2_ID, LOGIC_LOW);
     bf6:	81 e0       	ldi	r24, 0x01	; 1
     bf8:	61 e0       	ldi	r22, 0x01	; 1
     bfa:	40 e0       	ldi	r20, 0x00	; 0
     bfc:	0e 94 56 0b 	call	0x16ac	; 0x16ac <GPIO_writePin>
		PWM_Timer0_Start(duty_cycle);
     c00:	89 81       	ldd	r24, Y+1	; 0x01
     c02:	0e 94 3c 08 	call	0x1078	; 0x1078 <PWM_Timer0_Start>
	default:
		/* Do Nothing */
		break;
	}

}
     c06:	0f 90       	pop	r0
     c08:	0f 90       	pop	r0
     c0a:	0f 90       	pop	r0
     c0c:	0f 90       	pop	r0
     c0e:	0f 90       	pop	r0
     c10:	cf 91       	pop	r28
     c12:	df 91       	pop	r29
     c14:	08 95       	ret

00000c16 <EEPROM_writeByte>:

#include"EEPROM.h"
#include"I2C.h"
#include <util/delay.h>
uint8 EEPROM_writeByte(uint16 address,uint8 data)
{
     c16:	df 93       	push	r29
     c18:	cf 93       	push	r28
     c1a:	cd b7       	in	r28, 0x3d	; 61
     c1c:	de b7       	in	r29, 0x3e	; 62
     c1e:	62 97       	sbiw	r28, 0x12	; 18
     c20:	0f b6       	in	r0, 0x3f	; 63
     c22:	f8 94       	cli
     c24:	de bf       	out	0x3e, r29	; 62
     c26:	0f be       	out	0x3f, r0	; 63
     c28:	cd bf       	out	0x3d, r28	; 61
     c2a:	98 8b       	std	Y+16, r25	; 0x10
     c2c:	8f 87       	std	Y+15, r24	; 0x0f
     c2e:	69 8b       	std	Y+17, r22	; 0x11

	TWI_start();
     c30:	0e 94 d5 07 	call	0xfaa	; 0xfaa <TWI_start>
	if(TWI_getStatus() != START)
     c34:	0e 94 2d 08 	call	0x105a	; 0x105a <TWI_getStatus>
     c38:	88 30       	cpi	r24, 0x08	; 8
     c3a:	11 f0       	breq	.+4      	; 0xc40 <EEPROM_writeByte+0x2a>
	{
		return ERROR;
     c3c:	1a 8a       	std	Y+18, r1	; 0x12
     c3e:	9a c0       	rjmp	.+308    	; 0xd74 <EEPROM_writeByte+0x15e>
	}
	//send first A10,A9,A8
	TWI_writeByte((uint8)(0xA0 | ((address & 0x0700)>>7)));
     c40:	8f 85       	ldd	r24, Y+15	; 0x0f
     c42:	98 89       	ldd	r25, Y+16	; 0x10
     c44:	80 70       	andi	r24, 0x00	; 0
     c46:	97 70       	andi	r25, 0x07	; 7
     c48:	88 0f       	add	r24, r24
     c4a:	89 2f       	mov	r24, r25
     c4c:	88 1f       	adc	r24, r24
     c4e:	99 0b       	sbc	r25, r25
     c50:	91 95       	neg	r25
     c52:	80 6a       	ori	r24, 0xA0	; 160
     c54:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <TWI_writeByte>
	if(TWI_getStatus() != SALVEADDRESS_WRITE_WITH_ACK)
     c58:	0e 94 2d 08 	call	0x105a	; 0x105a <TWI_getStatus>
     c5c:	88 31       	cpi	r24, 0x18	; 24
     c5e:	11 f0       	breq	.+4      	; 0xc64 <EEPROM_writeByte+0x4e>
	{
		return ERROR;
     c60:	1a 8a       	std	Y+18, r1	; 0x12
     c62:	88 c0       	rjmp	.+272    	; 0xd74 <EEPROM_writeByte+0x15e>
	}
	//Send the address
	TWI_writeByte((uint8)(address));
     c64:	8f 85       	ldd	r24, Y+15	; 0x0f
     c66:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <TWI_writeByte>
	if(TWI_getStatus() != SEND_DATA_WITH_ACK )
     c6a:	0e 94 2d 08 	call	0x105a	; 0x105a <TWI_getStatus>
     c6e:	88 32       	cpi	r24, 0x28	; 40
     c70:	11 f0       	breq	.+4      	; 0xc76 <EEPROM_writeByte+0x60>
	{
		return ERROR;
     c72:	1a 8a       	std	Y+18, r1	; 0x12
     c74:	7f c0       	rjmp	.+254    	; 0xd74 <EEPROM_writeByte+0x15e>
	}
	//send data
	TWI_writeByte(data);
     c76:	89 89       	ldd	r24, Y+17	; 0x11
     c78:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <TWI_writeByte>
	if(TWI_getStatus() != SEND_DATA_WITH_ACK )
     c7c:	0e 94 2d 08 	call	0x105a	; 0x105a <TWI_getStatus>
     c80:	88 32       	cpi	r24, 0x28	; 40
     c82:	11 f0       	breq	.+4      	; 0xc88 <EEPROM_writeByte+0x72>
	{
		return ERROR;
     c84:	1a 8a       	std	Y+18, r1	; 0x12
     c86:	76 c0       	rjmp	.+236    	; 0xd74 <EEPROM_writeByte+0x15e>
	}
	TWI_stop();
     c88:	0e 94 e5 07 	call	0xfca	; 0xfca <TWI_stop>
     c8c:	80 e0       	ldi	r24, 0x00	; 0
     c8e:	90 e0       	ldi	r25, 0x00	; 0
     c90:	a0 e2       	ldi	r26, 0x20	; 32
     c92:	b1 e4       	ldi	r27, 0x41	; 65
     c94:	8b 87       	std	Y+11, r24	; 0x0b
     c96:	9c 87       	std	Y+12, r25	; 0x0c
     c98:	ad 87       	std	Y+13, r26	; 0x0d
     c9a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c9c:	6b 85       	ldd	r22, Y+11	; 0x0b
     c9e:	7c 85       	ldd	r23, Y+12	; 0x0c
     ca0:	8d 85       	ldd	r24, Y+13	; 0x0d
     ca2:	9e 85       	ldd	r25, Y+14	; 0x0e
     ca4:	20 e0       	ldi	r18, 0x00	; 0
     ca6:	30 e0       	ldi	r19, 0x00	; 0
     ca8:	4a ef       	ldi	r20, 0xFA	; 250
     caa:	54 e4       	ldi	r21, 0x44	; 68
     cac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cb0:	dc 01       	movw	r26, r24
     cb2:	cb 01       	movw	r24, r22
     cb4:	8f 83       	std	Y+7, r24	; 0x07
     cb6:	98 87       	std	Y+8, r25	; 0x08
     cb8:	a9 87       	std	Y+9, r26	; 0x09
     cba:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     cbc:	6f 81       	ldd	r22, Y+7	; 0x07
     cbe:	78 85       	ldd	r23, Y+8	; 0x08
     cc0:	89 85       	ldd	r24, Y+9	; 0x09
     cc2:	9a 85       	ldd	r25, Y+10	; 0x0a
     cc4:	20 e0       	ldi	r18, 0x00	; 0
     cc6:	30 e0       	ldi	r19, 0x00	; 0
     cc8:	40 e8       	ldi	r20, 0x80	; 128
     cca:	5f e3       	ldi	r21, 0x3F	; 63
     ccc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     cd0:	88 23       	and	r24, r24
     cd2:	2c f4       	brge	.+10     	; 0xcde <EEPROM_writeByte+0xc8>
		__ticks = 1;
     cd4:	81 e0       	ldi	r24, 0x01	; 1
     cd6:	90 e0       	ldi	r25, 0x00	; 0
     cd8:	9e 83       	std	Y+6, r25	; 0x06
     cda:	8d 83       	std	Y+5, r24	; 0x05
     cdc:	3f c0       	rjmp	.+126    	; 0xd5c <EEPROM_writeByte+0x146>
	else if (__tmp > 65535)
     cde:	6f 81       	ldd	r22, Y+7	; 0x07
     ce0:	78 85       	ldd	r23, Y+8	; 0x08
     ce2:	89 85       	ldd	r24, Y+9	; 0x09
     ce4:	9a 85       	ldd	r25, Y+10	; 0x0a
     ce6:	20 e0       	ldi	r18, 0x00	; 0
     ce8:	3f ef       	ldi	r19, 0xFF	; 255
     cea:	4f e7       	ldi	r20, 0x7F	; 127
     cec:	57 e4       	ldi	r21, 0x47	; 71
     cee:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     cf2:	18 16       	cp	r1, r24
     cf4:	4c f5       	brge	.+82     	; 0xd48 <EEPROM_writeByte+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     cf6:	6b 85       	ldd	r22, Y+11	; 0x0b
     cf8:	7c 85       	ldd	r23, Y+12	; 0x0c
     cfa:	8d 85       	ldd	r24, Y+13	; 0x0d
     cfc:	9e 85       	ldd	r25, Y+14	; 0x0e
     cfe:	20 e0       	ldi	r18, 0x00	; 0
     d00:	30 e0       	ldi	r19, 0x00	; 0
     d02:	40 e2       	ldi	r20, 0x20	; 32
     d04:	51 e4       	ldi	r21, 0x41	; 65
     d06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d0a:	dc 01       	movw	r26, r24
     d0c:	cb 01       	movw	r24, r22
     d0e:	bc 01       	movw	r22, r24
     d10:	cd 01       	movw	r24, r26
     d12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d16:	dc 01       	movw	r26, r24
     d18:	cb 01       	movw	r24, r22
     d1a:	9e 83       	std	Y+6, r25	; 0x06
     d1c:	8d 83       	std	Y+5, r24	; 0x05
     d1e:	0f c0       	rjmp	.+30     	; 0xd3e <EEPROM_writeByte+0x128>
     d20:	88 ec       	ldi	r24, 0xC8	; 200
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	9c 83       	std	Y+4, r25	; 0x04
     d26:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d28:	8b 81       	ldd	r24, Y+3	; 0x03
     d2a:	9c 81       	ldd	r25, Y+4	; 0x04
     d2c:	01 97       	sbiw	r24, 0x01	; 1
     d2e:	f1 f7       	brne	.-4      	; 0xd2c <EEPROM_writeByte+0x116>
     d30:	9c 83       	std	Y+4, r25	; 0x04
     d32:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d34:	8d 81       	ldd	r24, Y+5	; 0x05
     d36:	9e 81       	ldd	r25, Y+6	; 0x06
     d38:	01 97       	sbiw	r24, 0x01	; 1
     d3a:	9e 83       	std	Y+6, r25	; 0x06
     d3c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d3e:	8d 81       	ldd	r24, Y+5	; 0x05
     d40:	9e 81       	ldd	r25, Y+6	; 0x06
     d42:	00 97       	sbiw	r24, 0x00	; 0
     d44:	69 f7       	brne	.-38     	; 0xd20 <EEPROM_writeByte+0x10a>
     d46:	14 c0       	rjmp	.+40     	; 0xd70 <EEPROM_writeByte+0x15a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d48:	6f 81       	ldd	r22, Y+7	; 0x07
     d4a:	78 85       	ldd	r23, Y+8	; 0x08
     d4c:	89 85       	ldd	r24, Y+9	; 0x09
     d4e:	9a 85       	ldd	r25, Y+10	; 0x0a
     d50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d54:	dc 01       	movw	r26, r24
     d56:	cb 01       	movw	r24, r22
     d58:	9e 83       	std	Y+6, r25	; 0x06
     d5a:	8d 83       	std	Y+5, r24	; 0x05
     d5c:	8d 81       	ldd	r24, Y+5	; 0x05
     d5e:	9e 81       	ldd	r25, Y+6	; 0x06
     d60:	9a 83       	std	Y+2, r25	; 0x02
     d62:	89 83       	std	Y+1, r24	; 0x01
     d64:	89 81       	ldd	r24, Y+1	; 0x01
     d66:	9a 81       	ldd	r25, Y+2	; 0x02
     d68:	01 97       	sbiw	r24, 0x01	; 1
     d6a:	f1 f7       	brne	.-4      	; 0xd68 <EEPROM_writeByte+0x152>
     d6c:	9a 83       	std	Y+2, r25	; 0x02
     d6e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	return SUCCESS;
     d70:	81 e0       	ldi	r24, 0x01	; 1
     d72:	8a 8b       	std	Y+18, r24	; 0x12
     d74:	8a 89       	ldd	r24, Y+18	; 0x12
}
     d76:	62 96       	adiw	r28, 0x12	; 18
     d78:	0f b6       	in	r0, 0x3f	; 63
     d7a:	f8 94       	cli
     d7c:	de bf       	out	0x3e, r29	; 62
     d7e:	0f be       	out	0x3f, r0	; 63
     d80:	cd bf       	out	0x3d, r28	; 61
     d82:	cf 91       	pop	r28
     d84:	df 91       	pop	r29
     d86:	08 95       	ret

00000d88 <EEPROM_readByte>:
uint8 EEPROM_readByte(uint16 address,uint8 * data)
{
     d88:	df 93       	push	r29
     d8a:	cf 93       	push	r28
     d8c:	cd b7       	in	r28, 0x3d	; 61
     d8e:	de b7       	in	r29, 0x3e	; 62
     d90:	63 97       	sbiw	r28, 0x13	; 19
     d92:	0f b6       	in	r0, 0x3f	; 63
     d94:	f8 94       	cli
     d96:	de bf       	out	0x3e, r29	; 62
     d98:	0f be       	out	0x3f, r0	; 63
     d9a:	cd bf       	out	0x3d, r28	; 61
     d9c:	98 8b       	std	Y+16, r25	; 0x10
     d9e:	8f 87       	std	Y+15, r24	; 0x0f
     da0:	7a 8b       	std	Y+18, r23	; 0x12
     da2:	69 8b       	std	Y+17, r22	; 0x11
	TWI_start();
     da4:	0e 94 d5 07 	call	0xfaa	; 0xfaa <TWI_start>
	if(TWI_getStatus() != START)
     da8:	0e 94 2d 08 	call	0x105a	; 0x105a <TWI_getStatus>
     dac:	88 30       	cpi	r24, 0x08	; 8
     dae:	11 f0       	breq	.+4      	; 0xdb4 <EEPROM_readByte+0x2c>
	{
		return ERROR;
     db0:	1b 8a       	std	Y+19, r1	; 0x13
     db2:	b6 c0       	rjmp	.+364    	; 0xf20 <EEPROM_readByte+0x198>
	}
	//send first A10,A9,A8
	TWI_writeByte((uint8)(0xA0 | ((address & 0x0700)>>7)));
     db4:	8f 85       	ldd	r24, Y+15	; 0x0f
     db6:	98 89       	ldd	r25, Y+16	; 0x10
     db8:	80 70       	andi	r24, 0x00	; 0
     dba:	97 70       	andi	r25, 0x07	; 7
     dbc:	88 0f       	add	r24, r24
     dbe:	89 2f       	mov	r24, r25
     dc0:	88 1f       	adc	r24, r24
     dc2:	99 0b       	sbc	r25, r25
     dc4:	91 95       	neg	r25
     dc6:	80 6a       	ori	r24, 0xA0	; 160
     dc8:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <TWI_writeByte>
	if(TWI_getStatus() != SALVEADDRESS_WRITE_WITH_ACK)
     dcc:	0e 94 2d 08 	call	0x105a	; 0x105a <TWI_getStatus>
     dd0:	88 31       	cpi	r24, 0x18	; 24
     dd2:	11 f0       	breq	.+4      	; 0xdd8 <EEPROM_readByte+0x50>
	{
		return ERROR;
     dd4:	1b 8a       	std	Y+19, r1	; 0x13
     dd6:	a4 c0       	rjmp	.+328    	; 0xf20 <EEPROM_readByte+0x198>
	}
	//Send the address
	TWI_writeByte((uint8)(address));
     dd8:	8f 85       	ldd	r24, Y+15	; 0x0f
     dda:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <TWI_writeByte>
	if(TWI_getStatus() != SEND_DATA_WITH_ACK )
     dde:	0e 94 2d 08 	call	0x105a	; 0x105a <TWI_getStatus>
     de2:	88 32       	cpi	r24, 0x28	; 40
     de4:	11 f0       	breq	.+4      	; 0xdea <EEPROM_readByte+0x62>
	{
		return ERROR;
     de6:	1b 8a       	std	Y+19, r1	; 0x13
     de8:	9b c0       	rjmp	.+310    	; 0xf20 <EEPROM_readByte+0x198>
	}
	TWI_start();
     dea:	0e 94 d5 07 	call	0xfaa	; 0xfaa <TWI_start>
	if(TWI_getStatus() != REPEATED_START)
     dee:	0e 94 2d 08 	call	0x105a	; 0x105a <TWI_getStatus>
     df2:	80 31       	cpi	r24, 0x10	; 16
     df4:	11 f0       	breq	.+4      	; 0xdfa <EEPROM_readByte+0x72>
	{
		return ERROR;
     df6:	1b 8a       	std	Y+19, r1	; 0x13
     df8:	93 c0       	rjmp	.+294    	; 0xf20 <EEPROM_readByte+0x198>
	}
	TWI_writeByte((uint8)((0xA0) | ((address & 0x0700)>>7) | 1));
     dfa:	8f 85       	ldd	r24, Y+15	; 0x0f
     dfc:	98 89       	ldd	r25, Y+16	; 0x10
     dfe:	80 70       	andi	r24, 0x00	; 0
     e00:	97 70       	andi	r25, 0x07	; 7
     e02:	88 0f       	add	r24, r24
     e04:	89 2f       	mov	r24, r25
     e06:	88 1f       	adc	r24, r24
     e08:	99 0b       	sbc	r25, r25
     e0a:	91 95       	neg	r25
     e0c:	81 6a       	ori	r24, 0xA1	; 161
     e0e:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <TWI_writeByte>
	if(TWI_getStatus() != SALVEADDRESS_READ_WITH_ACK)
     e12:	0e 94 2d 08 	call	0x105a	; 0x105a <TWI_getStatus>
     e16:	80 34       	cpi	r24, 0x40	; 64
     e18:	11 f0       	breq	.+4      	; 0xe1e <EEPROM_readByte+0x96>
	{
		return ERROR;
     e1a:	1b 8a       	std	Y+19, r1	; 0x13
     e1c:	81 c0       	rjmp	.+258    	; 0xf20 <EEPROM_readByte+0x198>
	}
	*data=TWI_readByteWithNACK();
     e1e:	0e 94 1a 08 	call	0x1034	; 0x1034 <TWI_readByteWithNACK>
     e22:	e9 89       	ldd	r30, Y+17	; 0x11
     e24:	fa 89       	ldd	r31, Y+18	; 0x12
     e26:	80 83       	st	Z, r24
	if(TWI_getStatus() != DATA_RECIEVED_WITHOUT_ACK )
     e28:	0e 94 2d 08 	call	0x105a	; 0x105a <TWI_getStatus>
     e2c:	88 35       	cpi	r24, 0x58	; 88
     e2e:	11 f0       	breq	.+4      	; 0xe34 <EEPROM_readByte+0xac>
	{
		return ERROR;
     e30:	1b 8a       	std	Y+19, r1	; 0x13
     e32:	76 c0       	rjmp	.+236    	; 0xf20 <EEPROM_readByte+0x198>
	}
	TWI_stop();
     e34:	0e 94 e5 07 	call	0xfca	; 0xfca <TWI_stop>
     e38:	80 e0       	ldi	r24, 0x00	; 0
     e3a:	90 e0       	ldi	r25, 0x00	; 0
     e3c:	a0 e2       	ldi	r26, 0x20	; 32
     e3e:	b1 e4       	ldi	r27, 0x41	; 65
     e40:	8b 87       	std	Y+11, r24	; 0x0b
     e42:	9c 87       	std	Y+12, r25	; 0x0c
     e44:	ad 87       	std	Y+13, r26	; 0x0d
     e46:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e48:	6b 85       	ldd	r22, Y+11	; 0x0b
     e4a:	7c 85       	ldd	r23, Y+12	; 0x0c
     e4c:	8d 85       	ldd	r24, Y+13	; 0x0d
     e4e:	9e 85       	ldd	r25, Y+14	; 0x0e
     e50:	20 e0       	ldi	r18, 0x00	; 0
     e52:	30 e0       	ldi	r19, 0x00	; 0
     e54:	4a ef       	ldi	r20, 0xFA	; 250
     e56:	54 e4       	ldi	r21, 0x44	; 68
     e58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e5c:	dc 01       	movw	r26, r24
     e5e:	cb 01       	movw	r24, r22
     e60:	8f 83       	std	Y+7, r24	; 0x07
     e62:	98 87       	std	Y+8, r25	; 0x08
     e64:	a9 87       	std	Y+9, r26	; 0x09
     e66:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e68:	6f 81       	ldd	r22, Y+7	; 0x07
     e6a:	78 85       	ldd	r23, Y+8	; 0x08
     e6c:	89 85       	ldd	r24, Y+9	; 0x09
     e6e:	9a 85       	ldd	r25, Y+10	; 0x0a
     e70:	20 e0       	ldi	r18, 0x00	; 0
     e72:	30 e0       	ldi	r19, 0x00	; 0
     e74:	40 e8       	ldi	r20, 0x80	; 128
     e76:	5f e3       	ldi	r21, 0x3F	; 63
     e78:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e7c:	88 23       	and	r24, r24
     e7e:	2c f4       	brge	.+10     	; 0xe8a <EEPROM_readByte+0x102>
		__ticks = 1;
     e80:	81 e0       	ldi	r24, 0x01	; 1
     e82:	90 e0       	ldi	r25, 0x00	; 0
     e84:	9e 83       	std	Y+6, r25	; 0x06
     e86:	8d 83       	std	Y+5, r24	; 0x05
     e88:	3f c0       	rjmp	.+126    	; 0xf08 <EEPROM_readByte+0x180>
	else if (__tmp > 65535)
     e8a:	6f 81       	ldd	r22, Y+7	; 0x07
     e8c:	78 85       	ldd	r23, Y+8	; 0x08
     e8e:	89 85       	ldd	r24, Y+9	; 0x09
     e90:	9a 85       	ldd	r25, Y+10	; 0x0a
     e92:	20 e0       	ldi	r18, 0x00	; 0
     e94:	3f ef       	ldi	r19, 0xFF	; 255
     e96:	4f e7       	ldi	r20, 0x7F	; 127
     e98:	57 e4       	ldi	r21, 0x47	; 71
     e9a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e9e:	18 16       	cp	r1, r24
     ea0:	4c f5       	brge	.+82     	; 0xef4 <EEPROM_readByte+0x16c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ea2:	6b 85       	ldd	r22, Y+11	; 0x0b
     ea4:	7c 85       	ldd	r23, Y+12	; 0x0c
     ea6:	8d 85       	ldd	r24, Y+13	; 0x0d
     ea8:	9e 85       	ldd	r25, Y+14	; 0x0e
     eaa:	20 e0       	ldi	r18, 0x00	; 0
     eac:	30 e0       	ldi	r19, 0x00	; 0
     eae:	40 e2       	ldi	r20, 0x20	; 32
     eb0:	51 e4       	ldi	r21, 0x41	; 65
     eb2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     eb6:	dc 01       	movw	r26, r24
     eb8:	cb 01       	movw	r24, r22
     eba:	bc 01       	movw	r22, r24
     ebc:	cd 01       	movw	r24, r26
     ebe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ec2:	dc 01       	movw	r26, r24
     ec4:	cb 01       	movw	r24, r22
     ec6:	9e 83       	std	Y+6, r25	; 0x06
     ec8:	8d 83       	std	Y+5, r24	; 0x05
     eca:	0f c0       	rjmp	.+30     	; 0xeea <EEPROM_readByte+0x162>
     ecc:	88 ec       	ldi	r24, 0xC8	; 200
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	9c 83       	std	Y+4, r25	; 0x04
     ed2:	8b 83       	std	Y+3, r24	; 0x03
     ed4:	8b 81       	ldd	r24, Y+3	; 0x03
     ed6:	9c 81       	ldd	r25, Y+4	; 0x04
     ed8:	01 97       	sbiw	r24, 0x01	; 1
     eda:	f1 f7       	brne	.-4      	; 0xed8 <EEPROM_readByte+0x150>
     edc:	9c 83       	std	Y+4, r25	; 0x04
     ede:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ee0:	8d 81       	ldd	r24, Y+5	; 0x05
     ee2:	9e 81       	ldd	r25, Y+6	; 0x06
     ee4:	01 97       	sbiw	r24, 0x01	; 1
     ee6:	9e 83       	std	Y+6, r25	; 0x06
     ee8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     eea:	8d 81       	ldd	r24, Y+5	; 0x05
     eec:	9e 81       	ldd	r25, Y+6	; 0x06
     eee:	00 97       	sbiw	r24, 0x00	; 0
     ef0:	69 f7       	brne	.-38     	; 0xecc <EEPROM_readByte+0x144>
     ef2:	14 c0       	rjmp	.+40     	; 0xf1c <EEPROM_readByte+0x194>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ef4:	6f 81       	ldd	r22, Y+7	; 0x07
     ef6:	78 85       	ldd	r23, Y+8	; 0x08
     ef8:	89 85       	ldd	r24, Y+9	; 0x09
     efa:	9a 85       	ldd	r25, Y+10	; 0x0a
     efc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f00:	dc 01       	movw	r26, r24
     f02:	cb 01       	movw	r24, r22
     f04:	9e 83       	std	Y+6, r25	; 0x06
     f06:	8d 83       	std	Y+5, r24	; 0x05
     f08:	8d 81       	ldd	r24, Y+5	; 0x05
     f0a:	9e 81       	ldd	r25, Y+6	; 0x06
     f0c:	9a 83       	std	Y+2, r25	; 0x02
     f0e:	89 83       	std	Y+1, r24	; 0x01
     f10:	89 81       	ldd	r24, Y+1	; 0x01
     f12:	9a 81       	ldd	r25, Y+2	; 0x02
     f14:	01 97       	sbiw	r24, 0x01	; 1
     f16:	f1 f7       	brne	.-4      	; 0xf14 <EEPROM_readByte+0x18c>
     f18:	9a 83       	std	Y+2, r25	; 0x02
     f1a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	return SUCCESS;
     f1c:	81 e0       	ldi	r24, 0x01	; 1
     f1e:	8b 8b       	std	Y+19, r24	; 0x13
     f20:	8b 89       	ldd	r24, Y+19	; 0x13
}
     f22:	63 96       	adiw	r28, 0x13	; 19
     f24:	0f b6       	in	r0, 0x3f	; 63
     f26:	f8 94       	cli
     f28:	de bf       	out	0x3e, r29	; 62
     f2a:	0f be       	out	0x3f, r0	; 63
     f2c:	cd bf       	out	0x3d, r28	; 61
     f2e:	cf 91       	pop	r28
     f30:	df 91       	pop	r29
     f32:	08 95       	ret

00000f34 <TWI_init>:
#include <avr/io.h>
#include"gpio.h"
#include"common_macros.h"

void TWI_init(const TWI_ConfigType * Config_Ptr)
{
     f34:	0f 93       	push	r16
     f36:	1f 93       	push	r17
     f38:	df 93       	push	r29
     f3a:	cf 93       	push	r28
     f3c:	00 d0       	rcall	.+0      	; 0xf3e <TWI_init+0xa>
     f3e:	0f 92       	push	r0
     f40:	cd b7       	in	r28, 0x3d	; 61
     f42:	de b7       	in	r29, 0x3e	; 62
     f44:	9a 83       	std	Y+2, r25	; 0x02
     f46:	89 83       	std	Y+1, r24	; 0x01

	//TWPS=00 using prescaler 1
	TWSR=00; //Initialized to 0 before starting I2C communication to make sure that there are no prior status bits set.
     f48:	e1 e2       	ldi	r30, 0x21	; 33
     f4a:	f0 e0       	ldi	r31, 0x00	; 0
     f4c:	10 82       	st	Z, r1
	TWAR=(TWAR & 0X00) | (Config_Ptr->address);
     f4e:	e2 e2       	ldi	r30, 0x22	; 34
     f50:	f0 e0       	ldi	r31, 0x00	; 0
     f52:	80 81       	ld	r24, Z
     f54:	a2 e2       	ldi	r26, 0x22	; 34
     f56:	b0 e0       	ldi	r27, 0x00	; 0
     f58:	e9 81       	ldd	r30, Y+1	; 0x01
     f5a:	fa 81       	ldd	r31, Y+2	; 0x02
     f5c:	80 81       	ld	r24, Z
     f5e:	91 81       	ldd	r25, Z+1	; 0x01
     f60:	8c 93       	st	X, r24
	TWBR=(F_CPU/(Config_Ptr->bit_rate))-16;
     f62:	00 e2       	ldi	r16, 0x20	; 32
     f64:	10 e0       	ldi	r17, 0x00	; 0
     f66:	e9 81       	ldd	r30, Y+1	; 0x01
     f68:	fa 81       	ldd	r31, Y+2	; 0x02
     f6a:	22 81       	ldd	r18, Z+2	; 0x02
     f6c:	33 81       	ldd	r19, Z+3	; 0x03
     f6e:	44 81       	ldd	r20, Z+4	; 0x04
     f70:	55 81       	ldd	r21, Z+5	; 0x05
     f72:	80 e0       	ldi	r24, 0x00	; 0
     f74:	92 e1       	ldi	r25, 0x12	; 18
     f76:	aa e7       	ldi	r26, 0x7A	; 122
     f78:	b0 e0       	ldi	r27, 0x00	; 0
     f7a:	bc 01       	movw	r22, r24
     f7c:	cd 01       	movw	r24, r26
     f7e:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <__udivmodsi4>
     f82:	da 01       	movw	r26, r20
     f84:	c9 01       	movw	r24, r18
     f86:	80 51       	subi	r24, 0x10	; 16
     f88:	f8 01       	movw	r30, r16
     f8a:	80 83       	st	Z, r24
	TWCR|=(1<<TWEN);
     f8c:	a6 e5       	ldi	r26, 0x56	; 86
     f8e:	b0 e0       	ldi	r27, 0x00	; 0
     f90:	e6 e5       	ldi	r30, 0x56	; 86
     f92:	f0 e0       	ldi	r31, 0x00	; 0
     f94:	80 81       	ld	r24, Z
     f96:	84 60       	ori	r24, 0x04	; 4
     f98:	8c 93       	st	X, r24

}
     f9a:	0f 90       	pop	r0
     f9c:	0f 90       	pop	r0
     f9e:	0f 90       	pop	r0
     fa0:	cf 91       	pop	r28
     fa2:	df 91       	pop	r29
     fa4:	1f 91       	pop	r17
     fa6:	0f 91       	pop	r16
     fa8:	08 95       	ret

00000faa <TWI_start>:

void TWI_start()
{
     faa:	df 93       	push	r29
     fac:	cf 93       	push	r28
     fae:	cd b7       	in	r28, 0x3d	; 61
     fb0:	de b7       	in	r29, 0x3e	; 62

	TWCR =(1<<TWSTA) | (1<<TWINT) | (1<<TWEN);
     fb2:	e6 e5       	ldi	r30, 0x56	; 86
     fb4:	f0 e0       	ldi	r31, 0x00	; 0
     fb6:	84 ea       	ldi	r24, 0xA4	; 164
     fb8:	80 83       	st	Z, r24

	while(BIT_IS_CLEAR(TWCR,TWINT)){}
     fba:	e6 e5       	ldi	r30, 0x56	; 86
     fbc:	f0 e0       	ldi	r31, 0x00	; 0
     fbe:	80 81       	ld	r24, Z
     fc0:	88 23       	and	r24, r24
     fc2:	dc f7       	brge	.-10     	; 0xfba <TWI_start+0x10>
}
     fc4:	cf 91       	pop	r28
     fc6:	df 91       	pop	r29
     fc8:	08 95       	ret

00000fca <TWI_stop>:

void TWI_stop()
{
     fca:	df 93       	push	r29
     fcc:	cf 93       	push	r28
     fce:	cd b7       	in	r28, 0x3d	; 61
     fd0:	de b7       	in	r29, 0x3e	; 62
	TWCR =(1<<TWSTO) | (1<<TWINT) | (1<<TWEN);
     fd2:	e6 e5       	ldi	r30, 0x56	; 86
     fd4:	f0 e0       	ldi	r31, 0x00	; 0
     fd6:	84 e9       	ldi	r24, 0x94	; 148
     fd8:	80 83       	st	Z, r24


}
     fda:	cf 91       	pop	r28
     fdc:	df 91       	pop	r29
     fde:	08 95       	ret

00000fe0 <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
     fe0:	df 93       	push	r29
     fe2:	cf 93       	push	r28
     fe4:	0f 92       	push	r0
     fe6:	cd b7       	in	r28, 0x3d	; 61
     fe8:	de b7       	in	r29, 0x3e	; 62
     fea:	89 83       	std	Y+1, r24	; 0x01
	TWDR=data;//clear the flag by itself ,sets register TWWC
     fec:	e3 e2       	ldi	r30, 0x23	; 35
     fee:	f0 e0       	ldi	r31, 0x00	; 0
     ff0:	89 81       	ldd	r24, Y+1	; 0x01
     ff2:	80 83       	st	Z, r24
	TWCR =(1<<TWINT) | (1<<TWEN);
     ff4:	e6 e5       	ldi	r30, 0x56	; 86
     ff6:	f0 e0       	ldi	r31, 0x00	; 0
     ff8:	84 e8       	ldi	r24, 0x84	; 132
     ffa:	80 83       	st	Z, r24

	while(BIT_IS_CLEAR(TWCR,TWINT)){}
     ffc:	e6 e5       	ldi	r30, 0x56	; 86
     ffe:	f0 e0       	ldi	r31, 0x00	; 0
    1000:	80 81       	ld	r24, Z
    1002:	88 23       	and	r24, r24
    1004:	dc f7       	brge	.-10     	; 0xffc <TWI_writeByte+0x1c>
}
    1006:	0f 90       	pop	r0
    1008:	cf 91       	pop	r28
    100a:	df 91       	pop	r29
    100c:	08 95       	ret

0000100e <TWI_readByteWithACK>:
uint8 TWI_readByteWithACK()
{
    100e:	df 93       	push	r29
    1010:	cf 93       	push	r28
    1012:	cd b7       	in	r28, 0x3d	; 61
    1014:	de b7       	in	r29, 0x3e	; 62
	TWCR=(1<<TWEA) | (1<<TWEN) | (1<<TWINT) ;
    1016:	e6 e5       	ldi	r30, 0x56	; 86
    1018:	f0 e0       	ldi	r31, 0x00	; 0
    101a:	84 ec       	ldi	r24, 0xC4	; 196
    101c:	80 83       	st	Z, r24

	while(BIT_IS_CLEAR(TWCR,TWINT)){}/*Without waiting for the TWINT flag,
    101e:	e6 e5       	ldi	r30, 0x56	; 86
    1020:	f0 e0       	ldi	r31, 0x00	; 0
    1022:	80 81       	ld	r24, Z
    1024:	88 23       	and	r24, r24
    1026:	dc f7       	brge	.-10     	; 0x101e <TWI_readByteWithACK+0x10>
	                                   you might read the data before it is received completely*/
	return TWDR;
    1028:	e3 e2       	ldi	r30, 0x23	; 35
    102a:	f0 e0       	ldi	r31, 0x00	; 0
    102c:	80 81       	ld	r24, Z
}
    102e:	cf 91       	pop	r28
    1030:	df 91       	pop	r29
    1032:	08 95       	ret

00001034 <TWI_readByteWithNACK>:
uint8 TWI_readByteWithNACK()
{
    1034:	df 93       	push	r29
    1036:	cf 93       	push	r28
    1038:	cd b7       	in	r28, 0x3d	; 61
    103a:	de b7       	in	r29, 0x3e	; 62
	TWCR=(1<<TWEN) | (1<<TWINT) ;
    103c:	e6 e5       	ldi	r30, 0x56	; 86
    103e:	f0 e0       	ldi	r31, 0x00	; 0
    1040:	84 e8       	ldi	r24, 0x84	; 132
    1042:	80 83       	st	Z, r24

	while(BIT_IS_CLEAR(TWCR,TWINT)){}/*Without waiting for the TWINT flag,
    1044:	e6 e5       	ldi	r30, 0x56	; 86
    1046:	f0 e0       	ldi	r31, 0x00	; 0
    1048:	80 81       	ld	r24, Z
    104a:	88 23       	and	r24, r24
    104c:	dc f7       	brge	.-10     	; 0x1044 <TWI_readByteWithNACK+0x10>
									   you might read the data before it is received completely*/
	return TWDR;
    104e:	e3 e2       	ldi	r30, 0x23	; 35
    1050:	f0 e0       	ldi	r31, 0x00	; 0
    1052:	80 81       	ld	r24, Z

}
    1054:	cf 91       	pop	r28
    1056:	df 91       	pop	r29
    1058:	08 95       	ret

0000105a <TWI_getStatus>:
uint8 TWI_getStatus()
{
    105a:	df 93       	push	r29
    105c:	cf 93       	push	r28
    105e:	0f 92       	push	r0
    1060:	cd b7       	in	r28, 0x3d	; 61
    1062:	de b7       	in	r29, 0x3e	; 62
	uint8 status;
	status=TWSR & 0xF8; //status checking independent of prescaler setting
    1064:	e1 e2       	ldi	r30, 0x21	; 33
    1066:	f0 e0       	ldi	r31, 0x00	; 0
    1068:	80 81       	ld	r24, Z
    106a:	88 7f       	andi	r24, 0xF8	; 248
    106c:	89 83       	std	Y+1, r24	; 0x01
	return status;
    106e:	89 81       	ldd	r24, Y+1	; 0x01

}
    1070:	0f 90       	pop	r0
    1072:	cf 91       	pop	r28
    1074:	df 91       	pop	r29
    1076:	08 95       	ret

00001078 <PWM_Timer0_Start>:
 */
#include <avr/io.h>
#include"gpio.h"
#include"PWM.h"
void PWM_Timer0_Start(uint8 duty_cycle)
{
    1078:	df 93       	push	r29
    107a:	cf 93       	push	r28
    107c:	0f 92       	push	r0
    107e:	cd b7       	in	r28, 0x3d	; 61
    1080:	de b7       	in	r29, 0x3e	; 62
    1082:	89 83       	std	Y+1, r24	; 0x01

	TCNT0 = 0; //Set Timer Initial value
    1084:	e2 e5       	ldi	r30, 0x52	; 82
    1086:	f0 e0       	ldi	r31, 0x00	; 0
    1088:	10 82       	st	Z, r1

	OCR0  = duty_cycle; // Set Compare Value
    108a:	ec e5       	ldi	r30, 0x5C	; 92
    108c:	f0 e0       	ldi	r31, 0x00	; 0
    108e:	89 81       	ldd	r24, Y+1	; 0x01
    1090:	80 83       	st	Z, r24

	GPIO_setupPinDirection(PWM_PORT, PWM_PIN, PIN_OUTPUT);
    1092:	81 e0       	ldi	r24, 0x01	; 1
    1094:	63 e0       	ldi	r22, 0x03	; 3
    1096:	41 e0       	ldi	r20, 0x01	; 1
    1098:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <GPIO_setupPinDirection>
	 * 1. Fast PWM mode FOC0=0
	 * 2. Fast PWM Mode WGM01=1 & WGM00=1
	 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
	 * 4. clock = F_CPU/8 CS00=0 CS01=1 CS02=0
	 */
	TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS01);
    109c:	e3 e5       	ldi	r30, 0x53	; 83
    109e:	f0 e0       	ldi	r31, 0x00	; 0
    10a0:	8a e6       	ldi	r24, 0x6A	; 106
    10a2:	80 83       	st	Z, r24

}
    10a4:	0f 90       	pop	r0
    10a6:	cf 91       	pop	r28
    10a8:	df 91       	pop	r29
    10aa:	08 95       	ret

000010ac <__vector_9>:


static volatile void (*g_callBackPtr)(void) = NULL_PTR;

ISR(TIMER1_OVF_vect)
{
    10ac:	1f 92       	push	r1
    10ae:	0f 92       	push	r0
    10b0:	0f b6       	in	r0, 0x3f	; 63
    10b2:	0f 92       	push	r0
    10b4:	11 24       	eor	r1, r1
    10b6:	2f 93       	push	r18
    10b8:	3f 93       	push	r19
    10ba:	4f 93       	push	r20
    10bc:	5f 93       	push	r21
    10be:	6f 93       	push	r22
    10c0:	7f 93       	push	r23
    10c2:	8f 93       	push	r24
    10c4:	9f 93       	push	r25
    10c6:	af 93       	push	r26
    10c8:	bf 93       	push	r27
    10ca:	ef 93       	push	r30
    10cc:	ff 93       	push	r31
    10ce:	df 93       	push	r29
    10d0:	cf 93       	push	r28
    10d2:	cd b7       	in	r28, 0x3d	; 61
    10d4:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    10d6:	80 91 7c 00 	lds	r24, 0x007C
    10da:	90 91 7d 00 	lds	r25, 0x007D
    10de:	00 97       	sbiw	r24, 0x00	; 0
    10e0:	29 f0       	breq	.+10     	; 0x10ec <__vector_9+0x40>
	{
		(*g_callBackPtr)();
    10e2:	e0 91 7c 00 	lds	r30, 0x007C
    10e6:	f0 91 7d 00 	lds	r31, 0x007D
    10ea:	09 95       	icall
	}
}
    10ec:	cf 91       	pop	r28
    10ee:	df 91       	pop	r29
    10f0:	ff 91       	pop	r31
    10f2:	ef 91       	pop	r30
    10f4:	bf 91       	pop	r27
    10f6:	af 91       	pop	r26
    10f8:	9f 91       	pop	r25
    10fa:	8f 91       	pop	r24
    10fc:	7f 91       	pop	r23
    10fe:	6f 91       	pop	r22
    1100:	5f 91       	pop	r21
    1102:	4f 91       	pop	r20
    1104:	3f 91       	pop	r19
    1106:	2f 91       	pop	r18
    1108:	0f 90       	pop	r0
    110a:	0f be       	out	0x3f, r0	; 63
    110c:	0f 90       	pop	r0
    110e:	1f 90       	pop	r1
    1110:	18 95       	reti

00001112 <__vector_7>:

ISR(TIMER1_COMPA_vect)
{
    1112:	1f 92       	push	r1
    1114:	0f 92       	push	r0
    1116:	0f b6       	in	r0, 0x3f	; 63
    1118:	0f 92       	push	r0
    111a:	11 24       	eor	r1, r1
    111c:	2f 93       	push	r18
    111e:	3f 93       	push	r19
    1120:	4f 93       	push	r20
    1122:	5f 93       	push	r21
    1124:	6f 93       	push	r22
    1126:	7f 93       	push	r23
    1128:	8f 93       	push	r24
    112a:	9f 93       	push	r25
    112c:	af 93       	push	r26
    112e:	bf 93       	push	r27
    1130:	ef 93       	push	r30
    1132:	ff 93       	push	r31
    1134:	df 93       	push	r29
    1136:	cf 93       	push	r28
    1138:	cd b7       	in	r28, 0x3d	; 61
    113a:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    113c:	80 91 7c 00 	lds	r24, 0x007C
    1140:	90 91 7d 00 	lds	r25, 0x007D
    1144:	00 97       	sbiw	r24, 0x00	; 0
    1146:	29 f0       	breq	.+10     	; 0x1152 <__vector_7+0x40>
	{
		(*g_callBackPtr)();
    1148:	e0 91 7c 00 	lds	r30, 0x007C
    114c:	f0 91 7d 00 	lds	r31, 0x007D
    1150:	09 95       	icall
	}
}
    1152:	cf 91       	pop	r28
    1154:	df 91       	pop	r29
    1156:	ff 91       	pop	r31
    1158:	ef 91       	pop	r30
    115a:	bf 91       	pop	r27
    115c:	af 91       	pop	r26
    115e:	9f 91       	pop	r25
    1160:	8f 91       	pop	r24
    1162:	7f 91       	pop	r23
    1164:	6f 91       	pop	r22
    1166:	5f 91       	pop	r21
    1168:	4f 91       	pop	r20
    116a:	3f 91       	pop	r19
    116c:	2f 91       	pop	r18
    116e:	0f 90       	pop	r0
    1170:	0f be       	out	0x3f, r0	; 63
    1172:	0f 90       	pop	r0
    1174:	1f 90       	pop	r1
    1176:	18 95       	reti

00001178 <Timer1_init>:
void Timer1_init(const Timer1_ConfigType * Config_Ptr)
{
    1178:	df 93       	push	r29
    117a:	cf 93       	push	r28
    117c:	00 d0       	rcall	.+0      	; 0x117e <Timer1_init+0x6>
    117e:	00 d0       	rcall	.+0      	; 0x1180 <Timer1_init+0x8>
    1180:	cd b7       	in	r28, 0x3d	; 61
    1182:	de b7       	in	r29, 0x3e	; 62
    1184:	9a 83       	std	Y+2, r25	; 0x02
    1186:	89 83       	std	Y+1, r24	; 0x01

    // Initialize the Timer counter to zero
	TCNT1 = Config_Ptr-> initial_value;
    1188:	ac e4       	ldi	r26, 0x4C	; 76
    118a:	b0 e0       	ldi	r27, 0x00	; 0
    118c:	e9 81       	ldd	r30, Y+1	; 0x01
    118e:	fa 81       	ldd	r31, Y+2	; 0x02
    1190:	80 81       	ld	r24, Z
    1192:	91 81       	ldd	r25, Z+1	; 0x01
    1194:	11 96       	adiw	r26, 0x01	; 1
    1196:	9c 93       	st	X, r25
    1198:	8e 93       	st	-X, r24

    // Configure Timer Control Register A (TCCR1A) to zeros (no effect on timer operation)
	TCCR1A = 0;
    119a:	ef e4       	ldi	r30, 0x4F	; 79
    119c:	f0 e0       	ldi	r31, 0x00	; 0
    119e:	10 82       	st	Z, r1

	 // Prescaler and mode
	TCCR1B = (TCCR1B & 0XE0) | ( Config_Ptr-> prescaler) | (( Config_Ptr-> mode)<<3);
    11a0:	ae e4       	ldi	r26, 0x4E	; 78
    11a2:	b0 e0       	ldi	r27, 0x00	; 0
    11a4:	ee e4       	ldi	r30, 0x4E	; 78
    11a6:	f0 e0       	ldi	r31, 0x00	; 0
    11a8:	80 81       	ld	r24, Z
    11aa:	98 2f       	mov	r25, r24
    11ac:	90 7e       	andi	r25, 0xE0	; 224
    11ae:	e9 81       	ldd	r30, Y+1	; 0x01
    11b0:	fa 81       	ldd	r31, Y+2	; 0x02
    11b2:	84 81       	ldd	r24, Z+4	; 0x04
    11b4:	29 2f       	mov	r18, r25
    11b6:	28 2b       	or	r18, r24
    11b8:	e9 81       	ldd	r30, Y+1	; 0x01
    11ba:	fa 81       	ldd	r31, Y+2	; 0x02
    11bc:	85 81       	ldd	r24, Z+5	; 0x05
    11be:	88 2f       	mov	r24, r24
    11c0:	90 e0       	ldi	r25, 0x00	; 0
    11c2:	88 0f       	add	r24, r24
    11c4:	99 1f       	adc	r25, r25
    11c6:	88 0f       	add	r24, r24
    11c8:	99 1f       	adc	r25, r25
    11ca:	88 0f       	add	r24, r24
    11cc:	99 1f       	adc	r25, r25
    11ce:	82 2b       	or	r24, r18
    11d0:	8c 93       	st	X, r24

	switch(Config_Ptr-> mode)
    11d2:	e9 81       	ldd	r30, Y+1	; 0x01
    11d4:	fa 81       	ldd	r31, Y+2	; 0x02
    11d6:	85 81       	ldd	r24, Z+5	; 0x05
    11d8:	28 2f       	mov	r18, r24
    11da:	30 e0       	ldi	r19, 0x00	; 0
    11dc:	3c 83       	std	Y+4, r19	; 0x04
    11de:	2b 83       	std	Y+3, r18	; 0x03
    11e0:	8b 81       	ldd	r24, Y+3	; 0x03
    11e2:	9c 81       	ldd	r25, Y+4	; 0x04
    11e4:	00 97       	sbiw	r24, 0x00	; 0
    11e6:	31 f0       	breq	.+12     	; 0x11f4 <Timer1_init+0x7c>
    11e8:	2b 81       	ldd	r18, Y+3	; 0x03
    11ea:	3c 81       	ldd	r19, Y+4	; 0x04
    11ec:	21 30       	cpi	r18, 0x01	; 1
    11ee:	31 05       	cpc	r19, r1
    11f0:	49 f0       	breq	.+18     	; 0x1204 <Timer1_init+0x8c>
    11f2:	18 c0       	rjmp	.+48     	; 0x1224 <Timer1_init+0xac>
	{
	case NORMAL:
		TIMSK |= (1 << TOIE1);
    11f4:	a9 e5       	ldi	r26, 0x59	; 89
    11f6:	b0 e0       	ldi	r27, 0x00	; 0
    11f8:	e9 e5       	ldi	r30, 0x59	; 89
    11fa:	f0 e0       	ldi	r31, 0x00	; 0
    11fc:	80 81       	ld	r24, Z
    11fe:	84 60       	ori	r24, 0x04	; 4
    1200:	8c 93       	st	X, r24
    1202:	10 c0       	rjmp	.+32     	; 0x1224 <Timer1_init+0xac>
		break;

	case COMPARE:

		TIMSK |= (1 << OCIE1A);
    1204:	a9 e5       	ldi	r26, 0x59	; 89
    1206:	b0 e0       	ldi	r27, 0x00	; 0
    1208:	e9 e5       	ldi	r30, 0x59	; 89
    120a:	f0 e0       	ldi	r31, 0x00	; 0
    120c:	80 81       	ld	r24, Z
    120e:	80 61       	ori	r24, 0x10	; 16
    1210:	8c 93       	st	X, r24
		// Set the Output Compare Register A (OCR1A)
		// This value determines the timer's counting range, which is set to 1 second
		OCR1A =Config_Ptr-> compare_value ;
    1212:	aa e4       	ldi	r26, 0x4A	; 74
    1214:	b0 e0       	ldi	r27, 0x00	; 0
    1216:	e9 81       	ldd	r30, Y+1	; 0x01
    1218:	fa 81       	ldd	r31, Y+2	; 0x02
    121a:	82 81       	ldd	r24, Z+2	; 0x02
    121c:	93 81       	ldd	r25, Z+3	; 0x03
    121e:	11 96       	adiw	r26, 0x01	; 1
    1220:	9c 93       	st	X, r25
    1222:	8e 93       	st	-X, r24
		break;
	}


    // Enable global interrupts by setting the I-bit in the Status Register (SREG)
	sei();
    1224:	78 94       	sei

}
    1226:	0f 90       	pop	r0
    1228:	0f 90       	pop	r0
    122a:	0f 90       	pop	r0
    122c:	0f 90       	pop	r0
    122e:	cf 91       	pop	r28
    1230:	df 91       	pop	r29
    1232:	08 95       	ret

00001234 <Timer1_deInit>:
void Timer1_deInit()
{
    1234:	df 93       	push	r29
    1236:	cf 93       	push	r28
    1238:	cd b7       	in	r28, 0x3d	; 61
    123a:	de b7       	in	r29, 0x3e	; 62
	TCCR1B = 0;
    123c:	ee e4       	ldi	r30, 0x4E	; 78
    123e:	f0 e0       	ldi	r31, 0x00	; 0
    1240:	10 82       	st	Z, r1
}
    1242:	cf 91       	pop	r28
    1244:	df 91       	pop	r29
    1246:	08 95       	ret

00001248 <Timer1_setCallBack>:
void Timer1_setCallBack(void(*a_ptr)(void))
{
    1248:	df 93       	push	r29
    124a:	cf 93       	push	r28
    124c:	00 d0       	rcall	.+0      	; 0x124e <Timer1_setCallBack+0x6>
    124e:	cd b7       	in	r28, 0x3d	; 61
    1250:	de b7       	in	r29, 0x3e	; 62
    1252:	9a 83       	std	Y+2, r25	; 0x02
    1254:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
    1256:	89 81       	ldd	r24, Y+1	; 0x01
    1258:	9a 81       	ldd	r25, Y+2	; 0x02
    125a:	90 93 7d 00 	sts	0x007D, r25
    125e:	80 93 7c 00 	sts	0x007C, r24
}
    1262:	0f 90       	pop	r0
    1264:	0f 90       	pop	r0
    1266:	cf 91       	pop	r28
    1268:	df 91       	pop	r29
    126a:	08 95       	ret

0000126c <UART_init>:
#include"UART.h"
#include <avr/io.h>
#include"gpio.h"
#include"common_macros.h"
void UART_init(const UART_ConfigType *Config_Ptr)
{
    126c:	df 93       	push	r29
    126e:	cf 93       	push	r28
    1270:	00 d0       	rcall	.+0      	; 0x1272 <UART_init+0x6>
    1272:	00 d0       	rcall	.+0      	; 0x1274 <UART_init+0x8>
    1274:	cd b7       	in	r28, 0x3d	; 61
    1276:	de b7       	in	r29, 0x3e	; 62
    1278:	9c 83       	std	Y+4, r25	; 0x04
    127a:	8b 83       	std	Y+3, r24	; 0x03

	uint16 UBRR_VALUE = 0;
    127c:	1a 82       	std	Y+2, r1	; 0x02
    127e:	19 82       	std	Y+1, r1	; 0x01

	UCSRA=(1<<U2X); //double transmission speed
    1280:	eb e2       	ldi	r30, 0x2B	; 43
    1282:	f0 e0       	ldi	r31, 0x00	; 0
    1284:	82 e0       	ldi	r24, 0x02	; 2
    1286:	80 83       	st	Z, r24
	/*enable receiver and transmitter*/
	UCSRB=(1<<RXEN) | (1<<TXEN);
    1288:	ea e2       	ldi	r30, 0x2A	; 42
    128a:	f0 e0       	ldi	r31, 0x00	; 0
    128c:	88 e1       	ldi	r24, 0x18	; 24
    128e:	80 83       	st	Z, r24

	UCSRC=(UCSRC & 0XC1) | ((Config_Ptr->parity)<<4) | ((Config_Ptr->stop_bit)<<3) | ((Config_Ptr->bit_data)<<1) | (1<<URSEL);
    1290:	a0 e4       	ldi	r26, 0x40	; 64
    1292:	b0 e0       	ldi	r27, 0x00	; 0
    1294:	e0 e4       	ldi	r30, 0x40	; 64
    1296:	f0 e0       	ldi	r31, 0x00	; 0
    1298:	80 81       	ld	r24, Z
    129a:	28 2f       	mov	r18, r24
    129c:	21 7c       	andi	r18, 0xC1	; 193
    129e:	eb 81       	ldd	r30, Y+3	; 0x03
    12a0:	fc 81       	ldd	r31, Y+4	; 0x04
    12a2:	81 81       	ldd	r24, Z+1	; 0x01
    12a4:	88 2f       	mov	r24, r24
    12a6:	90 e0       	ldi	r25, 0x00	; 0
    12a8:	82 95       	swap	r24
    12aa:	92 95       	swap	r25
    12ac:	90 7f       	andi	r25, 0xF0	; 240
    12ae:	98 27       	eor	r25, r24
    12b0:	80 7f       	andi	r24, 0xF0	; 240
    12b2:	98 27       	eor	r25, r24
    12b4:	28 2b       	or	r18, r24
    12b6:	eb 81       	ldd	r30, Y+3	; 0x03
    12b8:	fc 81       	ldd	r31, Y+4	; 0x04
    12ba:	82 81       	ldd	r24, Z+2	; 0x02
    12bc:	88 2f       	mov	r24, r24
    12be:	90 e0       	ldi	r25, 0x00	; 0
    12c0:	88 0f       	add	r24, r24
    12c2:	99 1f       	adc	r25, r25
    12c4:	88 0f       	add	r24, r24
    12c6:	99 1f       	adc	r25, r25
    12c8:	88 0f       	add	r24, r24
    12ca:	99 1f       	adc	r25, r25
    12cc:	28 2b       	or	r18, r24
    12ce:	eb 81       	ldd	r30, Y+3	; 0x03
    12d0:	fc 81       	ldd	r31, Y+4	; 0x04
    12d2:	80 81       	ld	r24, Z
    12d4:	88 2f       	mov	r24, r24
    12d6:	90 e0       	ldi	r25, 0x00	; 0
    12d8:	88 0f       	add	r24, r24
    12da:	99 1f       	adc	r25, r25
    12dc:	82 2b       	or	r24, r18
    12de:	80 68       	ori	r24, 0x80	; 128
    12e0:	8c 93       	st	X, r24

	UCSRB =(UCSRB & 0XFB) | ((Config_Ptr->bit_data));
    12e2:	aa e2       	ldi	r26, 0x2A	; 42
    12e4:	b0 e0       	ldi	r27, 0x00	; 0
    12e6:	ea e2       	ldi	r30, 0x2A	; 42
    12e8:	f0 e0       	ldi	r31, 0x00	; 0
    12ea:	80 81       	ld	r24, Z
    12ec:	98 2f       	mov	r25, r24
    12ee:	9b 7f       	andi	r25, 0xFB	; 251
    12f0:	eb 81       	ldd	r30, Y+3	; 0x03
    12f2:	fc 81       	ldd	r31, Y+4	; 0x04
    12f4:	80 81       	ld	r24, Z
    12f6:	89 2b       	or	r24, r25
    12f8:	8c 93       	st	X, r24

	UBRR_VALUE= (uint16)(((F_CPU / ( (Config_Ptr->baud_rate)* 8UL))) - 1);
    12fa:	eb 81       	ldd	r30, Y+3	; 0x03
    12fc:	fc 81       	ldd	r31, Y+4	; 0x04
    12fe:	83 81       	ldd	r24, Z+3	; 0x03
    1300:	94 81       	ldd	r25, Z+4	; 0x04
    1302:	a5 81       	ldd	r26, Z+5	; 0x05
    1304:	b6 81       	ldd	r27, Z+6	; 0x06
    1306:	88 0f       	add	r24, r24
    1308:	99 1f       	adc	r25, r25
    130a:	aa 1f       	adc	r26, r26
    130c:	bb 1f       	adc	r27, r27
    130e:	88 0f       	add	r24, r24
    1310:	99 1f       	adc	r25, r25
    1312:	aa 1f       	adc	r26, r26
    1314:	bb 1f       	adc	r27, r27
    1316:	88 0f       	add	r24, r24
    1318:	99 1f       	adc	r25, r25
    131a:	aa 1f       	adc	r26, r26
    131c:	bb 1f       	adc	r27, r27
    131e:	9c 01       	movw	r18, r24
    1320:	ad 01       	movw	r20, r26
    1322:	80 e0       	ldi	r24, 0x00	; 0
    1324:	92 e1       	ldi	r25, 0x12	; 18
    1326:	aa e7       	ldi	r26, 0x7A	; 122
    1328:	b0 e0       	ldi	r27, 0x00	; 0
    132a:	bc 01       	movw	r22, r24
    132c:	cd 01       	movw	r24, r26
    132e:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <__udivmodsi4>
    1332:	da 01       	movw	r26, r20
    1334:	c9 01       	movw	r24, r18
    1336:	01 97       	sbiw	r24, 0x01	; 1
    1338:	9a 83       	std	Y+2, r25	; 0x02
    133a:	89 83       	std	Y+1, r24	; 0x01


	UBRRH=(UBRR_VALUE>>8);
    133c:	e0 e4       	ldi	r30, 0x40	; 64
    133e:	f0 e0       	ldi	r31, 0x00	; 0
    1340:	89 81       	ldd	r24, Y+1	; 0x01
    1342:	9a 81       	ldd	r25, Y+2	; 0x02
    1344:	89 2f       	mov	r24, r25
    1346:	99 27       	eor	r25, r25
    1348:	80 83       	st	Z, r24
	UBRRL=UBRR_VALUE;
    134a:	e9 e2       	ldi	r30, 0x29	; 41
    134c:	f0 e0       	ldi	r31, 0x00	; 0
    134e:	89 81       	ldd	r24, Y+1	; 0x01
    1350:	80 83       	st	Z, r24
}
    1352:	0f 90       	pop	r0
    1354:	0f 90       	pop	r0
    1356:	0f 90       	pop	r0
    1358:	0f 90       	pop	r0
    135a:	cf 91       	pop	r28
    135c:	df 91       	pop	r29
    135e:	08 95       	ret

00001360 <UART_SendByte>:

void UART_SendByte(uint8 data)
{
    1360:	df 93       	push	r29
    1362:	cf 93       	push	r28
    1364:	0f 92       	push	r0
    1366:	cd b7       	in	r28, 0x3d	; 61
    1368:	de b7       	in	r29, 0x3e	; 62
    136a:	89 83       	std	Y+1, r24	; 0x01
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    136c:	eb e2       	ldi	r30, 0x2B	; 43
    136e:	f0 e0       	ldi	r31, 0x00	; 0
    1370:	80 81       	ld	r24, Z
    1372:	88 2f       	mov	r24, r24
    1374:	90 e0       	ldi	r25, 0x00	; 0
    1376:	80 72       	andi	r24, 0x20	; 32
    1378:	90 70       	andi	r25, 0x00	; 0
    137a:	00 97       	sbiw	r24, 0x00	; 0
    137c:	b9 f3       	breq	.-18     	; 0x136c <UART_SendByte+0xc>

   UDR=data;
    137e:	ec e2       	ldi	r30, 0x2C	; 44
    1380:	f0 e0       	ldi	r31, 0x00	; 0
    1382:	89 81       	ldd	r24, Y+1	; 0x01
    1384:	80 83       	st	Z, r24

}
    1386:	0f 90       	pop	r0
    1388:	cf 91       	pop	r28
    138a:	df 91       	pop	r29
    138c:	08 95       	ret

0000138e <UART_RecieveByte>:

uint8 UART_RecieveByte()
{
    138e:	df 93       	push	r29
    1390:	cf 93       	push	r28
    1392:	cd b7       	in	r28, 0x3d	; 61
    1394:	de b7       	in	r29, 0x3e	; 62
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    1396:	eb e2       	ldi	r30, 0x2B	; 43
    1398:	f0 e0       	ldi	r31, 0x00	; 0
    139a:	80 81       	ld	r24, Z
    139c:	88 23       	and	r24, r24
    139e:	dc f7       	brge	.-10     	; 0x1396 <UART_RecieveByte+0x8>


   return UDR;
    13a0:	ec e2       	ldi	r30, 0x2C	; 44
    13a2:	f0 e0       	ldi	r31, 0x00	; 0
    13a4:	80 81       	ld	r24, Z

}
    13a6:	cf 91       	pop	r28
    13a8:	df 91       	pop	r29
    13aa:	08 95       	ret

000013ac <UART_SendString>:
void UART_SendString(uint8 *str)
{
    13ac:	df 93       	push	r29
    13ae:	cf 93       	push	r28
    13b0:	00 d0       	rcall	.+0      	; 0x13b2 <UART_SendString+0x6>
    13b2:	0f 92       	push	r0
    13b4:	cd b7       	in	r28, 0x3d	; 61
    13b6:	de b7       	in	r29, 0x3e	; 62
    13b8:	9b 83       	std	Y+3, r25	; 0x03
    13ba:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i=0;
    13bc:	19 82       	std	Y+1, r1	; 0x01
    13be:	0e c0       	rjmp	.+28     	; 0x13dc <UART_SendString+0x30>
	while(str[i]!='\0')
	{
		 UART_SendByte(str[i]);
    13c0:	89 81       	ldd	r24, Y+1	; 0x01
    13c2:	28 2f       	mov	r18, r24
    13c4:	30 e0       	ldi	r19, 0x00	; 0
    13c6:	8a 81       	ldd	r24, Y+2	; 0x02
    13c8:	9b 81       	ldd	r25, Y+3	; 0x03
    13ca:	fc 01       	movw	r30, r24
    13cc:	e2 0f       	add	r30, r18
    13ce:	f3 1f       	adc	r31, r19
    13d0:	80 81       	ld	r24, Z
    13d2:	0e 94 b0 09 	call	0x1360	; 0x1360 <UART_SendByte>
		 i++;
    13d6:	89 81       	ldd	r24, Y+1	; 0x01
    13d8:	8f 5f       	subi	r24, 0xFF	; 255
    13da:	89 83       	std	Y+1, r24	; 0x01

}
void UART_SendString(uint8 *str)
{
	uint8 i=0;
	while(str[i]!='\0')
    13dc:	89 81       	ldd	r24, Y+1	; 0x01
    13de:	28 2f       	mov	r18, r24
    13e0:	30 e0       	ldi	r19, 0x00	; 0
    13e2:	8a 81       	ldd	r24, Y+2	; 0x02
    13e4:	9b 81       	ldd	r25, Y+3	; 0x03
    13e6:	fc 01       	movw	r30, r24
    13e8:	e2 0f       	add	r30, r18
    13ea:	f3 1f       	adc	r31, r19
    13ec:	80 81       	ld	r24, Z
    13ee:	88 23       	and	r24, r24
    13f0:	39 f7       	brne	.-50     	; 0x13c0 <UART_SendString+0x14>
	{
		 UART_SendByte(str[i]);
		 i++;
	}
}
    13f2:	0f 90       	pop	r0
    13f4:	0f 90       	pop	r0
    13f6:	0f 90       	pop	r0
    13f8:	cf 91       	pop	r28
    13fa:	df 91       	pop	r29
    13fc:	08 95       	ret

000013fe <UART_RecieveString>:
void UART_RecieveString(uint8 *str)
{
    13fe:	0f 93       	push	r16
    1400:	1f 93       	push	r17
    1402:	df 93       	push	r29
    1404:	cf 93       	push	r28
    1406:	00 d0       	rcall	.+0      	; 0x1408 <UART_RecieveString+0xa>
    1408:	0f 92       	push	r0
    140a:	cd b7       	in	r28, 0x3d	; 61
    140c:	de b7       	in	r29, 0x3e	; 62
    140e:	9b 83       	std	Y+3, r25	; 0x03
    1410:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i=0;
    1412:	19 82       	std	Y+1, r1	; 0x01
	str[i] = UART_RecieveByte();
    1414:	89 81       	ldd	r24, Y+1	; 0x01
    1416:	28 2f       	mov	r18, r24
    1418:	30 e0       	ldi	r19, 0x00	; 0
    141a:	8a 81       	ldd	r24, Y+2	; 0x02
    141c:	9b 81       	ldd	r25, Y+3	; 0x03
    141e:	8c 01       	movw	r16, r24
    1420:	02 0f       	add	r16, r18
    1422:	13 1f       	adc	r17, r19
    1424:	0e 94 c7 09 	call	0x138e	; 0x138e <UART_RecieveByte>
    1428:	f8 01       	movw	r30, r16
    142a:	80 83       	st	Z, r24
    142c:	0f c0       	rjmp	.+30     	; 0x144c <UART_RecieveString+0x4e>
	while(str[i]!='#')
	{
		 i++;
    142e:	89 81       	ldd	r24, Y+1	; 0x01
    1430:	8f 5f       	subi	r24, 0xFF	; 255
    1432:	89 83       	std	Y+1, r24	; 0x01
		 str[i]=UART_RecieveByte();
    1434:	89 81       	ldd	r24, Y+1	; 0x01
    1436:	28 2f       	mov	r18, r24
    1438:	30 e0       	ldi	r19, 0x00	; 0
    143a:	8a 81       	ldd	r24, Y+2	; 0x02
    143c:	9b 81       	ldd	r25, Y+3	; 0x03
    143e:	8c 01       	movw	r16, r24
    1440:	02 0f       	add	r16, r18
    1442:	13 1f       	adc	r17, r19
    1444:	0e 94 c7 09 	call	0x138e	; 0x138e <UART_RecieveByte>
    1448:	f8 01       	movw	r30, r16
    144a:	80 83       	st	Z, r24
}
void UART_RecieveString(uint8 *str)
{
	uint8 i=0;
	str[i] = UART_RecieveByte();
	while(str[i]!='#')
    144c:	89 81       	ldd	r24, Y+1	; 0x01
    144e:	28 2f       	mov	r18, r24
    1450:	30 e0       	ldi	r19, 0x00	; 0
    1452:	8a 81       	ldd	r24, Y+2	; 0x02
    1454:	9b 81       	ldd	r25, Y+3	; 0x03
    1456:	fc 01       	movw	r30, r24
    1458:	e2 0f       	add	r30, r18
    145a:	f3 1f       	adc	r31, r19
    145c:	80 81       	ld	r24, Z
    145e:	83 32       	cpi	r24, 0x23	; 35
    1460:	31 f7       	brne	.-52     	; 0x142e <UART_RecieveString+0x30>
	{
		 i++;
		 str[i]=UART_RecieveByte();

	}
	str[i]='\0';
    1462:	89 81       	ldd	r24, Y+1	; 0x01
    1464:	28 2f       	mov	r18, r24
    1466:	30 e0       	ldi	r19, 0x00	; 0
    1468:	8a 81       	ldd	r24, Y+2	; 0x02
    146a:	9b 81       	ldd	r25, Y+3	; 0x03
    146c:	fc 01       	movw	r30, r24
    146e:	e2 0f       	add	r30, r18
    1470:	f3 1f       	adc	r31, r19
    1472:	10 82       	st	Z, r1
}
    1474:	0f 90       	pop	r0
    1476:	0f 90       	pop	r0
    1478:	0f 90       	pop	r0
    147a:	cf 91       	pop	r28
    147c:	df 91       	pop	r29
    147e:	1f 91       	pop	r17
    1480:	0f 91       	pop	r16
    1482:	08 95       	ret

00001484 <buzzer_init>:

#include"buzzer.h"
#include"gpio.h"

void buzzer_init()
{
    1484:	df 93       	push	r29
    1486:	cf 93       	push	r28
    1488:	cd b7       	in	r28, 0x3d	; 61
    148a:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(BUZZER_PORT, BUZZER_PIN, PIN_OUTPUT);
    148c:	81 e0       	ldi	r24, 0x01	; 1
    148e:	64 e0       	ldi	r22, 0x04	; 4
    1490:	41 e0       	ldi	r20, 0x01	; 1
    1492:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <GPIO_setupPinDirection>
	GPIO_writePin(BUZZER_PORT, BUZZER_PIN,LOGIC_LOW);
    1496:	81 e0       	ldi	r24, 0x01	; 1
    1498:	64 e0       	ldi	r22, 0x04	; 4
    149a:	40 e0       	ldi	r20, 0x00	; 0
    149c:	0e 94 56 0b 	call	0x16ac	; 0x16ac <GPIO_writePin>
}
    14a0:	cf 91       	pop	r28
    14a2:	df 91       	pop	r29
    14a4:	08 95       	ret

000014a6 <buzzer_ON>:

void buzzer_ON()
{
    14a6:	df 93       	push	r29
    14a8:	cf 93       	push	r28
    14aa:	cd b7       	in	r28, 0x3d	; 61
    14ac:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT, BUZZER_PIN,LOGIC_HIGH);
    14ae:	81 e0       	ldi	r24, 0x01	; 1
    14b0:	64 e0       	ldi	r22, 0x04	; 4
    14b2:	41 e0       	ldi	r20, 0x01	; 1
    14b4:	0e 94 56 0b 	call	0x16ac	; 0x16ac <GPIO_writePin>
}
    14b8:	cf 91       	pop	r28
    14ba:	df 91       	pop	r29
    14bc:	08 95       	ret

000014be <buzzer_OFF>:

void buzzer_OFF()
{
    14be:	df 93       	push	r29
    14c0:	cf 93       	push	r28
    14c2:	cd b7       	in	r28, 0x3d	; 61
    14c4:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT, BUZZER_PIN, LOGIC_LOW);
    14c6:	81 e0       	ldi	r24, 0x01	; 1
    14c8:	64 e0       	ldi	r22, 0x04	; 4
    14ca:	40 e0       	ldi	r20, 0x00	; 0
    14cc:	0e 94 56 0b 	call	0x16ac	; 0x16ac <GPIO_writePin>
}
    14d0:	cf 91       	pop	r28
    14d2:	df 91       	pop	r29
    14d4:	08 95       	ret

000014d6 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    14d6:	df 93       	push	r29
    14d8:	cf 93       	push	r28
    14da:	00 d0       	rcall	.+0      	; 0x14dc <GPIO_setupPinDirection+0x6>
    14dc:	00 d0       	rcall	.+0      	; 0x14de <GPIO_setupPinDirection+0x8>
    14de:	0f 92       	push	r0
    14e0:	cd b7       	in	r28, 0x3d	; 61
    14e2:	de b7       	in	r29, 0x3e	; 62
    14e4:	89 83       	std	Y+1, r24	; 0x01
    14e6:	6a 83       	std	Y+2, r22	; 0x02
    14e8:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    14ea:	8a 81       	ldd	r24, Y+2	; 0x02
    14ec:	88 30       	cpi	r24, 0x08	; 8
    14ee:	08 f0       	brcs	.+2      	; 0x14f2 <GPIO_setupPinDirection+0x1c>
    14f0:	d5 c0       	rjmp	.+426    	; 0x169c <GPIO_setupPinDirection+0x1c6>
    14f2:	89 81       	ldd	r24, Y+1	; 0x01
    14f4:	84 30       	cpi	r24, 0x04	; 4
    14f6:	08 f0       	brcs	.+2      	; 0x14fa <GPIO_setupPinDirection+0x24>
    14f8:	d1 c0       	rjmp	.+418    	; 0x169c <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    14fa:	89 81       	ldd	r24, Y+1	; 0x01
    14fc:	28 2f       	mov	r18, r24
    14fe:	30 e0       	ldi	r19, 0x00	; 0
    1500:	3d 83       	std	Y+5, r19	; 0x05
    1502:	2c 83       	std	Y+4, r18	; 0x04
    1504:	8c 81       	ldd	r24, Y+4	; 0x04
    1506:	9d 81       	ldd	r25, Y+5	; 0x05
    1508:	81 30       	cpi	r24, 0x01	; 1
    150a:	91 05       	cpc	r25, r1
    150c:	09 f4       	brne	.+2      	; 0x1510 <GPIO_setupPinDirection+0x3a>
    150e:	43 c0       	rjmp	.+134    	; 0x1596 <GPIO_setupPinDirection+0xc0>
    1510:	2c 81       	ldd	r18, Y+4	; 0x04
    1512:	3d 81       	ldd	r19, Y+5	; 0x05
    1514:	22 30       	cpi	r18, 0x02	; 2
    1516:	31 05       	cpc	r19, r1
    1518:	2c f4       	brge	.+10     	; 0x1524 <GPIO_setupPinDirection+0x4e>
    151a:	8c 81       	ldd	r24, Y+4	; 0x04
    151c:	9d 81       	ldd	r25, Y+5	; 0x05
    151e:	00 97       	sbiw	r24, 0x00	; 0
    1520:	71 f0       	breq	.+28     	; 0x153e <GPIO_setupPinDirection+0x68>
    1522:	bc c0       	rjmp	.+376    	; 0x169c <GPIO_setupPinDirection+0x1c6>
    1524:	2c 81       	ldd	r18, Y+4	; 0x04
    1526:	3d 81       	ldd	r19, Y+5	; 0x05
    1528:	22 30       	cpi	r18, 0x02	; 2
    152a:	31 05       	cpc	r19, r1
    152c:	09 f4       	brne	.+2      	; 0x1530 <GPIO_setupPinDirection+0x5a>
    152e:	5f c0       	rjmp	.+190    	; 0x15ee <GPIO_setupPinDirection+0x118>
    1530:	8c 81       	ldd	r24, Y+4	; 0x04
    1532:	9d 81       	ldd	r25, Y+5	; 0x05
    1534:	83 30       	cpi	r24, 0x03	; 3
    1536:	91 05       	cpc	r25, r1
    1538:	09 f4       	brne	.+2      	; 0x153c <GPIO_setupPinDirection+0x66>
    153a:	85 c0       	rjmp	.+266    	; 0x1646 <GPIO_setupPinDirection+0x170>
    153c:	af c0       	rjmp	.+350    	; 0x169c <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    153e:	8b 81       	ldd	r24, Y+3	; 0x03
    1540:	81 30       	cpi	r24, 0x01	; 1
    1542:	a1 f4       	brne	.+40     	; 0x156c <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1544:	aa e3       	ldi	r26, 0x3A	; 58
    1546:	b0 e0       	ldi	r27, 0x00	; 0
    1548:	ea e3       	ldi	r30, 0x3A	; 58
    154a:	f0 e0       	ldi	r31, 0x00	; 0
    154c:	80 81       	ld	r24, Z
    154e:	48 2f       	mov	r20, r24
    1550:	8a 81       	ldd	r24, Y+2	; 0x02
    1552:	28 2f       	mov	r18, r24
    1554:	30 e0       	ldi	r19, 0x00	; 0
    1556:	81 e0       	ldi	r24, 0x01	; 1
    1558:	90 e0       	ldi	r25, 0x00	; 0
    155a:	02 2e       	mov	r0, r18
    155c:	02 c0       	rjmp	.+4      	; 0x1562 <GPIO_setupPinDirection+0x8c>
    155e:	88 0f       	add	r24, r24
    1560:	99 1f       	adc	r25, r25
    1562:	0a 94       	dec	r0
    1564:	e2 f7       	brpl	.-8      	; 0x155e <GPIO_setupPinDirection+0x88>
    1566:	84 2b       	or	r24, r20
    1568:	8c 93       	st	X, r24
    156a:	98 c0       	rjmp	.+304    	; 0x169c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    156c:	aa e3       	ldi	r26, 0x3A	; 58
    156e:	b0 e0       	ldi	r27, 0x00	; 0
    1570:	ea e3       	ldi	r30, 0x3A	; 58
    1572:	f0 e0       	ldi	r31, 0x00	; 0
    1574:	80 81       	ld	r24, Z
    1576:	48 2f       	mov	r20, r24
    1578:	8a 81       	ldd	r24, Y+2	; 0x02
    157a:	28 2f       	mov	r18, r24
    157c:	30 e0       	ldi	r19, 0x00	; 0
    157e:	81 e0       	ldi	r24, 0x01	; 1
    1580:	90 e0       	ldi	r25, 0x00	; 0
    1582:	02 2e       	mov	r0, r18
    1584:	02 c0       	rjmp	.+4      	; 0x158a <GPIO_setupPinDirection+0xb4>
    1586:	88 0f       	add	r24, r24
    1588:	99 1f       	adc	r25, r25
    158a:	0a 94       	dec	r0
    158c:	e2 f7       	brpl	.-8      	; 0x1586 <GPIO_setupPinDirection+0xb0>
    158e:	80 95       	com	r24
    1590:	84 23       	and	r24, r20
    1592:	8c 93       	st	X, r24
    1594:	83 c0       	rjmp	.+262    	; 0x169c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1596:	8b 81       	ldd	r24, Y+3	; 0x03
    1598:	81 30       	cpi	r24, 0x01	; 1
    159a:	a1 f4       	brne	.+40     	; 0x15c4 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    159c:	a7 e3       	ldi	r26, 0x37	; 55
    159e:	b0 e0       	ldi	r27, 0x00	; 0
    15a0:	e7 e3       	ldi	r30, 0x37	; 55
    15a2:	f0 e0       	ldi	r31, 0x00	; 0
    15a4:	80 81       	ld	r24, Z
    15a6:	48 2f       	mov	r20, r24
    15a8:	8a 81       	ldd	r24, Y+2	; 0x02
    15aa:	28 2f       	mov	r18, r24
    15ac:	30 e0       	ldi	r19, 0x00	; 0
    15ae:	81 e0       	ldi	r24, 0x01	; 1
    15b0:	90 e0       	ldi	r25, 0x00	; 0
    15b2:	02 2e       	mov	r0, r18
    15b4:	02 c0       	rjmp	.+4      	; 0x15ba <GPIO_setupPinDirection+0xe4>
    15b6:	88 0f       	add	r24, r24
    15b8:	99 1f       	adc	r25, r25
    15ba:	0a 94       	dec	r0
    15bc:	e2 f7       	brpl	.-8      	; 0x15b6 <GPIO_setupPinDirection+0xe0>
    15be:	84 2b       	or	r24, r20
    15c0:	8c 93       	st	X, r24
    15c2:	6c c0       	rjmp	.+216    	; 0x169c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    15c4:	a7 e3       	ldi	r26, 0x37	; 55
    15c6:	b0 e0       	ldi	r27, 0x00	; 0
    15c8:	e7 e3       	ldi	r30, 0x37	; 55
    15ca:	f0 e0       	ldi	r31, 0x00	; 0
    15cc:	80 81       	ld	r24, Z
    15ce:	48 2f       	mov	r20, r24
    15d0:	8a 81       	ldd	r24, Y+2	; 0x02
    15d2:	28 2f       	mov	r18, r24
    15d4:	30 e0       	ldi	r19, 0x00	; 0
    15d6:	81 e0       	ldi	r24, 0x01	; 1
    15d8:	90 e0       	ldi	r25, 0x00	; 0
    15da:	02 2e       	mov	r0, r18
    15dc:	02 c0       	rjmp	.+4      	; 0x15e2 <GPIO_setupPinDirection+0x10c>
    15de:	88 0f       	add	r24, r24
    15e0:	99 1f       	adc	r25, r25
    15e2:	0a 94       	dec	r0
    15e4:	e2 f7       	brpl	.-8      	; 0x15de <GPIO_setupPinDirection+0x108>
    15e6:	80 95       	com	r24
    15e8:	84 23       	and	r24, r20
    15ea:	8c 93       	st	X, r24
    15ec:	57 c0       	rjmp	.+174    	; 0x169c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    15ee:	8b 81       	ldd	r24, Y+3	; 0x03
    15f0:	81 30       	cpi	r24, 0x01	; 1
    15f2:	a1 f4       	brne	.+40     	; 0x161c <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    15f4:	a4 e3       	ldi	r26, 0x34	; 52
    15f6:	b0 e0       	ldi	r27, 0x00	; 0
    15f8:	e4 e3       	ldi	r30, 0x34	; 52
    15fa:	f0 e0       	ldi	r31, 0x00	; 0
    15fc:	80 81       	ld	r24, Z
    15fe:	48 2f       	mov	r20, r24
    1600:	8a 81       	ldd	r24, Y+2	; 0x02
    1602:	28 2f       	mov	r18, r24
    1604:	30 e0       	ldi	r19, 0x00	; 0
    1606:	81 e0       	ldi	r24, 0x01	; 1
    1608:	90 e0       	ldi	r25, 0x00	; 0
    160a:	02 2e       	mov	r0, r18
    160c:	02 c0       	rjmp	.+4      	; 0x1612 <GPIO_setupPinDirection+0x13c>
    160e:	88 0f       	add	r24, r24
    1610:	99 1f       	adc	r25, r25
    1612:	0a 94       	dec	r0
    1614:	e2 f7       	brpl	.-8      	; 0x160e <GPIO_setupPinDirection+0x138>
    1616:	84 2b       	or	r24, r20
    1618:	8c 93       	st	X, r24
    161a:	40 c0       	rjmp	.+128    	; 0x169c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    161c:	a4 e3       	ldi	r26, 0x34	; 52
    161e:	b0 e0       	ldi	r27, 0x00	; 0
    1620:	e4 e3       	ldi	r30, 0x34	; 52
    1622:	f0 e0       	ldi	r31, 0x00	; 0
    1624:	80 81       	ld	r24, Z
    1626:	48 2f       	mov	r20, r24
    1628:	8a 81       	ldd	r24, Y+2	; 0x02
    162a:	28 2f       	mov	r18, r24
    162c:	30 e0       	ldi	r19, 0x00	; 0
    162e:	81 e0       	ldi	r24, 0x01	; 1
    1630:	90 e0       	ldi	r25, 0x00	; 0
    1632:	02 2e       	mov	r0, r18
    1634:	02 c0       	rjmp	.+4      	; 0x163a <GPIO_setupPinDirection+0x164>
    1636:	88 0f       	add	r24, r24
    1638:	99 1f       	adc	r25, r25
    163a:	0a 94       	dec	r0
    163c:	e2 f7       	brpl	.-8      	; 0x1636 <GPIO_setupPinDirection+0x160>
    163e:	80 95       	com	r24
    1640:	84 23       	and	r24, r20
    1642:	8c 93       	st	X, r24
    1644:	2b c0       	rjmp	.+86     	; 0x169c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1646:	8b 81       	ldd	r24, Y+3	; 0x03
    1648:	81 30       	cpi	r24, 0x01	; 1
    164a:	a1 f4       	brne	.+40     	; 0x1674 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    164c:	a1 e3       	ldi	r26, 0x31	; 49
    164e:	b0 e0       	ldi	r27, 0x00	; 0
    1650:	e1 e3       	ldi	r30, 0x31	; 49
    1652:	f0 e0       	ldi	r31, 0x00	; 0
    1654:	80 81       	ld	r24, Z
    1656:	48 2f       	mov	r20, r24
    1658:	8a 81       	ldd	r24, Y+2	; 0x02
    165a:	28 2f       	mov	r18, r24
    165c:	30 e0       	ldi	r19, 0x00	; 0
    165e:	81 e0       	ldi	r24, 0x01	; 1
    1660:	90 e0       	ldi	r25, 0x00	; 0
    1662:	02 2e       	mov	r0, r18
    1664:	02 c0       	rjmp	.+4      	; 0x166a <GPIO_setupPinDirection+0x194>
    1666:	88 0f       	add	r24, r24
    1668:	99 1f       	adc	r25, r25
    166a:	0a 94       	dec	r0
    166c:	e2 f7       	brpl	.-8      	; 0x1666 <GPIO_setupPinDirection+0x190>
    166e:	84 2b       	or	r24, r20
    1670:	8c 93       	st	X, r24
    1672:	14 c0       	rjmp	.+40     	; 0x169c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1674:	a1 e3       	ldi	r26, 0x31	; 49
    1676:	b0 e0       	ldi	r27, 0x00	; 0
    1678:	e1 e3       	ldi	r30, 0x31	; 49
    167a:	f0 e0       	ldi	r31, 0x00	; 0
    167c:	80 81       	ld	r24, Z
    167e:	48 2f       	mov	r20, r24
    1680:	8a 81       	ldd	r24, Y+2	; 0x02
    1682:	28 2f       	mov	r18, r24
    1684:	30 e0       	ldi	r19, 0x00	; 0
    1686:	81 e0       	ldi	r24, 0x01	; 1
    1688:	90 e0       	ldi	r25, 0x00	; 0
    168a:	02 2e       	mov	r0, r18
    168c:	02 c0       	rjmp	.+4      	; 0x1692 <GPIO_setupPinDirection+0x1bc>
    168e:	88 0f       	add	r24, r24
    1690:	99 1f       	adc	r25, r25
    1692:	0a 94       	dec	r0
    1694:	e2 f7       	brpl	.-8      	; 0x168e <GPIO_setupPinDirection+0x1b8>
    1696:	80 95       	com	r24
    1698:	84 23       	and	r24, r20
    169a:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    169c:	0f 90       	pop	r0
    169e:	0f 90       	pop	r0
    16a0:	0f 90       	pop	r0
    16a2:	0f 90       	pop	r0
    16a4:	0f 90       	pop	r0
    16a6:	cf 91       	pop	r28
    16a8:	df 91       	pop	r29
    16aa:	08 95       	ret

000016ac <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    16ac:	df 93       	push	r29
    16ae:	cf 93       	push	r28
    16b0:	00 d0       	rcall	.+0      	; 0x16b2 <GPIO_writePin+0x6>
    16b2:	00 d0       	rcall	.+0      	; 0x16b4 <GPIO_writePin+0x8>
    16b4:	0f 92       	push	r0
    16b6:	cd b7       	in	r28, 0x3d	; 61
    16b8:	de b7       	in	r29, 0x3e	; 62
    16ba:	89 83       	std	Y+1, r24	; 0x01
    16bc:	6a 83       	std	Y+2, r22	; 0x02
    16be:	4b 83       	std	Y+3, r20	; 0x03
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    16c0:	8a 81       	ldd	r24, Y+2	; 0x02
    16c2:	88 30       	cpi	r24, 0x08	; 8
    16c4:	08 f0       	brcs	.+2      	; 0x16c8 <GPIO_writePin+0x1c>
    16c6:	d5 c0       	rjmp	.+426    	; 0x1872 <GPIO_writePin+0x1c6>
    16c8:	89 81       	ldd	r24, Y+1	; 0x01
    16ca:	84 30       	cpi	r24, 0x04	; 4
    16cc:	08 f0       	brcs	.+2      	; 0x16d0 <GPIO_writePin+0x24>
    16ce:	d1 c0       	rjmp	.+418    	; 0x1872 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    16d0:	89 81       	ldd	r24, Y+1	; 0x01
    16d2:	28 2f       	mov	r18, r24
    16d4:	30 e0       	ldi	r19, 0x00	; 0
    16d6:	3d 83       	std	Y+5, r19	; 0x05
    16d8:	2c 83       	std	Y+4, r18	; 0x04
    16da:	8c 81       	ldd	r24, Y+4	; 0x04
    16dc:	9d 81       	ldd	r25, Y+5	; 0x05
    16de:	81 30       	cpi	r24, 0x01	; 1
    16e0:	91 05       	cpc	r25, r1
    16e2:	09 f4       	brne	.+2      	; 0x16e6 <GPIO_writePin+0x3a>
    16e4:	43 c0       	rjmp	.+134    	; 0x176c <GPIO_writePin+0xc0>
    16e6:	2c 81       	ldd	r18, Y+4	; 0x04
    16e8:	3d 81       	ldd	r19, Y+5	; 0x05
    16ea:	22 30       	cpi	r18, 0x02	; 2
    16ec:	31 05       	cpc	r19, r1
    16ee:	2c f4       	brge	.+10     	; 0x16fa <GPIO_writePin+0x4e>
    16f0:	8c 81       	ldd	r24, Y+4	; 0x04
    16f2:	9d 81       	ldd	r25, Y+5	; 0x05
    16f4:	00 97       	sbiw	r24, 0x00	; 0
    16f6:	71 f0       	breq	.+28     	; 0x1714 <GPIO_writePin+0x68>
    16f8:	bc c0       	rjmp	.+376    	; 0x1872 <GPIO_writePin+0x1c6>
    16fa:	2c 81       	ldd	r18, Y+4	; 0x04
    16fc:	3d 81       	ldd	r19, Y+5	; 0x05
    16fe:	22 30       	cpi	r18, 0x02	; 2
    1700:	31 05       	cpc	r19, r1
    1702:	09 f4       	brne	.+2      	; 0x1706 <GPIO_writePin+0x5a>
    1704:	5f c0       	rjmp	.+190    	; 0x17c4 <GPIO_writePin+0x118>
    1706:	8c 81       	ldd	r24, Y+4	; 0x04
    1708:	9d 81       	ldd	r25, Y+5	; 0x05
    170a:	83 30       	cpi	r24, 0x03	; 3
    170c:	91 05       	cpc	r25, r1
    170e:	09 f4       	brne	.+2      	; 0x1712 <GPIO_writePin+0x66>
    1710:	85 c0       	rjmp	.+266    	; 0x181c <GPIO_writePin+0x170>
    1712:	af c0       	rjmp	.+350    	; 0x1872 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1714:	8b 81       	ldd	r24, Y+3	; 0x03
    1716:	81 30       	cpi	r24, 0x01	; 1
    1718:	a1 f4       	brne	.+40     	; 0x1742 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    171a:	ab e3       	ldi	r26, 0x3B	; 59
    171c:	b0 e0       	ldi	r27, 0x00	; 0
    171e:	eb e3       	ldi	r30, 0x3B	; 59
    1720:	f0 e0       	ldi	r31, 0x00	; 0
    1722:	80 81       	ld	r24, Z
    1724:	48 2f       	mov	r20, r24
    1726:	8a 81       	ldd	r24, Y+2	; 0x02
    1728:	28 2f       	mov	r18, r24
    172a:	30 e0       	ldi	r19, 0x00	; 0
    172c:	81 e0       	ldi	r24, 0x01	; 1
    172e:	90 e0       	ldi	r25, 0x00	; 0
    1730:	02 2e       	mov	r0, r18
    1732:	02 c0       	rjmp	.+4      	; 0x1738 <GPIO_writePin+0x8c>
    1734:	88 0f       	add	r24, r24
    1736:	99 1f       	adc	r25, r25
    1738:	0a 94       	dec	r0
    173a:	e2 f7       	brpl	.-8      	; 0x1734 <GPIO_writePin+0x88>
    173c:	84 2b       	or	r24, r20
    173e:	8c 93       	st	X, r24
    1740:	98 c0       	rjmp	.+304    	; 0x1872 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1742:	ab e3       	ldi	r26, 0x3B	; 59
    1744:	b0 e0       	ldi	r27, 0x00	; 0
    1746:	eb e3       	ldi	r30, 0x3B	; 59
    1748:	f0 e0       	ldi	r31, 0x00	; 0
    174a:	80 81       	ld	r24, Z
    174c:	48 2f       	mov	r20, r24
    174e:	8a 81       	ldd	r24, Y+2	; 0x02
    1750:	28 2f       	mov	r18, r24
    1752:	30 e0       	ldi	r19, 0x00	; 0
    1754:	81 e0       	ldi	r24, 0x01	; 1
    1756:	90 e0       	ldi	r25, 0x00	; 0
    1758:	02 2e       	mov	r0, r18
    175a:	02 c0       	rjmp	.+4      	; 0x1760 <GPIO_writePin+0xb4>
    175c:	88 0f       	add	r24, r24
    175e:	99 1f       	adc	r25, r25
    1760:	0a 94       	dec	r0
    1762:	e2 f7       	brpl	.-8      	; 0x175c <GPIO_writePin+0xb0>
    1764:	80 95       	com	r24
    1766:	84 23       	and	r24, r20
    1768:	8c 93       	st	X, r24
    176a:	83 c0       	rjmp	.+262    	; 0x1872 <GPIO_writePin+0x1c6>

			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    176c:	8b 81       	ldd	r24, Y+3	; 0x03
    176e:	81 30       	cpi	r24, 0x01	; 1
    1770:	a1 f4       	brne	.+40     	; 0x179a <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1772:	a8 e3       	ldi	r26, 0x38	; 56
    1774:	b0 e0       	ldi	r27, 0x00	; 0
    1776:	e8 e3       	ldi	r30, 0x38	; 56
    1778:	f0 e0       	ldi	r31, 0x00	; 0
    177a:	80 81       	ld	r24, Z
    177c:	48 2f       	mov	r20, r24
    177e:	8a 81       	ldd	r24, Y+2	; 0x02
    1780:	28 2f       	mov	r18, r24
    1782:	30 e0       	ldi	r19, 0x00	; 0
    1784:	81 e0       	ldi	r24, 0x01	; 1
    1786:	90 e0       	ldi	r25, 0x00	; 0
    1788:	02 2e       	mov	r0, r18
    178a:	02 c0       	rjmp	.+4      	; 0x1790 <GPIO_writePin+0xe4>
    178c:	88 0f       	add	r24, r24
    178e:	99 1f       	adc	r25, r25
    1790:	0a 94       	dec	r0
    1792:	e2 f7       	brpl	.-8      	; 0x178c <GPIO_writePin+0xe0>
    1794:	84 2b       	or	r24, r20
    1796:	8c 93       	st	X, r24
    1798:	6c c0       	rjmp	.+216    	; 0x1872 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    179a:	a8 e3       	ldi	r26, 0x38	; 56
    179c:	b0 e0       	ldi	r27, 0x00	; 0
    179e:	e8 e3       	ldi	r30, 0x38	; 56
    17a0:	f0 e0       	ldi	r31, 0x00	; 0
    17a2:	80 81       	ld	r24, Z
    17a4:	48 2f       	mov	r20, r24
    17a6:	8a 81       	ldd	r24, Y+2	; 0x02
    17a8:	28 2f       	mov	r18, r24
    17aa:	30 e0       	ldi	r19, 0x00	; 0
    17ac:	81 e0       	ldi	r24, 0x01	; 1
    17ae:	90 e0       	ldi	r25, 0x00	; 0
    17b0:	02 2e       	mov	r0, r18
    17b2:	02 c0       	rjmp	.+4      	; 0x17b8 <GPIO_writePin+0x10c>
    17b4:	88 0f       	add	r24, r24
    17b6:	99 1f       	adc	r25, r25
    17b8:	0a 94       	dec	r0
    17ba:	e2 f7       	brpl	.-8      	; 0x17b4 <GPIO_writePin+0x108>
    17bc:	80 95       	com	r24
    17be:	84 23       	and	r24, r20
    17c0:	8c 93       	st	X, r24
    17c2:	57 c0       	rjmp	.+174    	; 0x1872 <GPIO_writePin+0x1c6>

			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    17c4:	8b 81       	ldd	r24, Y+3	; 0x03
    17c6:	81 30       	cpi	r24, 0x01	; 1
    17c8:	a1 f4       	brne	.+40     	; 0x17f2 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    17ca:	a5 e3       	ldi	r26, 0x35	; 53
    17cc:	b0 e0       	ldi	r27, 0x00	; 0
    17ce:	e5 e3       	ldi	r30, 0x35	; 53
    17d0:	f0 e0       	ldi	r31, 0x00	; 0
    17d2:	80 81       	ld	r24, Z
    17d4:	48 2f       	mov	r20, r24
    17d6:	8a 81       	ldd	r24, Y+2	; 0x02
    17d8:	28 2f       	mov	r18, r24
    17da:	30 e0       	ldi	r19, 0x00	; 0
    17dc:	81 e0       	ldi	r24, 0x01	; 1
    17de:	90 e0       	ldi	r25, 0x00	; 0
    17e0:	02 2e       	mov	r0, r18
    17e2:	02 c0       	rjmp	.+4      	; 0x17e8 <GPIO_writePin+0x13c>
    17e4:	88 0f       	add	r24, r24
    17e6:	99 1f       	adc	r25, r25
    17e8:	0a 94       	dec	r0
    17ea:	e2 f7       	brpl	.-8      	; 0x17e4 <GPIO_writePin+0x138>
    17ec:	84 2b       	or	r24, r20
    17ee:	8c 93       	st	X, r24
    17f0:	40 c0       	rjmp	.+128    	; 0x1872 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    17f2:	a5 e3       	ldi	r26, 0x35	; 53
    17f4:	b0 e0       	ldi	r27, 0x00	; 0
    17f6:	e5 e3       	ldi	r30, 0x35	; 53
    17f8:	f0 e0       	ldi	r31, 0x00	; 0
    17fa:	80 81       	ld	r24, Z
    17fc:	48 2f       	mov	r20, r24
    17fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1800:	28 2f       	mov	r18, r24
    1802:	30 e0       	ldi	r19, 0x00	; 0
    1804:	81 e0       	ldi	r24, 0x01	; 1
    1806:	90 e0       	ldi	r25, 0x00	; 0
    1808:	02 2e       	mov	r0, r18
    180a:	02 c0       	rjmp	.+4      	; 0x1810 <GPIO_writePin+0x164>
    180c:	88 0f       	add	r24, r24
    180e:	99 1f       	adc	r25, r25
    1810:	0a 94       	dec	r0
    1812:	e2 f7       	brpl	.-8      	; 0x180c <GPIO_writePin+0x160>
    1814:	80 95       	com	r24
    1816:	84 23       	and	r24, r20
    1818:	8c 93       	st	X, r24
    181a:	2b c0       	rjmp	.+86     	; 0x1872 <GPIO_writePin+0x1c6>

			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    181c:	8b 81       	ldd	r24, Y+3	; 0x03
    181e:	81 30       	cpi	r24, 0x01	; 1
    1820:	a1 f4       	brne	.+40     	; 0x184a <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1822:	a2 e3       	ldi	r26, 0x32	; 50
    1824:	b0 e0       	ldi	r27, 0x00	; 0
    1826:	e2 e3       	ldi	r30, 0x32	; 50
    1828:	f0 e0       	ldi	r31, 0x00	; 0
    182a:	80 81       	ld	r24, Z
    182c:	48 2f       	mov	r20, r24
    182e:	8a 81       	ldd	r24, Y+2	; 0x02
    1830:	28 2f       	mov	r18, r24
    1832:	30 e0       	ldi	r19, 0x00	; 0
    1834:	81 e0       	ldi	r24, 0x01	; 1
    1836:	90 e0       	ldi	r25, 0x00	; 0
    1838:	02 2e       	mov	r0, r18
    183a:	02 c0       	rjmp	.+4      	; 0x1840 <GPIO_writePin+0x194>
    183c:	88 0f       	add	r24, r24
    183e:	99 1f       	adc	r25, r25
    1840:	0a 94       	dec	r0
    1842:	e2 f7       	brpl	.-8      	; 0x183c <GPIO_writePin+0x190>
    1844:	84 2b       	or	r24, r20
    1846:	8c 93       	st	X, r24
    1848:	14 c0       	rjmp	.+40     	; 0x1872 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    184a:	a2 e3       	ldi	r26, 0x32	; 50
    184c:	b0 e0       	ldi	r27, 0x00	; 0
    184e:	e2 e3       	ldi	r30, 0x32	; 50
    1850:	f0 e0       	ldi	r31, 0x00	; 0
    1852:	80 81       	ld	r24, Z
    1854:	48 2f       	mov	r20, r24
    1856:	8a 81       	ldd	r24, Y+2	; 0x02
    1858:	28 2f       	mov	r18, r24
    185a:	30 e0       	ldi	r19, 0x00	; 0
    185c:	81 e0       	ldi	r24, 0x01	; 1
    185e:	90 e0       	ldi	r25, 0x00	; 0
    1860:	02 2e       	mov	r0, r18
    1862:	02 c0       	rjmp	.+4      	; 0x1868 <GPIO_writePin+0x1bc>
    1864:	88 0f       	add	r24, r24
    1866:	99 1f       	adc	r25, r25
    1868:	0a 94       	dec	r0
    186a:	e2 f7       	brpl	.-8      	; 0x1864 <GPIO_writePin+0x1b8>
    186c:	80 95       	com	r24
    186e:	84 23       	and	r24, r20
    1870:	8c 93       	st	X, r24

			}
			break;
		}
	}
}
    1872:	0f 90       	pop	r0
    1874:	0f 90       	pop	r0
    1876:	0f 90       	pop	r0
    1878:	0f 90       	pop	r0
    187a:	0f 90       	pop	r0
    187c:	cf 91       	pop	r28
    187e:	df 91       	pop	r29
    1880:	08 95       	ret

00001882 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1882:	df 93       	push	r29
    1884:	cf 93       	push	r28
    1886:	00 d0       	rcall	.+0      	; 0x1888 <GPIO_readPin+0x6>
    1888:	00 d0       	rcall	.+0      	; 0x188a <GPIO_readPin+0x8>
    188a:	0f 92       	push	r0
    188c:	cd b7       	in	r28, 0x3d	; 61
    188e:	de b7       	in	r29, 0x3e	; 62
    1890:	89 83       	std	Y+1, r24	; 0x01
    1892:	6a 83       	std	Y+2, r22	; 0x02

	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1894:	8a 81       	ldd	r24, Y+2	; 0x02
    1896:	88 30       	cpi	r24, 0x08	; 8
    1898:	18 f4       	brcc	.+6      	; 0x18a0 <GPIO_readPin+0x1e>
    189a:	89 81       	ldd	r24, Y+1	; 0x01
    189c:	84 30       	cpi	r24, 0x04	; 4
    189e:	10 f0       	brcs	.+4      	; 0x18a4 <GPIO_readPin+0x22>
	{
		return LOGIC_LOW;
    18a0:	1d 82       	std	Y+5, r1	; 0x05
    18a2:	82 c0       	rjmp	.+260    	; 0x19a8 <GPIO_readPin+0x126>
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    18a4:	89 81       	ldd	r24, Y+1	; 0x01
    18a6:	28 2f       	mov	r18, r24
    18a8:	30 e0       	ldi	r19, 0x00	; 0
    18aa:	3c 83       	std	Y+4, r19	; 0x04
    18ac:	2b 83       	std	Y+3, r18	; 0x03
    18ae:	4b 81       	ldd	r20, Y+3	; 0x03
    18b0:	5c 81       	ldd	r21, Y+4	; 0x04
    18b2:	41 30       	cpi	r20, 0x01	; 1
    18b4:	51 05       	cpc	r21, r1
    18b6:	79 f1       	breq	.+94     	; 0x1916 <GPIO_readPin+0x94>
    18b8:	8b 81       	ldd	r24, Y+3	; 0x03
    18ba:	9c 81       	ldd	r25, Y+4	; 0x04
    18bc:	82 30       	cpi	r24, 0x02	; 2
    18be:	91 05       	cpc	r25, r1
    18c0:	34 f4       	brge	.+12     	; 0x18ce <GPIO_readPin+0x4c>
    18c2:	2b 81       	ldd	r18, Y+3	; 0x03
    18c4:	3c 81       	ldd	r19, Y+4	; 0x04
    18c6:	21 15       	cp	r18, r1
    18c8:	31 05       	cpc	r19, r1
    18ca:	69 f0       	breq	.+26     	; 0x18e6 <GPIO_readPin+0x64>
    18cc:	6c c0       	rjmp	.+216    	; 0x19a6 <GPIO_readPin+0x124>
    18ce:	4b 81       	ldd	r20, Y+3	; 0x03
    18d0:	5c 81       	ldd	r21, Y+4	; 0x04
    18d2:	42 30       	cpi	r20, 0x02	; 2
    18d4:	51 05       	cpc	r21, r1
    18d6:	b9 f1       	breq	.+110    	; 0x1946 <GPIO_readPin+0xc4>
    18d8:	8b 81       	ldd	r24, Y+3	; 0x03
    18da:	9c 81       	ldd	r25, Y+4	; 0x04
    18dc:	83 30       	cpi	r24, 0x03	; 3
    18de:	91 05       	cpc	r25, r1
    18e0:	09 f4       	brne	.+2      	; 0x18e4 <GPIO_readPin+0x62>
    18e2:	49 c0       	rjmp	.+146    	; 0x1976 <GPIO_readPin+0xf4>
    18e4:	60 c0       	rjmp	.+192    	; 0x19a6 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    18e6:	e9 e3       	ldi	r30, 0x39	; 57
    18e8:	f0 e0       	ldi	r31, 0x00	; 0
    18ea:	80 81       	ld	r24, Z
    18ec:	28 2f       	mov	r18, r24
    18ee:	30 e0       	ldi	r19, 0x00	; 0
    18f0:	8a 81       	ldd	r24, Y+2	; 0x02
    18f2:	88 2f       	mov	r24, r24
    18f4:	90 e0       	ldi	r25, 0x00	; 0
    18f6:	a9 01       	movw	r20, r18
    18f8:	02 c0       	rjmp	.+4      	; 0x18fe <GPIO_readPin+0x7c>
    18fa:	55 95       	asr	r21
    18fc:	47 95       	ror	r20
    18fe:	8a 95       	dec	r24
    1900:	e2 f7       	brpl	.-8      	; 0x18fa <GPIO_readPin+0x78>
    1902:	ca 01       	movw	r24, r20
    1904:	81 70       	andi	r24, 0x01	; 1
    1906:	90 70       	andi	r25, 0x00	; 0
    1908:	88 23       	and	r24, r24
    190a:	19 f0       	breq	.+6      	; 0x1912 <GPIO_readPin+0x90>
			{
				return LOGIC_HIGH;
    190c:	51 e0       	ldi	r21, 0x01	; 1
    190e:	5d 83       	std	Y+5, r21	; 0x05
    1910:	4b c0       	rjmp	.+150    	; 0x19a8 <GPIO_readPin+0x126>
			}
			else
			{
				return LOGIC_LOW;
    1912:	1d 82       	std	Y+5, r1	; 0x05
    1914:	49 c0       	rjmp	.+146    	; 0x19a8 <GPIO_readPin+0x126>

			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1916:	e6 e3       	ldi	r30, 0x36	; 54
    1918:	f0 e0       	ldi	r31, 0x00	; 0
    191a:	80 81       	ld	r24, Z
    191c:	28 2f       	mov	r18, r24
    191e:	30 e0       	ldi	r19, 0x00	; 0
    1920:	8a 81       	ldd	r24, Y+2	; 0x02
    1922:	88 2f       	mov	r24, r24
    1924:	90 e0       	ldi	r25, 0x00	; 0
    1926:	a9 01       	movw	r20, r18
    1928:	02 c0       	rjmp	.+4      	; 0x192e <GPIO_readPin+0xac>
    192a:	55 95       	asr	r21
    192c:	47 95       	ror	r20
    192e:	8a 95       	dec	r24
    1930:	e2 f7       	brpl	.-8      	; 0x192a <GPIO_readPin+0xa8>
    1932:	ca 01       	movw	r24, r20
    1934:	81 70       	andi	r24, 0x01	; 1
    1936:	90 70       	andi	r25, 0x00	; 0
    1938:	88 23       	and	r24, r24
    193a:	19 f0       	breq	.+6      	; 0x1942 <GPIO_readPin+0xc0>
			{
				return LOGIC_HIGH;
    193c:	51 e0       	ldi	r21, 0x01	; 1
    193e:	5d 83       	std	Y+5, r21	; 0x05
    1940:	33 c0       	rjmp	.+102    	; 0x19a8 <GPIO_readPin+0x126>
			}
			else
			{
				return LOGIC_LOW;
    1942:	1d 82       	std	Y+5, r1	; 0x05
    1944:	31 c0       	rjmp	.+98     	; 0x19a8 <GPIO_readPin+0x126>

			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1946:	e3 e3       	ldi	r30, 0x33	; 51
    1948:	f0 e0       	ldi	r31, 0x00	; 0
    194a:	80 81       	ld	r24, Z
    194c:	28 2f       	mov	r18, r24
    194e:	30 e0       	ldi	r19, 0x00	; 0
    1950:	8a 81       	ldd	r24, Y+2	; 0x02
    1952:	88 2f       	mov	r24, r24
    1954:	90 e0       	ldi	r25, 0x00	; 0
    1956:	a9 01       	movw	r20, r18
    1958:	02 c0       	rjmp	.+4      	; 0x195e <GPIO_readPin+0xdc>
    195a:	55 95       	asr	r21
    195c:	47 95       	ror	r20
    195e:	8a 95       	dec	r24
    1960:	e2 f7       	brpl	.-8      	; 0x195a <GPIO_readPin+0xd8>
    1962:	ca 01       	movw	r24, r20
    1964:	81 70       	andi	r24, 0x01	; 1
    1966:	90 70       	andi	r25, 0x00	; 0
    1968:	88 23       	and	r24, r24
    196a:	19 f0       	breq	.+6      	; 0x1972 <GPIO_readPin+0xf0>
			{
				return LOGIC_HIGH;
    196c:	51 e0       	ldi	r21, 0x01	; 1
    196e:	5d 83       	std	Y+5, r21	; 0x05
    1970:	1b c0       	rjmp	.+54     	; 0x19a8 <GPIO_readPin+0x126>
			}
			else
			{
				return LOGIC_LOW;
    1972:	1d 82       	std	Y+5, r1	; 0x05
    1974:	19 c0       	rjmp	.+50     	; 0x19a8 <GPIO_readPin+0x126>

			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1976:	e0 e3       	ldi	r30, 0x30	; 48
    1978:	f0 e0       	ldi	r31, 0x00	; 0
    197a:	80 81       	ld	r24, Z
    197c:	28 2f       	mov	r18, r24
    197e:	30 e0       	ldi	r19, 0x00	; 0
    1980:	8a 81       	ldd	r24, Y+2	; 0x02
    1982:	88 2f       	mov	r24, r24
    1984:	90 e0       	ldi	r25, 0x00	; 0
    1986:	a9 01       	movw	r20, r18
    1988:	02 c0       	rjmp	.+4      	; 0x198e <GPIO_readPin+0x10c>
    198a:	55 95       	asr	r21
    198c:	47 95       	ror	r20
    198e:	8a 95       	dec	r24
    1990:	e2 f7       	brpl	.-8      	; 0x198a <GPIO_readPin+0x108>
    1992:	ca 01       	movw	r24, r20
    1994:	81 70       	andi	r24, 0x01	; 1
    1996:	90 70       	andi	r25, 0x00	; 0
    1998:	88 23       	and	r24, r24
    199a:	19 f0       	breq	.+6      	; 0x19a2 <GPIO_readPin+0x120>
			{
				return LOGIC_HIGH;
    199c:	51 e0       	ldi	r21, 0x01	; 1
    199e:	5d 83       	std	Y+5, r21	; 0x05
    19a0:	03 c0       	rjmp	.+6      	; 0x19a8 <GPIO_readPin+0x126>
			}
			else
			{
				return LOGIC_LOW;
    19a2:	1d 82       	std	Y+5, r1	; 0x05
    19a4:	01 c0       	rjmp	.+2      	; 0x19a8 <GPIO_readPin+0x126>

			}
			break;
		}
	}
	return LOGIC_LOW;
    19a6:	1d 82       	std	Y+5, r1	; 0x05
    19a8:	8d 81       	ldd	r24, Y+5	; 0x05
}
    19aa:	0f 90       	pop	r0
    19ac:	0f 90       	pop	r0
    19ae:	0f 90       	pop	r0
    19b0:	0f 90       	pop	r0
    19b2:	0f 90       	pop	r0
    19b4:	cf 91       	pop	r28
    19b6:	df 91       	pop	r29
    19b8:	08 95       	ret

000019ba <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    19ba:	df 93       	push	r29
    19bc:	cf 93       	push	r28
    19be:	00 d0       	rcall	.+0      	; 0x19c0 <GPIO_setupPortDirection+0x6>
    19c0:	00 d0       	rcall	.+0      	; 0x19c2 <GPIO_setupPortDirection+0x8>
    19c2:	cd b7       	in	r28, 0x3d	; 61
    19c4:	de b7       	in	r29, 0x3e	; 62
    19c6:	89 83       	std	Y+1, r24	; 0x01
    19c8:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    19ca:	89 81       	ldd	r24, Y+1	; 0x01
    19cc:	84 30       	cpi	r24, 0x04	; 4
    19ce:	90 f5       	brcc	.+100    	; 0x1a34 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    19d0:	89 81       	ldd	r24, Y+1	; 0x01
    19d2:	28 2f       	mov	r18, r24
    19d4:	30 e0       	ldi	r19, 0x00	; 0
    19d6:	3c 83       	std	Y+4, r19	; 0x04
    19d8:	2b 83       	std	Y+3, r18	; 0x03
    19da:	8b 81       	ldd	r24, Y+3	; 0x03
    19dc:	9c 81       	ldd	r25, Y+4	; 0x04
    19de:	81 30       	cpi	r24, 0x01	; 1
    19e0:	91 05       	cpc	r25, r1
    19e2:	d1 f0       	breq	.+52     	; 0x1a18 <GPIO_setupPortDirection+0x5e>
    19e4:	2b 81       	ldd	r18, Y+3	; 0x03
    19e6:	3c 81       	ldd	r19, Y+4	; 0x04
    19e8:	22 30       	cpi	r18, 0x02	; 2
    19ea:	31 05       	cpc	r19, r1
    19ec:	2c f4       	brge	.+10     	; 0x19f8 <GPIO_setupPortDirection+0x3e>
    19ee:	8b 81       	ldd	r24, Y+3	; 0x03
    19f0:	9c 81       	ldd	r25, Y+4	; 0x04
    19f2:	00 97       	sbiw	r24, 0x00	; 0
    19f4:	61 f0       	breq	.+24     	; 0x1a0e <GPIO_setupPortDirection+0x54>
    19f6:	1e c0       	rjmp	.+60     	; 0x1a34 <GPIO_setupPortDirection+0x7a>
    19f8:	2b 81       	ldd	r18, Y+3	; 0x03
    19fa:	3c 81       	ldd	r19, Y+4	; 0x04
    19fc:	22 30       	cpi	r18, 0x02	; 2
    19fe:	31 05       	cpc	r19, r1
    1a00:	81 f0       	breq	.+32     	; 0x1a22 <GPIO_setupPortDirection+0x68>
    1a02:	8b 81       	ldd	r24, Y+3	; 0x03
    1a04:	9c 81       	ldd	r25, Y+4	; 0x04
    1a06:	83 30       	cpi	r24, 0x03	; 3
    1a08:	91 05       	cpc	r25, r1
    1a0a:	81 f0       	breq	.+32     	; 0x1a2c <GPIO_setupPortDirection+0x72>
    1a0c:	13 c0       	rjmp	.+38     	; 0x1a34 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1a0e:	ea e3       	ldi	r30, 0x3A	; 58
    1a10:	f0 e0       	ldi	r31, 0x00	; 0
    1a12:	8a 81       	ldd	r24, Y+2	; 0x02
    1a14:	80 83       	st	Z, r24
    1a16:	0e c0       	rjmp	.+28     	; 0x1a34 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1a18:	e7 e3       	ldi	r30, 0x37	; 55
    1a1a:	f0 e0       	ldi	r31, 0x00	; 0
    1a1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a1e:	80 83       	st	Z, r24
    1a20:	09 c0       	rjmp	.+18     	; 0x1a34 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1a22:	e4 e3       	ldi	r30, 0x34	; 52
    1a24:	f0 e0       	ldi	r31, 0x00	; 0
    1a26:	8a 81       	ldd	r24, Y+2	; 0x02
    1a28:	80 83       	st	Z, r24
    1a2a:	04 c0       	rjmp	.+8      	; 0x1a34 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1a2c:	e1 e3       	ldi	r30, 0x31	; 49
    1a2e:	f0 e0       	ldi	r31, 0x00	; 0
    1a30:	8a 81       	ldd	r24, Y+2	; 0x02
    1a32:	80 83       	st	Z, r24
			break;
		}
	}
}
    1a34:	0f 90       	pop	r0
    1a36:	0f 90       	pop	r0
    1a38:	0f 90       	pop	r0
    1a3a:	0f 90       	pop	r0
    1a3c:	cf 91       	pop	r28
    1a3e:	df 91       	pop	r29
    1a40:	08 95       	ret

00001a42 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1a42:	df 93       	push	r29
    1a44:	cf 93       	push	r28
    1a46:	00 d0       	rcall	.+0      	; 0x1a48 <GPIO_writePort+0x6>
    1a48:	00 d0       	rcall	.+0      	; 0x1a4a <GPIO_writePort+0x8>
    1a4a:	cd b7       	in	r28, 0x3d	; 61
    1a4c:	de b7       	in	r29, 0x3e	; 62
    1a4e:	89 83       	std	Y+1, r24	; 0x01
    1a50:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num >= NUM_OF_PORTS)
    1a52:	89 81       	ldd	r24, Y+1	; 0x01
    1a54:	84 30       	cpi	r24, 0x04	; 4
    1a56:	90 f5       	brcc	.+100    	; 0x1abc <GPIO_writePort+0x7a>
			/* Do Nothing */
		}
		else
		{
		/* Setup the port direction as required */
		switch(port_num)
    1a58:	89 81       	ldd	r24, Y+1	; 0x01
    1a5a:	28 2f       	mov	r18, r24
    1a5c:	30 e0       	ldi	r19, 0x00	; 0
    1a5e:	3c 83       	std	Y+4, r19	; 0x04
    1a60:	2b 83       	std	Y+3, r18	; 0x03
    1a62:	8b 81       	ldd	r24, Y+3	; 0x03
    1a64:	9c 81       	ldd	r25, Y+4	; 0x04
    1a66:	81 30       	cpi	r24, 0x01	; 1
    1a68:	91 05       	cpc	r25, r1
    1a6a:	d1 f0       	breq	.+52     	; 0x1aa0 <GPIO_writePort+0x5e>
    1a6c:	2b 81       	ldd	r18, Y+3	; 0x03
    1a6e:	3c 81       	ldd	r19, Y+4	; 0x04
    1a70:	22 30       	cpi	r18, 0x02	; 2
    1a72:	31 05       	cpc	r19, r1
    1a74:	2c f4       	brge	.+10     	; 0x1a80 <GPIO_writePort+0x3e>
    1a76:	8b 81       	ldd	r24, Y+3	; 0x03
    1a78:	9c 81       	ldd	r25, Y+4	; 0x04
    1a7a:	00 97       	sbiw	r24, 0x00	; 0
    1a7c:	61 f0       	breq	.+24     	; 0x1a96 <GPIO_writePort+0x54>
    1a7e:	1e c0       	rjmp	.+60     	; 0x1abc <GPIO_writePort+0x7a>
    1a80:	2b 81       	ldd	r18, Y+3	; 0x03
    1a82:	3c 81       	ldd	r19, Y+4	; 0x04
    1a84:	22 30       	cpi	r18, 0x02	; 2
    1a86:	31 05       	cpc	r19, r1
    1a88:	81 f0       	breq	.+32     	; 0x1aaa <GPIO_writePort+0x68>
    1a8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a8c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a8e:	83 30       	cpi	r24, 0x03	; 3
    1a90:	91 05       	cpc	r25, r1
    1a92:	81 f0       	breq	.+32     	; 0x1ab4 <GPIO_writePort+0x72>
    1a94:	13 c0       	rjmp	.+38     	; 0x1abc <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1a96:	eb e3       	ldi	r30, 0x3B	; 59
    1a98:	f0 e0       	ldi	r31, 0x00	; 0
    1a9a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a9c:	80 83       	st	Z, r24
    1a9e:	0e c0       	rjmp	.+28     	; 0x1abc <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1aa0:	e8 e3       	ldi	r30, 0x38	; 56
    1aa2:	f0 e0       	ldi	r31, 0x00	; 0
    1aa4:	8a 81       	ldd	r24, Y+2	; 0x02
    1aa6:	80 83       	st	Z, r24
    1aa8:	09 c0       	rjmp	.+18     	; 0x1abc <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1aaa:	e5 e3       	ldi	r30, 0x35	; 53
    1aac:	f0 e0       	ldi	r31, 0x00	; 0
    1aae:	8a 81       	ldd	r24, Y+2	; 0x02
    1ab0:	80 83       	st	Z, r24
    1ab2:	04 c0       	rjmp	.+8      	; 0x1abc <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1ab4:	e2 e3       	ldi	r30, 0x32	; 50
    1ab6:	f0 e0       	ldi	r31, 0x00	; 0
    1ab8:	8a 81       	ldd	r24, Y+2	; 0x02
    1aba:	80 83       	st	Z, r24
			break;
		}
	}
}
    1abc:	0f 90       	pop	r0
    1abe:	0f 90       	pop	r0
    1ac0:	0f 90       	pop	r0
    1ac2:	0f 90       	pop	r0
    1ac4:	cf 91       	pop	r28
    1ac6:	df 91       	pop	r29
    1ac8:	08 95       	ret

00001aca <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1aca:	df 93       	push	r29
    1acc:	cf 93       	push	r28
    1ace:	00 d0       	rcall	.+0      	; 0x1ad0 <GPIO_readPort+0x6>
    1ad0:	00 d0       	rcall	.+0      	; 0x1ad2 <GPIO_readPort+0x8>
    1ad2:	cd b7       	in	r28, 0x3d	; 61
    1ad4:	de b7       	in	r29, 0x3e	; 62
    1ad6:	89 83       	std	Y+1, r24	; 0x01
	if(port_num >= NUM_OF_PORTS)
    1ad8:	89 81       	ldd	r24, Y+1	; 0x01
    1ada:	84 30       	cpi	r24, 0x04	; 4
    1adc:	10 f0       	brcs	.+4      	; 0x1ae2 <GPIO_readPort+0x18>
	{
		return 0;
    1ade:	1c 82       	std	Y+4, r1	; 0x04
    1ae0:	34 c0       	rjmp	.+104    	; 0x1b4a <GPIO_readPort+0x80>
	}
	else
	{
	/* Setup the port direction as required */
	switch(port_num)
    1ae2:	89 81       	ldd	r24, Y+1	; 0x01
    1ae4:	28 2f       	mov	r18, r24
    1ae6:	30 e0       	ldi	r19, 0x00	; 0
    1ae8:	3b 83       	std	Y+3, r19	; 0x03
    1aea:	2a 83       	std	Y+2, r18	; 0x02
    1aec:	8a 81       	ldd	r24, Y+2	; 0x02
    1aee:	9b 81       	ldd	r25, Y+3	; 0x03
    1af0:	81 30       	cpi	r24, 0x01	; 1
    1af2:	91 05       	cpc	r25, r1
    1af4:	d1 f0       	breq	.+52     	; 0x1b2a <GPIO_readPort+0x60>
    1af6:	2a 81       	ldd	r18, Y+2	; 0x02
    1af8:	3b 81       	ldd	r19, Y+3	; 0x03
    1afa:	22 30       	cpi	r18, 0x02	; 2
    1afc:	31 05       	cpc	r19, r1
    1afe:	2c f4       	brge	.+10     	; 0x1b0a <GPIO_readPort+0x40>
    1b00:	8a 81       	ldd	r24, Y+2	; 0x02
    1b02:	9b 81       	ldd	r25, Y+3	; 0x03
    1b04:	00 97       	sbiw	r24, 0x00	; 0
    1b06:	61 f0       	breq	.+24     	; 0x1b20 <GPIO_readPort+0x56>
    1b08:	1f c0       	rjmp	.+62     	; 0x1b48 <GPIO_readPort+0x7e>
    1b0a:	2a 81       	ldd	r18, Y+2	; 0x02
    1b0c:	3b 81       	ldd	r19, Y+3	; 0x03
    1b0e:	22 30       	cpi	r18, 0x02	; 2
    1b10:	31 05       	cpc	r19, r1
    1b12:	81 f0       	breq	.+32     	; 0x1b34 <GPIO_readPort+0x6a>
    1b14:	8a 81       	ldd	r24, Y+2	; 0x02
    1b16:	9b 81       	ldd	r25, Y+3	; 0x03
    1b18:	83 30       	cpi	r24, 0x03	; 3
    1b1a:	91 05       	cpc	r25, r1
    1b1c:	81 f0       	breq	.+32     	; 0x1b3e <GPIO_readPort+0x74>
    1b1e:	14 c0       	rjmp	.+40     	; 0x1b48 <GPIO_readPort+0x7e>
	{
	case PORTA_ID:
		return PINA;
    1b20:	e9 e3       	ldi	r30, 0x39	; 57
    1b22:	f0 e0       	ldi	r31, 0x00	; 0
    1b24:	90 81       	ld	r25, Z
    1b26:	9c 83       	std	Y+4, r25	; 0x04
    1b28:	10 c0       	rjmp	.+32     	; 0x1b4a <GPIO_readPort+0x80>
		break;
	case PORTB_ID:
		return PINB;
    1b2a:	e6 e3       	ldi	r30, 0x36	; 54
    1b2c:	f0 e0       	ldi	r31, 0x00	; 0
    1b2e:	20 81       	ld	r18, Z
    1b30:	2c 83       	std	Y+4, r18	; 0x04
    1b32:	0b c0       	rjmp	.+22     	; 0x1b4a <GPIO_readPort+0x80>
		break;
	case PORTC_ID:
		return PINC;
    1b34:	e3 e3       	ldi	r30, 0x33	; 51
    1b36:	f0 e0       	ldi	r31, 0x00	; 0
    1b38:	30 81       	ld	r19, Z
    1b3a:	3c 83       	std	Y+4, r19	; 0x04
    1b3c:	06 c0       	rjmp	.+12     	; 0x1b4a <GPIO_readPort+0x80>
		break;
	case PORTD_ID:
		return PIND;
    1b3e:	e0 e3       	ldi	r30, 0x30	; 48
    1b40:	f0 e0       	ldi	r31, 0x00	; 0
    1b42:	80 81       	ld	r24, Z
    1b44:	8c 83       	std	Y+4, r24	; 0x04
    1b46:	01 c0       	rjmp	.+2      	; 0x1b4a <GPIO_readPort+0x80>
		break;
	}
  }
	return 0;
    1b48:	1c 82       	std	Y+4, r1	; 0x04
    1b4a:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1b4c:	0f 90       	pop	r0
    1b4e:	0f 90       	pop	r0
    1b50:	0f 90       	pop	r0
    1b52:	0f 90       	pop	r0
    1b54:	cf 91       	pop	r28
    1b56:	df 91       	pop	r29
    1b58:	08 95       	ret

00001b5a <TIMER1_counter>:
void options();
void open_door();
uint8 second;

void TIMER1_counter()
{
    1b5a:	df 93       	push	r29
    1b5c:	cf 93       	push	r28
    1b5e:	cd b7       	in	r28, 0x3d	; 61
    1b60:	de b7       	in	r29, 0x3e	; 62

	second++;
    1b62:	80 91 8e 00 	lds	r24, 0x008E
    1b66:	8f 5f       	subi	r24, 0xFF	; 255
    1b68:	80 93 8e 00 	sts	0x008E, r24
}
    1b6c:	cf 91       	pop	r28
    1b6e:	df 91       	pop	r29
    1b70:	08 95       	ret

00001b72 <delay>:
void delay(uint16 sec)
{
    1b72:	df 93       	push	r29
    1b74:	cf 93       	push	r28
    1b76:	cd b7       	in	r28, 0x3d	; 61
    1b78:	de b7       	in	r29, 0x3e	; 62
    1b7a:	2d 97       	sbiw	r28, 0x0d	; 13
    1b7c:	0f b6       	in	r0, 0x3f	; 63
    1b7e:	f8 94       	cli
    1b80:	de bf       	out	0x3e, r29	; 62
    1b82:	0f be       	out	0x3f, r0	; 63
    1b84:	cd bf       	out	0x3d, r28	; 61
    1b86:	98 87       	std	Y+8, r25	; 0x08
    1b88:	8f 83       	std	Y+7, r24	; 0x07
	second=0;
    1b8a:	10 92 8e 00 	sts	0x008E, r1
	Timer1_ConfigType timer1_config={0, 15624, PRESCALER_64, COMPARE};
    1b8e:	ce 01       	movw	r24, r28
    1b90:	01 96       	adiw	r24, 0x01	; 1
    1b92:	9a 87       	std	Y+10, r25	; 0x0a
    1b94:	89 87       	std	Y+9, r24	; 0x09
    1b96:	e8 e6       	ldi	r30, 0x68	; 104
    1b98:	f0 e0       	ldi	r31, 0x00	; 0
    1b9a:	fc 87       	std	Y+12, r31	; 0x0c
    1b9c:	eb 87       	std	Y+11, r30	; 0x0b
    1b9e:	f6 e0       	ldi	r31, 0x06	; 6
    1ba0:	fd 87       	std	Y+13, r31	; 0x0d
    1ba2:	eb 85       	ldd	r30, Y+11	; 0x0b
    1ba4:	fc 85       	ldd	r31, Y+12	; 0x0c
    1ba6:	00 80       	ld	r0, Z
    1ba8:	8b 85       	ldd	r24, Y+11	; 0x0b
    1baa:	9c 85       	ldd	r25, Y+12	; 0x0c
    1bac:	01 96       	adiw	r24, 0x01	; 1
    1bae:	9c 87       	std	Y+12, r25	; 0x0c
    1bb0:	8b 87       	std	Y+11, r24	; 0x0b
    1bb2:	e9 85       	ldd	r30, Y+9	; 0x09
    1bb4:	fa 85       	ldd	r31, Y+10	; 0x0a
    1bb6:	00 82       	st	Z, r0
    1bb8:	89 85       	ldd	r24, Y+9	; 0x09
    1bba:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bbc:	01 96       	adiw	r24, 0x01	; 1
    1bbe:	9a 87       	std	Y+10, r25	; 0x0a
    1bc0:	89 87       	std	Y+9, r24	; 0x09
    1bc2:	9d 85       	ldd	r25, Y+13	; 0x0d
    1bc4:	91 50       	subi	r25, 0x01	; 1
    1bc6:	9d 87       	std	Y+13, r25	; 0x0d
    1bc8:	ed 85       	ldd	r30, Y+13	; 0x0d
    1bca:	ee 23       	and	r30, r30
    1bcc:	51 f7       	brne	.-44     	; 0x1ba2 <delay+0x30>
	Timer1_init(&timer1_config);
    1bce:	ce 01       	movw	r24, r28
    1bd0:	01 96       	adiw	r24, 0x01	; 1
    1bd2:	0e 94 bc 08 	call	0x1178	; 0x1178 <Timer1_init>
	Timer1_setCallBack(TIMER1_counter);
    1bd6:	8d ea       	ldi	r24, 0xAD	; 173
    1bd8:	9d e0       	ldi	r25, 0x0D	; 13
    1bda:	0e 94 24 09 	call	0x1248	; 0x1248 <Timer1_setCallBack>
	while(second!=sec);
    1bde:	80 91 8e 00 	lds	r24, 0x008E
    1be2:	28 2f       	mov	r18, r24
    1be4:	30 e0       	ldi	r19, 0x00	; 0
    1be6:	8f 81       	ldd	r24, Y+7	; 0x07
    1be8:	98 85       	ldd	r25, Y+8	; 0x08
    1bea:	28 17       	cp	r18, r24
    1bec:	39 07       	cpc	r19, r25
    1bee:	b9 f7       	brne	.-18     	; 0x1bde <delay+0x6c>
}
    1bf0:	2d 96       	adiw	r28, 0x0d	; 13
    1bf2:	0f b6       	in	r0, 0x3f	; 63
    1bf4:	f8 94       	cli
    1bf6:	de bf       	out	0x3e, r29	; 62
    1bf8:	0f be       	out	0x3f, r0	; 63
    1bfa:	cd bf       	out	0x3d, r28	; 61
    1bfc:	cf 91       	pop	r28
    1bfe:	df 91       	pop	r29
    1c00:	08 95       	ret

00001c02 <receiveArraysFromUART>:
void receiveArraysFromUART()
{
    1c02:	0f 93       	push	r16
    1c04:	1f 93       	push	r17
    1c06:	df 93       	push	r29
    1c08:	cf 93       	push	r28
    1c0a:	00 d0       	rcall	.+0      	; 0x1c0c <receiveArraysFromUART+0xa>
    1c0c:	00 d0       	rcall	.+0      	; 0x1c0e <receiveArraysFromUART+0xc>
    1c0e:	cd b7       	in	r28, 0x3d	; 61
    1c10:	de b7       	in	r29, 0x3e	; 62
	for (int i = 0; i < SIZE_PASSWORD; i++) {
    1c12:	1c 82       	std	Y+4, r1	; 0x04
    1c14:	1b 82       	std	Y+3, r1	; 0x03
    1c16:	0d c0       	rjmp	.+26     	; 0x1c32 <receiveArraysFromUART+0x30>
		receivedArray1[i] = UART_RecieveByte();
    1c18:	0b 81       	ldd	r16, Y+3	; 0x03
    1c1a:	1c 81       	ldd	r17, Y+4	; 0x04
    1c1c:	0e 94 c7 09 	call	0x138e	; 0x138e <UART_RecieveByte>
    1c20:	f8 01       	movw	r30, r16
    1c22:	e2 58       	subi	r30, 0x82	; 130
    1c24:	ff 4f       	sbci	r31, 0xFF	; 255
    1c26:	80 83       	st	Z, r24
	Timer1_setCallBack(TIMER1_counter);
	while(second!=sec);
}
void receiveArraysFromUART()
{
	for (int i = 0; i < SIZE_PASSWORD; i++) {
    1c28:	8b 81       	ldd	r24, Y+3	; 0x03
    1c2a:	9c 81       	ldd	r25, Y+4	; 0x04
    1c2c:	01 96       	adiw	r24, 0x01	; 1
    1c2e:	9c 83       	std	Y+4, r25	; 0x04
    1c30:	8b 83       	std	Y+3, r24	; 0x03
    1c32:	8b 81       	ldd	r24, Y+3	; 0x03
    1c34:	9c 81       	ldd	r25, Y+4	; 0x04
    1c36:	85 30       	cpi	r24, 0x05	; 5
    1c38:	91 05       	cpc	r25, r1
    1c3a:	74 f3       	brlt	.-36     	; 0x1c18 <receiveArraysFromUART+0x16>
		receivedArray1[i] = UART_RecieveByte();
	}

	for (int i = 0; i < SIZE_PASSWORD; i++) {
    1c3c:	1a 82       	std	Y+2, r1	; 0x02
    1c3e:	19 82       	std	Y+1, r1	; 0x01
    1c40:	0d c0       	rjmp	.+26     	; 0x1c5c <receiveArraysFromUART+0x5a>
		receivedArray2[i] = UART_RecieveByte();
    1c42:	09 81       	ldd	r16, Y+1	; 0x01
    1c44:	1a 81       	ldd	r17, Y+2	; 0x02
    1c46:	0e 94 c7 09 	call	0x138e	; 0x138e <UART_RecieveByte>
    1c4a:	f8 01       	movw	r30, r16
    1c4c:	ed 57       	subi	r30, 0x7D	; 125
    1c4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c50:	80 83       	st	Z, r24
{
	for (int i = 0; i < SIZE_PASSWORD; i++) {
		receivedArray1[i] = UART_RecieveByte();
	}

	for (int i = 0; i < SIZE_PASSWORD; i++) {
    1c52:	89 81       	ldd	r24, Y+1	; 0x01
    1c54:	9a 81       	ldd	r25, Y+2	; 0x02
    1c56:	01 96       	adiw	r24, 0x01	; 1
    1c58:	9a 83       	std	Y+2, r25	; 0x02
    1c5a:	89 83       	std	Y+1, r24	; 0x01
    1c5c:	89 81       	ldd	r24, Y+1	; 0x01
    1c5e:	9a 81       	ldd	r25, Y+2	; 0x02
    1c60:	85 30       	cpi	r24, 0x05	; 5
    1c62:	91 05       	cpc	r25, r1
    1c64:	74 f3       	brlt	.-36     	; 0x1c42 <receiveArraysFromUART+0x40>
		receivedArray2[i] = UART_RecieveByte();
	}
	// Only call compareArrays if the second array was received
	compareArrays(receivedArray1, receivedArray2);
    1c66:	8e e7       	ldi	r24, 0x7E	; 126
    1c68:	90 e0       	ldi	r25, 0x00	; 0
    1c6a:	23 e8       	ldi	r18, 0x83	; 131
    1c6c:	30 e0       	ldi	r19, 0x00	; 0
    1c6e:	b9 01       	movw	r22, r18
    1c70:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <compareArrays>
}
    1c74:	0f 90       	pop	r0
    1c76:	0f 90       	pop	r0
    1c78:	0f 90       	pop	r0
    1c7a:	0f 90       	pop	r0
    1c7c:	cf 91       	pop	r28
    1c7e:	df 91       	pop	r29
    1c80:	1f 91       	pop	r17
    1c82:	0f 91       	pop	r16
    1c84:	08 95       	ret

00001c86 <compareArrays>:
void compareArrays(const uint8 *array1, const uint8 *array2)
{
    1c86:	df 93       	push	r29
    1c88:	cf 93       	push	r28
    1c8a:	00 d0       	rcall	.+0      	; 0x1c8c <compareArrays+0x6>
    1c8c:	00 d0       	rcall	.+0      	; 0x1c8e <compareArrays+0x8>
    1c8e:	0f 92       	push	r0
    1c90:	cd b7       	in	r28, 0x3d	; 61
    1c92:	de b7       	in	r29, 0x3e	; 62
    1c94:	9b 83       	std	Y+3, r25	; 0x03
    1c96:	8a 83       	std	Y+2, r24	; 0x02
    1c98:	7d 83       	std	Y+5, r23	; 0x05
    1c9a:	6c 83       	std	Y+4, r22	; 0x04
	uint8 i;
	for (i = 0; i < SIZE_PASSWORD; i++) {
    1c9c:	19 82       	std	Y+1, r1	; 0x01
    1c9e:	1d c0       	rjmp	.+58     	; 0x1cda <compareArrays+0x54>
		if (array1[i] != array2[i]) {
    1ca0:	89 81       	ldd	r24, Y+1	; 0x01
    1ca2:	28 2f       	mov	r18, r24
    1ca4:	30 e0       	ldi	r19, 0x00	; 0
    1ca6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca8:	9b 81       	ldd	r25, Y+3	; 0x03
    1caa:	fc 01       	movw	r30, r24
    1cac:	e2 0f       	add	r30, r18
    1cae:	f3 1f       	adc	r31, r19
    1cb0:	40 81       	ld	r20, Z
    1cb2:	89 81       	ldd	r24, Y+1	; 0x01
    1cb4:	28 2f       	mov	r18, r24
    1cb6:	30 e0       	ldi	r19, 0x00	; 0
    1cb8:	8c 81       	ldd	r24, Y+4	; 0x04
    1cba:	9d 81       	ldd	r25, Y+5	; 0x05
    1cbc:	fc 01       	movw	r30, r24
    1cbe:	e2 0f       	add	r30, r18
    1cc0:	f3 1f       	adc	r31, r19
    1cc2:	80 81       	ld	r24, Z
    1cc4:	48 17       	cp	r20, r24
    1cc6:	31 f0       	breq	.+12     	; 0x1cd4 <compareArrays+0x4e>
			UART_SendByte(WRONG_PASSWORD);
    1cc8:	80 e0       	ldi	r24, 0x00	; 0
    1cca:	0e 94 b0 09 	call	0x1360	; 0x1360 <UART_SendByte>
			receiveArraysFromUART();
    1cce:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <receiveArraysFromUART>
    1cd2:	0d c0       	rjmp	.+26     	; 0x1cee <compareArrays+0x68>
	compareArrays(receivedArray1, receivedArray2);
}
void compareArrays(const uint8 *array1, const uint8 *array2)
{
	uint8 i;
	for (i = 0; i < SIZE_PASSWORD; i++) {
    1cd4:	89 81       	ldd	r24, Y+1	; 0x01
    1cd6:	8f 5f       	subi	r24, 0xFF	; 255
    1cd8:	89 83       	std	Y+1, r24	; 0x01
    1cda:	89 81       	ldd	r24, Y+1	; 0x01
    1cdc:	85 30       	cpi	r24, 0x05	; 5
    1cde:	00 f3       	brcs	.-64     	; 0x1ca0 <compareArrays+0x1a>
			UART_SendByte(WRONG_PASSWORD);
			receiveArraysFromUART();
			return;
		}
	}
	UART_SendByte(RIGHT_PASSWORD);
    1ce0:	81 e0       	ldi	r24, 0x01	; 1
    1ce2:	0e 94 b0 09 	call	0x1360	; 0x1360 <UART_SendByte>
	savePasswordToEEPROM(receivedArray1);
    1ce6:	8e e7       	ldi	r24, 0x7E	; 126
    1ce8:	90 e0       	ldi	r25, 0x00	; 0
    1cea:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <savePasswordToEEPROM>
}
    1cee:	0f 90       	pop	r0
    1cf0:	0f 90       	pop	r0
    1cf2:	0f 90       	pop	r0
    1cf4:	0f 90       	pop	r0
    1cf6:	0f 90       	pop	r0
    1cf8:	cf 91       	pop	r28
    1cfa:	df 91       	pop	r29
    1cfc:	08 95       	ret

00001cfe <savePasswordToEEPROM>:


void savePasswordToEEPROM(const uint8 *password) {
    1cfe:	df 93       	push	r29
    1d00:	cf 93       	push	r28
    1d02:	00 d0       	rcall	.+0      	; 0x1d04 <savePasswordToEEPROM+0x6>
    1d04:	0f 92       	push	r0
    1d06:	cd b7       	in	r28, 0x3d	; 61
    1d08:	de b7       	in	r29, 0x3e	; 62
    1d0a:	9b 83       	std	Y+3, r25	; 0x03
    1d0c:	8a 83       	std	Y+2, r24	; 0x02
	for (uint8 i = 0; i < SIZE_PASSWORD; i++) {
    1d0e:	19 82       	std	Y+1, r1	; 0x01
    1d10:	15 c0       	rjmp	.+42     	; 0x1d3c <savePasswordToEEPROM+0x3e>
		EEPROM_writeByte((0x01+i), password[i]);
    1d12:	89 81       	ldd	r24, Y+1	; 0x01
    1d14:	88 2f       	mov	r24, r24
    1d16:	90 e0       	ldi	r25, 0x00	; 0
    1d18:	01 96       	adiw	r24, 0x01	; 1
    1d1a:	ac 01       	movw	r20, r24
    1d1c:	89 81       	ldd	r24, Y+1	; 0x01
    1d1e:	28 2f       	mov	r18, r24
    1d20:	30 e0       	ldi	r19, 0x00	; 0
    1d22:	8a 81       	ldd	r24, Y+2	; 0x02
    1d24:	9b 81       	ldd	r25, Y+3	; 0x03
    1d26:	fc 01       	movw	r30, r24
    1d28:	e2 0f       	add	r30, r18
    1d2a:	f3 1f       	adc	r31, r19
    1d2c:	20 81       	ld	r18, Z
    1d2e:	ca 01       	movw	r24, r20
    1d30:	62 2f       	mov	r22, r18
    1d32:	0e 94 0b 06 	call	0xc16	; 0xc16 <EEPROM_writeByte>
	savePasswordToEEPROM(receivedArray1);
}


void savePasswordToEEPROM(const uint8 *password) {
	for (uint8 i = 0; i < SIZE_PASSWORD; i++) {
    1d36:	89 81       	ldd	r24, Y+1	; 0x01
    1d38:	8f 5f       	subi	r24, 0xFF	; 255
    1d3a:	89 83       	std	Y+1, r24	; 0x01
    1d3c:	89 81       	ldd	r24, Y+1	; 0x01
    1d3e:	85 30       	cpi	r24, 0x05	; 5
    1d40:	40 f3       	brcs	.-48     	; 0x1d12 <savePasswordToEEPROM+0x14>
		EEPROM_writeByte((0x01+i), password[i]);
	}
	options();
    1d42:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <options>
}
    1d46:	0f 90       	pop	r0
    1d48:	0f 90       	pop	r0
    1d4a:	0f 90       	pop	r0
    1d4c:	cf 91       	pop	r28
    1d4e:	df 91       	pop	r29
    1d50:	08 95       	ret

00001d52 <options>:
void options()
{
    1d52:	df 93       	push	r29
    1d54:	cf 93       	push	r28
    1d56:	0f 92       	push	r0
    1d58:	cd b7       	in	r28, 0x3d	; 61
    1d5a:	de b7       	in	r29, 0x3e	; 62
	uint8 indicator=UART_RecieveByte();
    1d5c:	0e 94 c7 09 	call	0x138e	; 0x138e <UART_RecieveByte>
    1d60:	89 83       	std	Y+1, r24	; 0x01
	if(indicator=='o')
    1d62:	89 81       	ldd	r24, Y+1	; 0x01
    1d64:	8f 36       	cpi	r24, 0x6F	; 111
    1d66:	29 f4       	brne	.+10     	; 0x1d72 <options+0x20>
	{
		confirm_password();
    1d68:	0e 94 e9 0e 	call	0x1dd2	; 0x1dd2 <confirm_password>
		open_door();
    1d6c:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <open_door>
    1d70:	07 c0       	rjmp	.+14     	; 0x1d80 <options+0x2e>
	}
	else if(indicator=='p')
    1d72:	89 81       	ldd	r24, Y+1	; 0x01
    1d74:	80 37       	cpi	r24, 0x70	; 112
    1d76:	21 f4       	brne	.+8      	; 0x1d80 <options+0x2e>
	{
		confirm_password();
    1d78:	0e 94 e9 0e 	call	0x1dd2	; 0x1dd2 <confirm_password>
		receiveArraysFromUART();
    1d7c:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <receiveArraysFromUART>
	}
}
    1d80:	0f 90       	pop	r0
    1d82:	cf 91       	pop	r28
    1d84:	df 91       	pop	r29
    1d86:	08 95       	ret

00001d88 <open_door>:
void open_door()
{
    1d88:	df 93       	push	r29
    1d8a:	cf 93       	push	r28
    1d8c:	cd b7       	in	r28, 0x3d	; 61
    1d8e:	de b7       	in	r29, 0x3e	; 62


	DcMotor_Rotate(CW,FULL_SPEED);
    1d90:	81 e0       	ldi	r24, 0x01	; 1
    1d92:	64 e6       	ldi	r22, 0x64	; 100
    1d94:	0e 94 b8 05 	call	0xb70	; 0xb70 <DcMotor_Rotate>


	delay(15);
    1d98:	8f e0       	ldi	r24, 0x0F	; 15
    1d9a:	90 e0       	ldi	r25, 0x00	; 0
    1d9c:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <delay>


	DcMotor_Rotate(OFF,OFF_SPEED);
    1da0:	80 e0       	ldi	r24, 0x00	; 0
    1da2:	60 e0       	ldi	r22, 0x00	; 0
    1da4:	0e 94 b8 05 	call	0xb70	; 0xb70 <DcMotor_Rotate>

	delay(15);
    1da8:	8f e0       	ldi	r24, 0x0F	; 15
    1daa:	90 e0       	ldi	r25, 0x00	; 0
    1dac:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <delay>



	DcMotor_Rotate(ACW,FULL_SPEED);
    1db0:	82 e0       	ldi	r24, 0x02	; 2
    1db2:	64 e6       	ldi	r22, 0x64	; 100
    1db4:	0e 94 b8 05 	call	0xb70	; 0xb70 <DcMotor_Rotate>

	delay(15);
    1db8:	8f e0       	ldi	r24, 0x0F	; 15
    1dba:	90 e0       	ldi	r25, 0x00	; 0
    1dbc:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <delay>

	DcMotor_Rotate(OFF,OFF_SPEED);
    1dc0:	80 e0       	ldi	r24, 0x00	; 0
    1dc2:	60 e0       	ldi	r22, 0x00	; 0
    1dc4:	0e 94 b8 05 	call	0xb70	; 0xb70 <DcMotor_Rotate>
	options();
    1dc8:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <options>



}
    1dcc:	cf 91       	pop	r28
    1dce:	df 91       	pop	r29
    1dd0:	08 95       	ret

00001dd2 <confirm_password>:
void confirm_password()
{
    1dd2:	0f 93       	push	r16
    1dd4:	1f 93       	push	r17
    1dd6:	df 93       	push	r29
    1dd8:	cf 93       	push	r28
    1dda:	00 d0       	rcall	.+0      	; 0x1ddc <confirm_password+0xa>
    1ddc:	cd b7       	in	r28, 0x3d	; 61
    1dde:	de b7       	in	r29, 0x3e	; 62
	uint8 val = 0;
    1de0:	1a 82       	std	Y+2, r1	; 0x02
	uint8 i;
	for (i = 0; i < SIZE_PASSWORD; i++) {
    1de2:	19 82       	std	Y+1, r1	; 0x01
    1de4:	0c c0       	rjmp	.+24     	; 0x1dfe <confirm_password+0x2c>
		receivedArray3[i] = UART_RecieveByte();
    1de6:	89 81       	ldd	r24, Y+1	; 0x01
    1de8:	08 2f       	mov	r16, r24
    1dea:	10 e0       	ldi	r17, 0x00	; 0
    1dec:	0e 94 c7 09 	call	0x138e	; 0x138e <UART_RecieveByte>
    1df0:	f8 01       	movw	r30, r16
    1df2:	e8 57       	subi	r30, 0x78	; 120
    1df4:	ff 4f       	sbci	r31, 0xFF	; 255
    1df6:	80 83       	st	Z, r24
}
void confirm_password()
{
	uint8 val = 0;
	uint8 i;
	for (i = 0; i < SIZE_PASSWORD; i++) {
    1df8:	89 81       	ldd	r24, Y+1	; 0x01
    1dfa:	8f 5f       	subi	r24, 0xFF	; 255
    1dfc:	89 83       	std	Y+1, r24	; 0x01
    1dfe:	89 81       	ldd	r24, Y+1	; 0x01
    1e00:	85 30       	cpi	r24, 0x05	; 5
    1e02:	88 f3       	brcs	.-30     	; 0x1de6 <confirm_password+0x14>
		receivedArray3[i] = UART_RecieveByte();
	}
	for (i= 0; i < SIZE_PASSWORD; i++) {
    1e04:	19 82       	std	Y+1, r1	; 0x01
    1e06:	2f c0       	rjmp	.+94     	; 0x1e66 <confirm_password+0x94>
		EEPROM_readByte((0x01)+i,&val);
    1e08:	89 81       	ldd	r24, Y+1	; 0x01
    1e0a:	88 2f       	mov	r24, r24
    1e0c:	90 e0       	ldi	r25, 0x00	; 0
    1e0e:	01 96       	adiw	r24, 0x01	; 1
    1e10:	9e 01       	movw	r18, r28
    1e12:	2e 5f       	subi	r18, 0xFE	; 254
    1e14:	3f 4f       	sbci	r19, 0xFF	; 255
    1e16:	b9 01       	movw	r22, r18
    1e18:	0e 94 c4 06 	call	0xd88	; 0xd88 <EEPROM_readByte>
		if((receivedArray3[i])!=val)
    1e1c:	89 81       	ldd	r24, Y+1	; 0x01
    1e1e:	88 2f       	mov	r24, r24
    1e20:	90 e0       	ldi	r25, 0x00	; 0
    1e22:	fc 01       	movw	r30, r24
    1e24:	e8 57       	subi	r30, 0x78	; 120
    1e26:	ff 4f       	sbci	r31, 0xFF	; 255
    1e28:	90 81       	ld	r25, Z
    1e2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e2c:	98 17       	cp	r25, r24
    1e2e:	c1 f0       	breq	.+48     	; 0x1e60 <confirm_password+0x8e>
		{
			UART_SendByte(NOT_CONFIRMED);
    1e30:	82 ef       	ldi	r24, 0xF2	; 242
    1e32:	0e 94 b0 09 	call	0x1360	; 0x1360 <UART_SendByte>
			error++;
    1e36:	80 91 8d 00 	lds	r24, 0x008D
    1e3a:	8f 5f       	subi	r24, 0xFF	; 255
    1e3c:	80 93 8d 00 	sts	0x008D, r24
			if(error==3)
    1e40:	80 91 8d 00 	lds	r24, 0x008D
    1e44:	83 30       	cpi	r24, 0x03	; 3
    1e46:	51 f4       	brne	.+20     	; 0x1e5c <confirm_password+0x8a>
			{

				buzzer_ON();
    1e48:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <buzzer_ON>
				delay(60);
    1e4c:	8c e3       	ldi	r24, 0x3C	; 60
    1e4e:	90 e0       	ldi	r25, 0x00	; 0
    1e50:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <delay>
				error=0;
    1e54:	10 92 8d 00 	sts	0x008D, r1
				options();
    1e58:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <options>
			}
			confirm_password();
    1e5c:	0e 94 e9 0e 	call	0x1dd2	; 0x1dd2 <confirm_password>
	uint8 val = 0;
	uint8 i;
	for (i = 0; i < SIZE_PASSWORD; i++) {
		receivedArray3[i] = UART_RecieveByte();
	}
	for (i= 0; i < SIZE_PASSWORD; i++) {
    1e60:	89 81       	ldd	r24, Y+1	; 0x01
    1e62:	8f 5f       	subi	r24, 0xFF	; 255
    1e64:	89 83       	std	Y+1, r24	; 0x01
    1e66:	89 81       	ldd	r24, Y+1	; 0x01
    1e68:	85 30       	cpi	r24, 0x05	; 5
    1e6a:	70 f2       	brcs	.-100    	; 0x1e08 <confirm_password+0x36>
				options();
			}
			confirm_password();
		}
	}
	if(i== SIZE_PASSWORD){
    1e6c:	89 81       	ldd	r24, Y+1	; 0x01
    1e6e:	85 30       	cpi	r24, 0x05	; 5
    1e70:	29 f4       	brne	.+10     	; 0x1e7c <confirm_password+0xaa>
		UART_SendByte(CONFIRMED);
    1e72:	81 ef       	ldi	r24, 0xF1	; 241
    1e74:	0e 94 b0 09 	call	0x1360	; 0x1360 <UART_SendByte>
		error=0;
    1e78:	10 92 8d 00 	sts	0x008D, r1
	}
}
    1e7c:	0f 90       	pop	r0
    1e7e:	0f 90       	pop	r0
    1e80:	cf 91       	pop	r28
    1e82:	df 91       	pop	r29
    1e84:	1f 91       	pop	r17
    1e86:	0f 91       	pop	r16
    1e88:	08 95       	ret

00001e8a <main>:

int main(void) {
    1e8a:	df 93       	push	r29
    1e8c:	cf 93       	push	r28
    1e8e:	cd b7       	in	r28, 0x3d	; 61
    1e90:	de b7       	in	r29, 0x3e	; 62
    1e92:	67 97       	sbiw	r28, 0x17	; 23
    1e94:	0f b6       	in	r0, 0x3f	; 63
    1e96:	f8 94       	cli
    1e98:	de bf       	out	0x3e, r29	; 62
    1e9a:	0f be       	out	0x3f, r0	; 63
    1e9c:	cd bf       	out	0x3d, r28	; 61
	buzzer_init();
    1e9e:	0e 94 42 0a 	call	0x1484	; 0x1484 <buzzer_init>
	UART_ConfigType config_uart = {BIT_DATA_8, NONE, STOP_BIT_1, 9600};
    1ea2:	ce 01       	movw	r24, r28
    1ea4:	01 96       	adiw	r24, 0x01	; 1
    1ea6:	9f 87       	std	Y+15, r25	; 0x0f
    1ea8:	8e 87       	std	Y+14, r24	; 0x0e
    1eaa:	e4 e7       	ldi	r30, 0x74	; 116
    1eac:	f0 e0       	ldi	r31, 0x00	; 0
    1eae:	f9 8b       	std	Y+17, r31	; 0x11
    1eb0:	e8 8b       	std	Y+16, r30	; 0x10
    1eb2:	f7 e0       	ldi	r31, 0x07	; 7
    1eb4:	fa 8b       	std	Y+18, r31	; 0x12
    1eb6:	e8 89       	ldd	r30, Y+16	; 0x10
    1eb8:	f9 89       	ldd	r31, Y+17	; 0x11
    1eba:	00 80       	ld	r0, Z
    1ebc:	88 89       	ldd	r24, Y+16	; 0x10
    1ebe:	99 89       	ldd	r25, Y+17	; 0x11
    1ec0:	01 96       	adiw	r24, 0x01	; 1
    1ec2:	99 8b       	std	Y+17, r25	; 0x11
    1ec4:	88 8b       	std	Y+16, r24	; 0x10
    1ec6:	ee 85       	ldd	r30, Y+14	; 0x0e
    1ec8:	ff 85       	ldd	r31, Y+15	; 0x0f
    1eca:	00 82       	st	Z, r0
    1ecc:	8e 85       	ldd	r24, Y+14	; 0x0e
    1ece:	9f 85       	ldd	r25, Y+15	; 0x0f
    1ed0:	01 96       	adiw	r24, 0x01	; 1
    1ed2:	9f 87       	std	Y+15, r25	; 0x0f
    1ed4:	8e 87       	std	Y+14, r24	; 0x0e
    1ed6:	9a 89       	ldd	r25, Y+18	; 0x12
    1ed8:	91 50       	subi	r25, 0x01	; 1
    1eda:	9a 8b       	std	Y+18, r25	; 0x12
    1edc:	ea 89       	ldd	r30, Y+18	; 0x12
    1ede:	ee 23       	and	r30, r30
    1ee0:	51 f7       	brne	.-44     	; 0x1eb6 <main+0x2c>
	UART_init(&config_uart);
    1ee2:	ce 01       	movw	r24, r28
    1ee4:	01 96       	adiw	r24, 0x01	; 1
    1ee6:	0e 94 36 09 	call	0x126c	; 0x126c <UART_init>

	TWI_ConfigType config_twi = {0x01, 400000};
    1eea:	ce 01       	movw	r24, r28
    1eec:	08 96       	adiw	r24, 0x08	; 8
    1eee:	9c 8b       	std	Y+20, r25	; 0x14
    1ef0:	8b 8b       	std	Y+19, r24	; 0x13
    1ef2:	ee e6       	ldi	r30, 0x6E	; 110
    1ef4:	f0 e0       	ldi	r31, 0x00	; 0
    1ef6:	fe 8b       	std	Y+22, r31	; 0x16
    1ef8:	ed 8b       	std	Y+21, r30	; 0x15
    1efa:	f6 e0       	ldi	r31, 0x06	; 6
    1efc:	ff 8b       	std	Y+23, r31	; 0x17
    1efe:	ed 89       	ldd	r30, Y+21	; 0x15
    1f00:	fe 89       	ldd	r31, Y+22	; 0x16
    1f02:	00 80       	ld	r0, Z
    1f04:	8d 89       	ldd	r24, Y+21	; 0x15
    1f06:	9e 89       	ldd	r25, Y+22	; 0x16
    1f08:	01 96       	adiw	r24, 0x01	; 1
    1f0a:	9e 8b       	std	Y+22, r25	; 0x16
    1f0c:	8d 8b       	std	Y+21, r24	; 0x15
    1f0e:	eb 89       	ldd	r30, Y+19	; 0x13
    1f10:	fc 89       	ldd	r31, Y+20	; 0x14
    1f12:	00 82       	st	Z, r0
    1f14:	8b 89       	ldd	r24, Y+19	; 0x13
    1f16:	9c 89       	ldd	r25, Y+20	; 0x14
    1f18:	01 96       	adiw	r24, 0x01	; 1
    1f1a:	9c 8b       	std	Y+20, r25	; 0x14
    1f1c:	8b 8b       	std	Y+19, r24	; 0x13
    1f1e:	9f 89       	ldd	r25, Y+23	; 0x17
    1f20:	91 50       	subi	r25, 0x01	; 1
    1f22:	9f 8b       	std	Y+23, r25	; 0x17
    1f24:	ef 89       	ldd	r30, Y+23	; 0x17
    1f26:	ee 23       	and	r30, r30
    1f28:	51 f7       	brne	.-44     	; 0x1efe <main+0x74>
	TWI_init(&config_twi);
    1f2a:	ce 01       	movw	r24, r28
    1f2c:	08 96       	adiw	r24, 0x08	; 8
    1f2e:	0e 94 9a 07 	call	0xf34	; 0xf34 <TWI_init>


	DcMotor_Init();
    1f32:	0e 94 a3 05 	call	0xb46	; 0xb46 <DcMotor_Init>
	receiveArraysFromUART();
    1f36:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <receiveArraysFromUART>
    1f3a:	ff cf       	rjmp	.-2      	; 0x1f3a <main+0xb0>

00001f3c <__udivmodsi4>:
    1f3c:	a1 e2       	ldi	r26, 0x21	; 33
    1f3e:	1a 2e       	mov	r1, r26
    1f40:	aa 1b       	sub	r26, r26
    1f42:	bb 1b       	sub	r27, r27
    1f44:	fd 01       	movw	r30, r26
    1f46:	0d c0       	rjmp	.+26     	; 0x1f62 <__udivmodsi4_ep>

00001f48 <__udivmodsi4_loop>:
    1f48:	aa 1f       	adc	r26, r26
    1f4a:	bb 1f       	adc	r27, r27
    1f4c:	ee 1f       	adc	r30, r30
    1f4e:	ff 1f       	adc	r31, r31
    1f50:	a2 17       	cp	r26, r18
    1f52:	b3 07       	cpc	r27, r19
    1f54:	e4 07       	cpc	r30, r20
    1f56:	f5 07       	cpc	r31, r21
    1f58:	20 f0       	brcs	.+8      	; 0x1f62 <__udivmodsi4_ep>
    1f5a:	a2 1b       	sub	r26, r18
    1f5c:	b3 0b       	sbc	r27, r19
    1f5e:	e4 0b       	sbc	r30, r20
    1f60:	f5 0b       	sbc	r31, r21

00001f62 <__udivmodsi4_ep>:
    1f62:	66 1f       	adc	r22, r22
    1f64:	77 1f       	adc	r23, r23
    1f66:	88 1f       	adc	r24, r24
    1f68:	99 1f       	adc	r25, r25
    1f6a:	1a 94       	dec	r1
    1f6c:	69 f7       	brne	.-38     	; 0x1f48 <__udivmodsi4_loop>
    1f6e:	60 95       	com	r22
    1f70:	70 95       	com	r23
    1f72:	80 95       	com	r24
    1f74:	90 95       	com	r25
    1f76:	9b 01       	movw	r18, r22
    1f78:	ac 01       	movw	r20, r24
    1f7a:	bd 01       	movw	r22, r26
    1f7c:	cf 01       	movw	r24, r30
    1f7e:	08 95       	ret

00001f80 <__prologue_saves__>:
    1f80:	2f 92       	push	r2
    1f82:	3f 92       	push	r3
    1f84:	4f 92       	push	r4
    1f86:	5f 92       	push	r5
    1f88:	6f 92       	push	r6
    1f8a:	7f 92       	push	r7
    1f8c:	8f 92       	push	r8
    1f8e:	9f 92       	push	r9
    1f90:	af 92       	push	r10
    1f92:	bf 92       	push	r11
    1f94:	cf 92       	push	r12
    1f96:	df 92       	push	r13
    1f98:	ef 92       	push	r14
    1f9a:	ff 92       	push	r15
    1f9c:	0f 93       	push	r16
    1f9e:	1f 93       	push	r17
    1fa0:	cf 93       	push	r28
    1fa2:	df 93       	push	r29
    1fa4:	cd b7       	in	r28, 0x3d	; 61
    1fa6:	de b7       	in	r29, 0x3e	; 62
    1fa8:	ca 1b       	sub	r28, r26
    1faa:	db 0b       	sbc	r29, r27
    1fac:	0f b6       	in	r0, 0x3f	; 63
    1fae:	f8 94       	cli
    1fb0:	de bf       	out	0x3e, r29	; 62
    1fb2:	0f be       	out	0x3f, r0	; 63
    1fb4:	cd bf       	out	0x3d, r28	; 61
    1fb6:	09 94       	ijmp

00001fb8 <__epilogue_restores__>:
    1fb8:	2a 88       	ldd	r2, Y+18	; 0x12
    1fba:	39 88       	ldd	r3, Y+17	; 0x11
    1fbc:	48 88       	ldd	r4, Y+16	; 0x10
    1fbe:	5f 84       	ldd	r5, Y+15	; 0x0f
    1fc0:	6e 84       	ldd	r6, Y+14	; 0x0e
    1fc2:	7d 84       	ldd	r7, Y+13	; 0x0d
    1fc4:	8c 84       	ldd	r8, Y+12	; 0x0c
    1fc6:	9b 84       	ldd	r9, Y+11	; 0x0b
    1fc8:	aa 84       	ldd	r10, Y+10	; 0x0a
    1fca:	b9 84       	ldd	r11, Y+9	; 0x09
    1fcc:	c8 84       	ldd	r12, Y+8	; 0x08
    1fce:	df 80       	ldd	r13, Y+7	; 0x07
    1fd0:	ee 80       	ldd	r14, Y+6	; 0x06
    1fd2:	fd 80       	ldd	r15, Y+5	; 0x05
    1fd4:	0c 81       	ldd	r16, Y+4	; 0x04
    1fd6:	1b 81       	ldd	r17, Y+3	; 0x03
    1fd8:	aa 81       	ldd	r26, Y+2	; 0x02
    1fda:	b9 81       	ldd	r27, Y+1	; 0x01
    1fdc:	ce 0f       	add	r28, r30
    1fde:	d1 1d       	adc	r29, r1
    1fe0:	0f b6       	in	r0, 0x3f	; 63
    1fe2:	f8 94       	cli
    1fe4:	de bf       	out	0x3e, r29	; 62
    1fe6:	0f be       	out	0x3f, r0	; 63
    1fe8:	cd bf       	out	0x3d, r28	; 61
    1fea:	ed 01       	movw	r28, r26
    1fec:	08 95       	ret

00001fee <_exit>:
    1fee:	f8 94       	cli

00001ff0 <__stop_program>:
    1ff0:	ff cf       	rjmp	.-2      	; 0x1ff0 <__stop_program>
